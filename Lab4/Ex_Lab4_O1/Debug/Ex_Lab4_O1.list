
Ex_Lab4_O1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080024e8  080024e8  000124e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800250c  0800250c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800250c  0800250c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800250c  0800250c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800250c  0800250c  0001250c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002510  08002510  00012510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000074  08002588  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08002588  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b570  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d3b  00000000  00000000  0002b60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002d348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002dd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174e9  00000000  00000000  0002e6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdae  00000000  00000000  00045b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085842  00000000  00000000  00051947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7189  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa8  00000000  00000000  000d71dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080024d0 	.word	0x080024d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080024d0 	.word	0x080024d0

0800014c <button_reading>:

// Counter for automatically detecting when a button is pressed more than 1 second
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];
static uint16_t counterForLongPressInterval[NO_OF_BUTTONS];

void button_reading(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
    for (int i = 0; i < NO_OF_BUTTONS; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e0bd      	b.n	80002d4 <button_reading+0x188>
        debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000158:	4a63      	ldr	r2, [pc, #396]	; (80002e8 <button_reading+0x19c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a62      	ldr	r2, [pc, #392]	; (80002ec <button_reading+0x1a0>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]

        // Update to handle multiple buttons
        switch(i) {
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2b02      	cmp	r3, #2
 800016e:	d015      	beq.n	800019c <button_reading+0x50>
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	2b02      	cmp	r3, #2
 8000174:	dc14      	bgt.n	80001a0 <button_reading+0x54>
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d003      	beq.n	8000184 <button_reading+0x38>
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b01      	cmp	r3, #1
 8000180:	d010      	beq.n	80001a4 <button_reading+0x58>
                break;
            case 2:
//                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
                break;
            default:
                break;
 8000182:	e00d      	b.n	80001a0 <button_reading+0x54>
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000184:	2101      	movs	r1, #1
 8000186:	485a      	ldr	r0, [pc, #360]	; (80002f0 <button_reading+0x1a4>)
 8000188:	f001 f89c 	bl	80012c4 <HAL_GPIO_ReadPin>
 800018c:	4603      	mov	r3, r0
 800018e:	4619      	mov	r1, r3
 8000190:	4a55      	ldr	r2, [pc, #340]	; (80002e8 <button_reading+0x19c>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4413      	add	r3, r2
 8000196:	460a      	mov	r2, r1
 8000198:	701a      	strb	r2, [r3, #0]
                break;
 800019a:	e004      	b.n	80001a6 <button_reading+0x5a>
                break;
 800019c:	bf00      	nop
 800019e:	e002      	b.n	80001a6 <button_reading+0x5a>
                break;
 80001a0:	bf00      	nop
 80001a2:	e000      	b.n	80001a6 <button_reading+0x5a>
                break;
 80001a4:	bf00      	nop
        }

        if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 80001a6:	4a50      	ldr	r2, [pc, #320]	; (80002e8 <button_reading+0x19c>)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	4413      	add	r3, r2
 80001ac:	781a      	ldrb	r2, [r3, #0]
 80001ae:	494f      	ldr	r1, [pc, #316]	; (80002ec <button_reading+0x1a0>)
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	440b      	add	r3, r1
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	429a      	cmp	r2, r3
 80001b8:	f040 8089 	bne.w	80002ce <button_reading+0x182>
            buttonBuffer[i] = debounceButtonBuffer1[i]; // Debouncing logic
 80001bc:	4a4a      	ldr	r2, [pc, #296]	; (80002e8 <button_reading+0x19c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	4413      	add	r3, r2
 80001c2:	7819      	ldrb	r1, [r3, #0]
 80001c4:	4a4b      	ldr	r2, [pc, #300]	; (80002f4 <button_reading+0x1a8>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4413      	add	r3, r2
 80001ca:	460a      	mov	r2, r1
 80001cc:	701a      	strb	r2, [r3, #0]

            if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 80001ce:	4a49      	ldr	r2, [pc, #292]	; (80002f4 <button_reading+0x1a8>)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4413      	add	r3, r2
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d144      	bne.n	8000264 <button_reading+0x118>
                // Button is pressed; we start counting
                if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80001da:	4a47      	ldr	r2, [pc, #284]	; (80002f8 <button_reading+0x1ac>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001e2:	2b63      	cmp	r3, #99	; 0x63
 80001e4:	d81f      	bhi.n	8000226 <button_reading+0xda>
                    counterForButtonPress1s[i]++;
 80001e6:	4a44      	ldr	r2, [pc, #272]	; (80002f8 <button_reading+0x1ac>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001ee:	3301      	adds	r3, #1
 80001f0:	b299      	uxth	r1, r3
 80001f2:	4a41      	ldr	r2, [pc, #260]	; (80002f8 <button_reading+0x1ac>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    if (counterForButtonPress1s[i] == DURATION_FOR_AUTO_INCREASING) {
 80001fa:	4a3f      	ldr	r2, [pc, #252]	; (80002f8 <button_reading+0x1ac>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000202:	2b64      	cmp	r3, #100	; 0x64
 8000204:	d12e      	bne.n	8000264 <button_reading+0x118>
                        // Flag is turned on when 1 second has passed since the button was pressed
                        flagForButtonPress1s[i] = 1;
 8000206:	4a3d      	ldr	r2, [pc, #244]	; (80002fc <button_reading+0x1b0>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4413      	add	r3, r2
 800020c:	2201      	movs	r2, #1
 800020e:	701a      	strb	r2, [r3, #0]
                        flagForButtonPressShort[i] = 0; // Reset short press flag
 8000210:	4a3b      	ldr	r2, [pc, #236]	; (8000300 <button_reading+0x1b4>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4413      	add	r3, r2
 8000216:	2200      	movs	r2, #0
 8000218:	701a      	strb	r2, [r3, #0]
                        counterForLongPressInterval[i] = 0;
 800021a:	4a3a      	ldr	r2, [pc, #232]	; (8000304 <button_reading+0x1b8>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2100      	movs	r1, #0
 8000220:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000224:	e01e      	b.n	8000264 <button_reading+0x118>
                    }
                } else {
                    // The button is pressed for less than 1 second
                	counterForLongPressInterval[i]++;
 8000226:	4a37      	ldr	r2, [pc, #220]	; (8000304 <button_reading+0x1b8>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800022e:	3301      	adds	r3, #1
 8000230:	b299      	uxth	r1, r3
 8000232:	4a34      	ldr	r2, [pc, #208]	; (8000304 <button_reading+0x1b8>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                	if (counterForLongPressInterval[i] >= 25) {
 800023a:	4a32      	ldr	r2, [pc, #200]	; (8000304 <button_reading+0x1b8>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000242:	2b18      	cmp	r3, #24
 8000244:	d90e      	bls.n	8000264 <button_reading+0x118>
						flagForButtonPressShort[i] = 0;
 8000246:	4a2e      	ldr	r2, [pc, #184]	; (8000300 <button_reading+0x1b4>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4413      	add	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]
						flagForButtonPress1s[i] = 1; // Reset long press flag
 8000250:	4a2a      	ldr	r2, [pc, #168]	; (80002fc <button_reading+0x1b0>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4413      	add	r3, r2
 8000256:	2201      	movs	r2, #1
 8000258:	701a      	strb	r2, [r3, #0]
						counterForLongPressInterval[i] = 0;
 800025a:	4a2a      	ldr	r2, [pc, #168]	; (8000304 <button_reading+0x1b8>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2100      	movs	r1, #0
 8000260:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                	}
                }
            }

            if (buttonBuffer[i] == BUTTON_IS_RELEASED && previousButtonBuffer[i] == BUTTON_IS_PRESSED) {
 8000264:	4a23      	ldr	r2, [pc, #140]	; (80002f4 <button_reading+0x1a8>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4413      	add	r3, r2
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b01      	cmp	r3, #1
 800026e:	d125      	bne.n	80002bc <button_reading+0x170>
 8000270:	4a25      	ldr	r2, [pc, #148]	; (8000308 <button_reading+0x1bc>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4413      	add	r3, r2
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d11f      	bne.n	80002bc <button_reading+0x170>
				// Button has just been released
				if (counterForButtonPress1s[i] > 0 && counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 800027c:	4a1e      	ldr	r2, [pc, #120]	; (80002f8 <button_reading+0x1ac>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d00a      	beq.n	800029e <button_reading+0x152>
 8000288:	4a1b      	ldr	r2, [pc, #108]	; (80002f8 <button_reading+0x1ac>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000290:	2b63      	cmp	r3, #99	; 0x63
 8000292:	d804      	bhi.n	800029e <button_reading+0x152>
					// It was a short press
					flagForButtonPressShort[i] = 1;
 8000294:	4a1a      	ldr	r2, [pc, #104]	; (8000300 <button_reading+0x1b4>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	4413      	add	r3, r2
 800029a:	2201      	movs	r2, #1
 800029c:	701a      	strb	r2, [r3, #0]
				}
				// Reset counters and flags on release
				counterForButtonPress1s[i] = 0;
 800029e:	4a16      	ldr	r2, [pc, #88]	; (80002f8 <button_reading+0x1ac>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2100      	movs	r1, #0
 80002a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				counterForLongPressInterval[i] = 0;
 80002a8:	4a16      	ldr	r2, [pc, #88]	; (8000304 <button_reading+0x1b8>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2100      	movs	r1, #0
 80002ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 80002b2:	4a12      	ldr	r2, [pc, #72]	; (80002fc <button_reading+0x1b0>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4413      	add	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
			}

			// Store the current button state for the next iteration
			previousButtonBuffer[i] = buttonBuffer[i];
 80002bc:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <button_reading+0x1a8>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4413      	add	r3, r2
 80002c2:	7819      	ldrb	r1, [r3, #0]
 80002c4:	4a10      	ldr	r2, [pc, #64]	; (8000308 <button_reading+0x1bc>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4413      	add	r3, r2
 80002ca:	460a      	mov	r2, r1
 80002cc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NO_OF_BUTTONS; i++) {
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	3301      	adds	r3, #1
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	f77f af3e 	ble.w	8000158 <button_reading+0xc>
        }
    }
}
 80002dc:	bf00      	nop
 80002de:	bf00      	nop
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000098 	.word	0x20000098
 80002ec:	2000009c 	.word	0x2000009c
 80002f0:	40010c00 	.word	0x40010c00
 80002f4:	20000090 	.word	0x20000090
 80002f8:	200000a8 	.word	0x200000a8
 80002fc:	200000a0 	.word	0x200000a0
 8000300:	200000a4 	.word	0x200000a4
 8000304:	200000ac 	.word	0x200000ac
 8000308:	20000094 	.word	0x20000094

0800030c <is_button_pressed_short>:

// Function to check if button is pressed shorter than 1s
unsigned char is_button_pressed_short(uint8_t index) {
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]
    if (index >= NO_OF_BUTTONS) return 0;
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <is_button_pressed_short+0x14>
 800031c:	2300      	movs	r3, #0
 800031e:	e00b      	b.n	8000338 <is_button_pressed_short+0x2c>
    if (flagForButtonPressShort[index] == 1) {
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	4a08      	ldr	r2, [pc, #32]	; (8000344 <is_button_pressed_short+0x38>)
 8000324:	5cd3      	ldrb	r3, [r2, r3]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d105      	bne.n	8000336 <is_button_pressed_short+0x2a>
        flagForButtonPressShort[index] = 0; // Reset the flag
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	4a05      	ldr	r2, [pc, #20]	; (8000344 <is_button_pressed_short+0x38>)
 800032e:	2100      	movs	r1, #0
 8000330:	54d1      	strb	r1, [r2, r3]
        return 1;
 8000332:	2301      	movs	r3, #1
 8000334:	e000      	b.n	8000338 <is_button_pressed_short+0x2c>
    }
    return 0;
 8000336:	2300      	movs	r3, #0
}
 8000338:	4618      	mov	r0, r3
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	200000a4 	.word	0x200000a4

08000348 <is_button_pressed_1s>:

// Function to check if button is pressed longer than 1s
unsigned char is_button_pressed_1s(uint8_t index) {
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
    if (index >= NO_OF_BUTTONS) return 0;
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <is_button_pressed_1s+0x14>
 8000358:	2300      	movs	r3, #0
 800035a:	e00b      	b.n	8000374 <is_button_pressed_1s+0x2c>
    if (flagForButtonPress1s[index] == 1) {
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	4a08      	ldr	r2, [pc, #32]	; (8000380 <is_button_pressed_1s+0x38>)
 8000360:	5cd3      	ldrb	r3, [r2, r3]
 8000362:	2b01      	cmp	r3, #1
 8000364:	d105      	bne.n	8000372 <is_button_pressed_1s+0x2a>
        flagForButtonPress1s[index] = 0; // Reset the flag
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	4a05      	ldr	r2, [pc, #20]	; (8000380 <is_button_pressed_1s+0x38>)
 800036a:	2100      	movs	r1, #0
 800036c:	54d1      	strb	r1, [r2, r3]
        return 1;
 800036e:	2301      	movs	r3, #1
 8000370:	e000      	b.n	8000374 <is_button_pressed_1s+0x2c>
    }
    return 0;
 8000372:	2300      	movs	r3, #0
}
 8000374:	4618      	mov	r0, r3
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	200000a0 	.word	0x200000a0

08000384 <LIST_Add_Task>:
 * If the list is empty, our new task becomes the head (also the tail) of the list -> only task in list
 * If there is no previous node of the pointer, then we add our task to the head of the list
 * If there is no current node at the pointer, we move the pointer to the very end and add the task in
 * If not any of those cases, add the task to the middle of the list prev -> task -> current
 */
unsigned char LIST_Add_Task(list* my_list, void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD, uint32_t TaskID, node* prev, node* cur) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0
 800038a:	60f8      	str	r0, [r7, #12]
 800038c:	60b9      	str	r1, [r7, #8]
 800038e:	607a      	str	r2, [r7, #4]
 8000390:	603b      	str	r3, [r7, #0]
	node* task = (node*)malloc(sizeof(node));
 8000392:	2018      	movs	r0, #24
 8000394:	f001 ffc0 	bl	8002318 <malloc>
 8000398:	4603      	mov	r3, r0
 800039a:	617b      	str	r3, [r7, #20]
	task->data.pTask = pFunction;
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	68ba      	ldr	r2, [r7, #8]
 80003a0:	601a      	str	r2, [r3, #0]
	task->data.DELAY = DELAY;
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	605a      	str	r2, [r3, #4]
	task->data.PERIOD = PERIOD;
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	683a      	ldr	r2, [r7, #0]
 80003ac:	609a      	str	r2, [r3, #8]
	task->data.TaskID = TaskID;
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	6a3a      	ldr	r2, [r7, #32]
 80003b2:	60da      	str	r2, [r3, #12]
	task->data.RunMe = 0;
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	2200      	movs	r2, #0
 80003b8:	741a      	strb	r2, [r3, #16]
	task->next = NULL;
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	2200      	movs	r2, #0
 80003be:	615a      	str	r2, [r3, #20]

	if (my_list->size == 0) {
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d10d      	bne.n	80003e4 <LIST_Add_Task+0x60>
		my_list->head = task;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	697a      	ldr	r2, [r7, #20]
 80003cc:	601a      	str	r2, [r3, #0]
		my_list->tail = task;
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	697a      	ldr	r2, [r7, #20]
 80003d2:	605a      	str	r2, [r3, #4]
		my_list->size++;
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	1c5a      	adds	r2, r3, #1
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	609a      	str	r2, [r3, #8]
		return TaskID;
 80003de:	6a3b      	ldr	r3, [r7, #32]
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	e030      	b.n	8000446 <LIST_Add_Task+0xc2>
	} else if (prev == NULL) {
 80003e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d10e      	bne.n	8000408 <LIST_Add_Task+0x84>
		task->next = my_list->head;
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	615a      	str	r2, [r3, #20]
		my_list->head = task;
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	697a      	ldr	r2, [r7, #20]
 80003f6:	601a      	str	r2, [r3, #0]
		my_list->size++;
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	1c5a      	adds	r2, r3, #1
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	609a      	str	r2, [r3, #8]
		return TaskID;
 8000402:	6a3b      	ldr	r3, [r7, #32]
 8000404:	b2db      	uxtb	r3, r3
 8000406:	e01e      	b.n	8000446 <LIST_Add_Task+0xc2>
	} else if (cur == NULL) {
 8000408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800040a:	2b00      	cmp	r3, #0
 800040c:	d10e      	bne.n	800042c <LIST_Add_Task+0xa8>
		my_list->tail->next = task;
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	697a      	ldr	r2, [r7, #20]
 8000414:	615a      	str	r2, [r3, #20]
		my_list->tail = task;
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	697a      	ldr	r2, [r7, #20]
 800041a:	605a      	str	r2, [r3, #4]
		my_list->size++;
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	1c5a      	adds	r2, r3, #1
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	609a      	str	r2, [r3, #8]
		return TaskID;
 8000426:	6a3b      	ldr	r3, [r7, #32]
 8000428:	b2db      	uxtb	r3, r3
 800042a:	e00c      	b.n	8000446 <LIST_Add_Task+0xc2>
	} else {
		prev->next = task;
 800042c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800042e:	697a      	ldr	r2, [r7, #20]
 8000430:	615a      	str	r2, [r3, #20]
		task->next = cur;
 8000432:	697b      	ldr	r3, [r7, #20]
 8000434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000436:	615a      	str	r2, [r3, #20]
		my_list->size++;
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	1c5a      	adds	r2, r3, #1
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	609a      	str	r2, [r3, #8]
		return TaskID;
 8000442:	6a3b      	ldr	r3, [r7, #32]
 8000444:	b2db      	uxtb	r3, r3
	}
}
 8000446:	4618      	mov	r0, r3
 8000448:	3718      	adds	r7, #24
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <LIST_Delete_Head_Task>:
 * If there is only one task (size = 1), guide the pointer at the head of list, store the taskID then delete that task
 * also decrease the list size.
 * If there are more than 1 tasks, by pass the head node and then free the old head A(head) -> B => A -> B(new head) => B(head)
 */

unsigned char LIST_Delete_Head_Task(list* my_list) {
 800044e:	b580      	push	{r7, lr}
 8000450:	b086      	sub	sp, #24
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
    if (my_list->size <= 0) {
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	689b      	ldr	r3, [r3, #8]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d101      	bne.n	8000462 <LIST_Delete_Head_Task+0x14>
        return SCH_MAX_TASK;
 800045e:	2328      	movs	r3, #40	; 0x28
 8000460:	e02f      	b.n	80004c2 <LIST_Delete_Head_Task+0x74>
    } else if (my_list->size == 1) {
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	689b      	ldr	r3, [r3, #8]
 8000466:	2b01      	cmp	r3, #1
 8000468:	d116      	bne.n	8000498 <LIST_Delete_Head_Task+0x4a>
    	node* tmp = my_list->head;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	60fb      	str	r3, [r7, #12]
    	uint32_t TaskID = tmp->data.TaskID;
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	60bb      	str	r3, [r7, #8]
        my_list->head = NULL;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
        my_list->tail = NULL;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2200      	movs	r2, #0
 8000480:	605a      	str	r2, [r3, #4]
        my_list->size--;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	689b      	ldr	r3, [r3, #8]
 8000486:	1e5a      	subs	r2, r3, #1
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	609a      	str	r2, [r3, #8]
        free(tmp);
 800048c:	68f8      	ldr	r0, [r7, #12]
 800048e:	f001 ff4b 	bl	8002328 <free>
        return TaskID;
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	b2db      	uxtb	r3, r3
 8000496:	e014      	b.n	80004c2 <LIST_Delete_Head_Task+0x74>
    } else {
    	node*tmp = my_list->head;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	617b      	str	r3, [r7, #20]
    	uint32_t TaskID = tmp->data.TaskID;
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	68db      	ldr	r3, [r3, #12]
 80004a2:	613b      	str	r3, [r7, #16]
    	my_list->head = my_list->head->next;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	695a      	ldr	r2, [r3, #20]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	601a      	str	r2, [r3, #0]
    	my_list->size--;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	1e5a      	subs	r2, r3, #1
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	609a      	str	r2, [r3, #8]
    	free(tmp);
 80004b8:	6978      	ldr	r0, [r7, #20]
 80004ba:	f001 ff35 	bl	8002328 <free>
    	return TaskID;
 80004be:	693b      	ldr	r3, [r7, #16]
 80004c0:	b2db      	uxtb	r3, r3
    }
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3718      	adds	r7, #24
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <Func2>:
#include "list.h"

int status = 0;
int prev_status = 0;
int counter = 50;
void Func2(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	counter--;
 80004d0:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <Func2+0x78>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	3b01      	subs	r3, #1
 80004d6:	4a1b      	ldr	r2, [pc, #108]	; (8000544 <Func2+0x78>)
 80004d8:	6013      	str	r3, [r2, #0]
	if(counter <= 0){
 80004da:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <Func2+0x78>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	dc08      	bgt.n	80004f4 <Func2+0x28>
		prev_status = 1 - prev_status;
 80004e2:	4b19      	ldr	r3, [pc, #100]	; (8000548 <Func2+0x7c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f1c3 0301 	rsb	r3, r3, #1
 80004ea:	4a17      	ldr	r2, [pc, #92]	; (8000548 <Func2+0x7c>)
 80004ec:	6013      	str	r3, [r2, #0]
		counter = 42;
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <Func2+0x78>)
 80004f0:	222a      	movs	r2, #42	; 0x2a
 80004f2:	601a      	str	r2, [r3, #0]
	}
	if (status == 0 && prev_status == 0){
 80004f4:	4b15      	ldr	r3, [pc, #84]	; (800054c <Func2+0x80>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d10e      	bne.n	800051a <Func2+0x4e>
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <Func2+0x7c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d10a      	bne.n	800051a <Func2+0x4e>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000504:	2140      	movs	r1, #64	; 0x40
 8000506:	4812      	ldr	r0, [pc, #72]	; (8000550 <Func2+0x84>)
 8000508:	f000 ff0b 	bl	8001322 <HAL_GPIO_TogglePin>
		status = 1 - status;
 800050c:	4b0f      	ldr	r3, [pc, #60]	; (800054c <Func2+0x80>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f1c3 0301 	rsb	r3, r3, #1
 8000514:	4a0d      	ldr	r2, [pc, #52]	; (800054c <Func2+0x80>)
 8000516:	6013      	str	r3, [r2, #0]
	}
	else if (status == 1 && prev_status == 1){
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
		status = 1 - status;
	}
}
 8000518:	e011      	b.n	800053e <Func2+0x72>
	else if (status == 1 && prev_status == 1){
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <Func2+0x80>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d10d      	bne.n	800053e <Func2+0x72>
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <Func2+0x7c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d109      	bne.n	800053e <Func2+0x72>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800052a:	2140      	movs	r1, #64	; 0x40
 800052c:	4808      	ldr	r0, [pc, #32]	; (8000550 <Func2+0x84>)
 800052e:	f000 fef8 	bl	8001322 <HAL_GPIO_TogglePin>
		status = 1 - status;
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <Func2+0x80>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f1c3 0301 	rsb	r3, r3, #1
 800053a:	4a04      	ldr	r2, [pc, #16]	; (800054c <Func2+0x80>)
 800053c:	6013      	str	r3, [r2, #0]
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	200000b4 	.word	0x200000b4
 800054c:	200000b0 	.word	0x200000b0
 8000550:	40010800 	.word	0x40010800

08000554 <Func1>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Func1(){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000558:	2120      	movs	r1, #32
 800055a:	4802      	ldr	r0, [pc, #8]	; (8000564 <Func1+0x10>)
 800055c:	f000 fee1 	bl	8001322 <HAL_GPIO_TogglePin>
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40010800 	.word	0x40010800

08000568 <Func3>:

void Funo2(){
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
}

void Func3(){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	4802      	ldr	r0, [pc, #8]	; (8000578 <Func3+0x10>)
 8000570:	f000 fed7 	bl	8001322 <HAL_GPIO_TogglePin>
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40010800 	.word	0x40010800

0800057c <Func4>:

void Func4(){
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000580:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000584:	4802      	ldr	r0, [pc, #8]	; (8000590 <Func4+0x14>)
 8000586:	f000 fecc 	bl	8001322 <HAL_GPIO_TogglePin>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40010800 	.word	0x40010800

08000594 <Func5>:

void Func5(){
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 8000598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <Func5+0x14>)
 800059e:	f000 fec0 	bl	8001322 <HAL_GPIO_TogglePin>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40010800 	.word	0x40010800

080005ac <Func6>:

void Func6(){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	if(is_button_pressed_short(0) == 1){
 80005b0:	2000      	movs	r0, #0
 80005b2:	f7ff feab 	bl	800030c <is_button_pressed_short>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d105      	bne.n	80005c8 <Func6+0x1c>
		HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 80005bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c0:	4808      	ldr	r0, [pc, #32]	; (80005e4 <Func6+0x38>)
 80005c2:	f000 feae 	bl	8001322 <HAL_GPIO_TogglePin>
	}
	else if(is_button_pressed_1s(0) == 1){
		HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
	}
}
 80005c6:	e00a      	b.n	80005de <Func6+0x32>
	else if(is_button_pressed_1s(0) == 1){
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff febd 	bl	8000348 <is_button_pressed_1s>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d104      	bne.n	80005de <Func6+0x32>
		HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 80005d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <Func6+0x38>)
 80005da:	f000 fea2 	bl	8001322 <HAL_GPIO_TogglePin>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40010800 	.word	0x40010800

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fb80 	bl	8000cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f840 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 f8c6 	bl	8000784 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005f8:	f000 f878 	bl	80006ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005fc:	4815      	ldr	r0, [pc, #84]	; (8000654 <main+0x6c>)
 80005fe:	f001 fad5 	bl	8001bac <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 8000602:	f000 f921 	bl	8000848 <SCH_Init>
  SCH_Add_Task(Func1, 1, 50);
 8000606:	2232      	movs	r2, #50	; 0x32
 8000608:	2101      	movs	r1, #1
 800060a:	4813      	ldr	r0, [pc, #76]	; (8000658 <main+0x70>)
 800060c:	f000 f95a 	bl	80008c4 <SCH_Add_Task>
  SCH_Add_Task(Func2, 2, 100);
 8000610:	2264      	movs	r2, #100	; 0x64
 8000612:	2102      	movs	r1, #2
 8000614:	4811      	ldr	r0, [pc, #68]	; (800065c <main+0x74>)
 8000616:	f000 f955 	bl	80008c4 <SCH_Add_Task>
  SCH_Add_Task(Func3, 5, 150);
 800061a:	2296      	movs	r2, #150	; 0x96
 800061c:	2105      	movs	r1, #5
 800061e:	4810      	ldr	r0, [pc, #64]	; (8000660 <main+0x78>)
 8000620:	f000 f950 	bl	80008c4 <SCH_Add_Task>
  SCH_Add_Task(Func4, 7, 200);
 8000624:	22c8      	movs	r2, #200	; 0xc8
 8000626:	2107      	movs	r1, #7
 8000628:	480e      	ldr	r0, [pc, #56]	; (8000664 <main+0x7c>)
 800062a:	f000 f94b 	bl	80008c4 <SCH_Add_Task>
  SCH_Add_Task(Func5, 250, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	21fa      	movs	r1, #250	; 0xfa
 8000632:	480d      	ldr	r0, [pc, #52]	; (8000668 <main+0x80>)
 8000634:	f000 f946 	bl	80008c4 <SCH_Add_Task>

  SCH_Add_Task(Func6, 9, 1);
 8000638:	2201      	movs	r2, #1
 800063a:	2109      	movs	r1, #9
 800063c:	480b      	ldr	r0, [pc, #44]	; (800066c <main+0x84>)
 800063e:	f000 f941 	bl	80008c4 <SCH_Add_Task>
  SCH_Add_Task(button_reading, 11, 2);
 8000642:	2202      	movs	r2, #2
 8000644:	210b      	movs	r1, #11
 8000646:	480a      	ldr	r0, [pc, #40]	; (8000670 <main+0x88>)
 8000648:	f000 f93c 	bl	80008c4 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 800064c:	f000 fa24 	bl	8000a98 <SCH_Dispatch_Tasks>
 8000650:	e7fc      	b.n	800064c <main+0x64>
 8000652:	bf00      	nop
 8000654:	200000c4 	.word	0x200000c4
 8000658:	08000555 	.word	0x08000555
 800065c:	080004cd 	.word	0x080004cd
 8000660:	08000569 	.word	0x08000569
 8000664:	0800057d 	.word	0x0800057d
 8000668:	08000595 	.word	0x08000595
 800066c:	080005ad 	.word	0x080005ad
 8000670:	0800014d 	.word	0x0800014d

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b090      	sub	sp, #64	; 0x40
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0318 	add.w	r3, r7, #24
 800067e:	2228      	movs	r2, #40	; 0x28
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fe58 	bl	8002338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000696:	2302      	movs	r3, #2
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069a:	2301      	movs	r3, #1
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069e:	2310      	movs	r3, #16
 80006a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 0318 	add.w	r3, r7, #24
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fe52 	bl	8001354 <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006b6:	f000 f8c2 	bl	800083e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f8be 	bl	8001854 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006de:	f000 f8ae 	bl	800083e <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3740      	adds	r7, #64	; 0x40
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000700:	463b      	mov	r3, r7
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000708:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_TIM2_Init+0x94>)
 800070a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800070e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_TIM2_Init+0x94>)
 8000712:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000716:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_TIM2_Init+0x94>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_TIM2_Init+0x94>)
 8000720:	2209      	movs	r2, #9
 8000722:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_TIM2_Init+0x94>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_TIM2_Init+0x94>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000730:	4813      	ldr	r0, [pc, #76]	; (8000780 <MX_TIM2_Init+0x94>)
 8000732:	f001 f9eb 	bl	8001b0c <HAL_TIM_Base_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800073c:	f000 f87f 	bl	800083e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000744:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	4619      	mov	r1, r3
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <MX_TIM2_Init+0x94>)
 800074e:	f001 fb69 	bl	8001e24 <HAL_TIM_ConfigClockSource>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000758:	f000 f871 	bl	800083e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075c:	2300      	movs	r3, #0
 800075e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000764:	463b      	mov	r3, r7
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_TIM2_Init+0x94>)
 800076a:	f001 fd41 	bl	80021f0 <HAL_TIMEx_MasterConfigSynchronization>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000774:	f000 f863 	bl	800083e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200000c4 	.word	0x200000c4

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <MX_GPIO_Init+0x90>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a1d      	ldr	r2, [pc, #116]	; (8000814 <MX_GPIO_Init+0x90>)
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_GPIO_Init+0x90>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0304 	and.w	r3, r3, #4
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_GPIO_Init+0x90>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a17      	ldr	r2, [pc, #92]	; (8000814 <MX_GPIO_Init+0x90>)
 80007b6:	f043 0308 	orr.w	r3, r3, #8
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_GPIO_Init+0x90>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0308 	and.w	r3, r3, #8
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80007ce:	4812      	ldr	r0, [pc, #72]	; (8000818 <MX_GPIO_Init+0x94>)
 80007d0:	f000 fd8f 	bl	80012f2 <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80007d4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80007d8:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin|LED6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2302      	movs	r3, #2
 80007e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	4619      	mov	r1, r3
 80007ec:	480a      	ldr	r0, [pc, #40]	; (8000818 <MX_GPIO_Init+0x94>)
 80007ee:	f000 fbef 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 80007f2:	2301      	movs	r3, #1
 80007f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_GPIO_Init+0x98>)
 8000806:	f000 fbe3 	bl	8000fd0 <HAL_GPIO_Init>

}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000
 8000818:	40010800 	.word	0x40010800
 800081c:	40010c00 	.word	0x40010c00

08000820 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000830:	d101      	bne.n	8000836 <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 8000832:	f000 f90d 	bl	8000a50 <SCH_Update>
	}
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000842:	b672      	cpsid	i
}
 8000844:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000846:	e7fe      	b.n	8000846 <Error_Handler+0x8>

08000848 <SCH_Init>:
Initially, the SCH_Init function will be called before the while(1) loop to delete all the task in
the list, reset the TaskID array to mark that all slots in the list are empty, and return all the pointer
to zero
*/

void SCH_Init(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
    node* tmp = my_list.head;
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <SCH_Init+0x6c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	60fb      	str	r3, [r7, #12]
    while (tmp != NULL)
 8000854:	e009      	b.n	800086a <SCH_Init+0x22>
    {
    	node* next = tmp->next;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	607b      	str	r3, [r7, #4]
        SCH_Delete_Task(tmp->data.TaskID);
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	4618      	mov	r0, r3
 8000862:	f000 f8b9 	bl	80009d8 <SCH_Delete_Task>
        tmp = next;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	60fb      	str	r3, [r7, #12]
    while (tmp != NULL)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1f2      	bne.n	8000856 <SCH_Init+0xe>
    }
    for (int32_t i=0; i<SCH_MAX_TASK; i++) {
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	e008      	b.n	8000888 <SCH_Init+0x40>
        TaskID_arr[i] = -1;
 8000876:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <SCH_Init+0x70>)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	f04f 31ff 	mov.w	r1, #4294967295
 800087e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int32_t i=0; i<SCH_MAX_TASK; i++) {
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	3301      	adds	r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	2b27      	cmp	r3, #39	; 0x27
 800088c:	ddf3      	ble.n	8000876 <SCH_Init+0x2e>
    }
    curID = 0;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <SCH_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
    dispatch = 0;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <SCH_Init+0x78>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
    my_list.head = NULL;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <SCH_Init+0x6c>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
    my_list.tail = NULL;
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <SCH_Init+0x6c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
    my_list.size = 0;
 80008a6:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <SCH_Init+0x6c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2000010c 	.word	0x2000010c
 80008b8:	20000120 	.word	0x20000120
 80008bc:	2000011c 	.word	0x2000011c
 80008c0:	20000118 	.word	0x20000118

080008c4 <SCH_Add_Task>:
 * point for the tasks in the list, based on its DELAY value, as the O(1) structure doing task in a
 * fixed pattern, the next task delay must be adjusted corresponding to the previous task, not by the
 * initial run time, the use LIST_Add_Task to add the tasks to our list.
 */

unsigned char SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08e      	sub	sp, #56	; 0x38
 80008c8:	af04      	add	r7, sp, #16
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
    uint32_t id_count = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
	node *cur = my_list.head;
 80008d4:	4b3c      	ldr	r3, [pc, #240]	; (80009c8 <SCH_Add_Task+0x104>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	623b      	str	r3, [r7, #32]
	node* prev = NULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]

	// Find a free slot in TaskID_arr
    while (TaskID_arr[curID] != -1 && id_count < SCH_MAX_TASK)
 80008de:	e010      	b.n	8000902 <SCH_Add_Task+0x3e>
    {
        curID = (curID+1)%SCH_MAX_TASK;
 80008e0:	4b3a      	ldr	r3, [pc, #232]	; (80009cc <SCH_Add_Task+0x108>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	1c59      	adds	r1, r3, #1
 80008e6:	4b3a      	ldr	r3, [pc, #232]	; (80009d0 <SCH_Add_Task+0x10c>)
 80008e8:	fba3 2301 	umull	r2, r3, r3, r1
 80008ec:	095a      	lsrs	r2, r3, #5
 80008ee:	4613      	mov	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4413      	add	r3, r2
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	1aca      	subs	r2, r1, r3
 80008f8:	4b34      	ldr	r3, [pc, #208]	; (80009cc <SCH_Add_Task+0x108>)
 80008fa:	601a      	str	r2, [r3, #0]
        id_count++;
 80008fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fe:	3301      	adds	r3, #1
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
    while (TaskID_arr[curID] != -1 && id_count < SCH_MAX_TASK)
 8000902:	4b32      	ldr	r3, [pc, #200]	; (80009cc <SCH_Add_Task+0x108>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a33      	ldr	r2, [pc, #204]	; (80009d4 <SCH_Add_Task+0x110>)
 8000908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800090c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000910:	d002      	beq.n	8000918 <SCH_Add_Task+0x54>
 8000912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000914:	2b27      	cmp	r3, #39	; 0x27
 8000916:	d9e3      	bls.n	80008e0 <SCH_Add_Task+0x1c>
    }

    if (id_count == SCH_MAX_TASK) {
 8000918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091a:	2b28      	cmp	r3, #40	; 0x28
 800091c:	d101      	bne.n	8000922 <SCH_Add_Task+0x5e>
        return SCH_MAX_TASK; // Task list is full
 800091e:	2328      	movs	r3, #40	; 0x28
 8000920:	e04d      	b.n	80009be <SCH_Add_Task+0xfa>
    }

    if (my_list.size == 0) {
 8000922:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <SCH_Add_Task+0x104>)
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d10d      	bne.n	8000946 <SCH_Add_Task+0x82>
    	LIST_Add_Task(&my_list, pFunction, DELAY/CYCLE, PERIOD, curID, prev, cur);
 800092a:	4b28      	ldr	r3, [pc, #160]	; (80009cc <SCH_Add_Task+0x108>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	6a3a      	ldr	r2, [r7, #32]
 8000930:	9202      	str	r2, [sp, #8]
 8000932:	69fa      	ldr	r2, [r7, #28]
 8000934:	9201      	str	r2, [sp, #4]
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	68f9      	ldr	r1, [r7, #12]
 800093e:	4822      	ldr	r0, [pc, #136]	; (80009c8 <SCH_Add_Task+0x104>)
 8000940:	f7ff fd20 	bl	8000384 <LIST_Add_Task>
//    }

    TaskID_arr[curID] = curID; // Update TaskID array to show that the current TaskID is in used
    return curID;
    }
}
 8000944:	e03b      	b.n	80009be <SCH_Add_Task+0xfa>
    	uint32_t sum = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
    	while (DELAY >= sum + cur->data.DELAY && cur != NULL) {
 800094a:	e009      	b.n	8000960 <SCH_Add_Task+0x9c>
    		sum += cur->data.DELAY;
 800094c:	6a3b      	ldr	r3, [r7, #32]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	4413      	add	r3, r2
 8000954:	61bb      	str	r3, [r7, #24]
    		prev = cur;
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	61fb      	str	r3, [r7, #28]
    		cur = cur->next;
 800095a:	6a3b      	ldr	r3, [r7, #32]
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	623b      	str	r3, [r7, #32]
    	while (DELAY >= sum + cur->data.DELAY && cur != NULL) {
 8000960:	6a3b      	ldr	r3, [r7, #32]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	4413      	add	r3, r2
 8000968:	68ba      	ldr	r2, [r7, #8]
 800096a:	429a      	cmp	r2, r3
 800096c:	d302      	bcc.n	8000974 <SCH_Add_Task+0xb0>
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d1eb      	bne.n	800094c <SCH_Add_Task+0x88>
    	uint32_t DELAY_NEW = DELAY - sum;
 8000974:	68ba      	ldr	r2, [r7, #8]
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
    	if (cur != NULL) {
 800097c:	6a3b      	ldr	r3, [r7, #32]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d005      	beq.n	800098e <SCH_Add_Task+0xca>
    		cur->data.DELAY -= DELAY_NEW;
 8000982:	6a3b      	ldr	r3, [r7, #32]
 8000984:	685a      	ldr	r2, [r3, #4]
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	1ad2      	subs	r2, r2, r3
 800098a:	6a3b      	ldr	r3, [r7, #32]
 800098c:	605a      	str	r2, [r3, #4]
    	LIST_Add_Task(&my_list, pFunction, DELAY_NEW/CYCLE, PERIOD, curID, prev, cur);
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <SCH_Add_Task+0x108>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	6a3a      	ldr	r2, [r7, #32]
 8000994:	9202      	str	r2, [sp, #8]
 8000996:	69fa      	ldr	r2, [r7, #28]
 8000998:	9201      	str	r2, [sp, #4]
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	697a      	ldr	r2, [r7, #20]
 80009a0:	68f9      	ldr	r1, [r7, #12]
 80009a2:	4809      	ldr	r0, [pc, #36]	; (80009c8 <SCH_Add_Task+0x104>)
 80009a4:	f7ff fcee 	bl	8000384 <LIST_Add_Task>
    TaskID_arr[curID] = curID; // Update TaskID array to show that the current TaskID is in used
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <SCH_Add_Task+0x108>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <SCH_Add_Task+0x108>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4611      	mov	r1, r2
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <SCH_Add_Task+0x110>)
 80009b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return curID;
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <SCH_Add_Task+0x108>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	b2db      	uxtb	r3, r3
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000010c 	.word	0x2000010c
 80009cc:	2000011c 	.word	0x2000011c
 80009d0:	cccccccd 	.word	0xcccccccd
 80009d4:	20000120 	.word	0x20000120

080009d8 <SCH_Delete_Task>:
/* The SCH_Delete_Task function, first checks if TaskID is valid (within range) and not marked as -1 in TaskID array
 * Then, it searches for the node with TaskID in the list, keeping track of the previous node to enable deletion. When
 * find the TaskID need to be deleted, call the LIST_Delete_Task to delete that TaskID and mark that ID slot as -1 (empty)
 */

unsigned char SCH_Delete_Task(uint32_t TaskID) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
    if (TaskID_arr[TaskID] == -1 || TaskID >= SCH_MAX_TASK) {
 80009e0:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <SCH_Delete_Task+0x70>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ec:	d002      	beq.n	80009f4 <SCH_Delete_Task+0x1c>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b27      	cmp	r3, #39	; 0x27
 80009f2:	d901      	bls.n	80009f8 <SCH_Delete_Task+0x20>
        return SCH_MAX_TASK;
 80009f4:	2328      	movs	r3, #40	; 0x28
 80009f6:	e022      	b.n	8000a3e <SCH_Delete_Task+0x66>
    }

    // Locate and delete the specified task in list
    // This 2 lines is to start at the list head
    node* cur = my_list.head;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <SCH_Delete_Task+0x74>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	60fb      	str	r3, [r7, #12]
    node* prev = NULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]

    // Use the loop function to take a look all the TaskID in the list
    while(cur != NULL && cur->data.TaskID != TaskID){
 8000a02:	e004      	b.n	8000a0e <SCH_Delete_Task+0x36>
    	prev = cur;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	60bb      	str	r3, [r7, #8]
    	cur = cur->next;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	60fb      	str	r3, [r7, #12]
    while(cur != NULL && cur->data.TaskID != TaskID){
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d004      	beq.n	8000a1e <SCH_Delete_Task+0x46>
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d1f2      	bne.n	8000a04 <SCH_Delete_Task+0x2c>
    }

    if(cur == NULL){
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d101      	bne.n	8000a28 <SCH_Delete_Task+0x50>
    	return SCH_MAX_TASK; // Task with TaskID not found
 8000a24:	2328      	movs	r3, #40	; 0x28
 8000a26:	e00a      	b.n	8000a3e <SCH_Delete_Task+0x66>
    }


    // Delete the task and indicate an empty slot
    LIST_Delete_Head_Task(&my_list);
 8000a28:	4808      	ldr	r0, [pc, #32]	; (8000a4c <SCH_Delete_Task+0x74>)
 8000a2a:	f7ff fd10 	bl	800044e <LIST_Delete_Head_Task>
//    LIST_Delete_Task(&my_list, cur->data.TaskID);
    TaskID_arr[TaskID] = -1;
 8000a2e:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <SCH_Delete_Task+0x70>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f04f 31ff 	mov.w	r1, #4294967295
 8000a36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return TaskID;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	b2db      	uxtb	r3, r3
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000120 	.word	0x20000120
 8000a4c:	2000010c 	.word	0x2000010c

08000a50 <SCH_Update>:
 * In case the task located at the head of the list having the DELAY time exceed zero, we will decrease that
 * DELAY time so the head task will be executed when the DELAY reach 0.
 * In case the DELAY equal to zero already, set the dispatch flag to 1 indicating that task need to be executed
 */

void SCH_Update() {
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
    node* tmp = my_list.head;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <SCH_Update+0x40>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	607b      	str	r3, [r7, #4]
    if (tmp != NULL && dispatch == 0) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d010      	beq.n	8000a84 <SCH_Update+0x34>
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <SCH_Update+0x44>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d10c      	bne.n	8000a84 <SCH_Update+0x34>
        if (tmp->data.DELAY > 0) {
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d005      	beq.n	8000a7e <SCH_Update+0x2e>
            tmp->data.DELAY--;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	1e5a      	subs	r2, r3, #1
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	605a      	str	r2, [r3, #4]
        } else {
        	dispatch = 1;
        }
    }
}
 8000a7c:	e002      	b.n	8000a84 <SCH_Update+0x34>
        	dispatch = 1;
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <SCH_Update+0x44>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	701a      	strb	r2, [r3, #0]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	2000010c 	.word	0x2000010c
 8000a94:	20000118 	.word	0x20000118

08000a98 <SCH_Dispatch_Tasks>:
 * set initially at 0, call the SCH_Delete_Task to remove that task from our list. But if the PERIOD is not 0, add that
 * same task to the list but with the DELAY same as the PERIOD of that task. Finally, set the dispatch flag to 0
 * to indicate that the scheduler is ready for the next execution/dispatch.
 */

void SCH_Dispatch_Tasks() {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
	if (my_list.head == NULL) return;
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <SCH_Dispatch_Tasks+0x7c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d031      	beq.n	8000b0a <SCH_Dispatch_Tasks+0x72>

    node* tmp = my_list.head;
 8000aa6:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <SCH_Dispatch_Tasks+0x7c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	617b      	str	r3, [r7, #20]

    if (tmp->data.DELAY == 0 && tmp != NULL) {
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d12b      	bne.n	8000b0c <SCH_Dispatch_Tasks+0x74>
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d028      	beq.n	8000b0c <SCH_Dispatch_Tasks+0x74>
        (*tmp->data.pTask)();
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4798      	blx	r3
        if (tmp->data.PERIOD == 0) {
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d105      	bne.n	8000ad4 <SCH_Dispatch_Tasks+0x3c>
            SCH_Delete_Task(tmp->data.TaskID);
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff83 	bl	80009d8 <SCH_Delete_Task>
            return;
 8000ad2:	e01b      	b.n	8000b0c <SCH_Dispatch_Tasks+0x74>
        } else {
        	// This else is to delete the task and add again the task to the list
            void (*pTask) (void) = tmp->data.pTask;
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	613b      	str	r3, [r7, #16]
            uint32_t DELAY = tmp->data.DELAY;
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	60fb      	str	r3, [r7, #12]
            uint32_t PERIOD = tmp->data.PERIOD;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	60bb      	str	r3, [r7, #8]
            uint32_t TaskID = tmp->data.TaskID;
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	607b      	str	r3, [r7, #4]
            uint8_t RunMe = tmp->data.RunMe;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	7c1b      	ldrb	r3, [r3, #16]
 8000af0:	70fb      	strb	r3, [r7, #3]

            SCH_Delete_Task(TaskID);
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff ff70 	bl	80009d8 <SCH_Delete_Task>
            SCH_Add_Task(pTask, PERIOD, PERIOD);
 8000af8:	68ba      	ldr	r2, [r7, #8]
 8000afa:	68b9      	ldr	r1, [r7, #8]
 8000afc:	6938      	ldr	r0, [r7, #16]
 8000afe:	f7ff fee1 	bl	80008c4 <SCH_Add_Task>
        }
        dispatch = 0;
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <SCH_Dispatch_Tasks+0x80>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	e000      	b.n	8000b0c <SCH_Dispatch_Tasks+0x74>
	if (my_list.head == NULL) return;
 8000b0a:	bf00      	nop
    }
}
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2000010c 	.word	0x2000010c
 8000b18:	20000118 	.word	0x20000118

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_MspInit+0x5c>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <HAL_MspInit+0x5c>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6193      	str	r3, [r2, #24]
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_MspInit+0x5c>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HAL_MspInit+0x5c>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <HAL_MspInit+0x5c>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	61d3      	str	r3, [r2, #28]
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_MspInit+0x5c>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_MspInit+0x60>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_MspInit+0x60>)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40010000 	.word	0x40010000

08000b80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b90:	d113      	bne.n	8000bba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <HAL_TIM_Base_MspInit+0x44>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <HAL_TIM_Base_MspInit+0x44>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	61d3      	str	r3, [r2, #28]
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <HAL_TIM_Base_MspInit+0x44>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	201c      	movs	r0, #28
 8000bb0:	f000 f9d7 	bl	8000f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bb4:	201c      	movs	r0, #28
 8000bb6:	f000 f9f0 	bl	8000f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr

08000bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr

08000c0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0e:	f000 f8b5 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <TIM2_IRQHandler+0x10>)
 8000c1e:	f001 f811 	bl	8001c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200000c4 	.word	0x200000c4

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f001 fb32 	bl	80022c4 <__errno>
 8000c60:	4603      	mov	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20002800 	.word	0x20002800
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	200000b8 	.word	0x200000b8
 8000c94:	200001d8 	.word	0x200001d8

08000c98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca4:	f7ff fff8 	bl	8000c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca8:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000caa:	490c      	ldr	r1, [pc, #48]	; (8000cdc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cac:	4a0c      	ldr	r2, [pc, #48]	; (8000ce0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cc0:	4c09      	ldr	r4, [pc, #36]	; (8000ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cce:	f001 faff 	bl	80022d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cd2:	f7ff fc89 	bl	80005e8 <main>
  bx lr
 8000cd6:	4770      	bx	lr
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ce0:	08002514 	.word	0x08002514
  ldr r2, =_sbss
 8000ce4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ce8:	200001d4 	.word	0x200001d4

08000cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC1_2_IRQHandler>
	...

08000cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <HAL_Init+0x28>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <HAL_Init+0x28>)
 8000cfa:	f043 0310 	orr.w	r3, r3, #16
 8000cfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d00:	2003      	movs	r0, #3
 8000d02:	f000 f923 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d06:	200f      	movs	r0, #15
 8000d08:	f000 f808 	bl	8000d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d0c:	f7ff ff06 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40022000 	.word	0x40022000

08000d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_InitTick+0x54>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_InitTick+0x58>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f93b 	bl	8000fb6 <HAL_SYSTICK_Config>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00e      	b.n	8000d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d80a      	bhi.n	8000d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d50:	2200      	movs	r2, #0
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	f000 f903 	bl	8000f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d5c:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <HAL_InitTick+0x5c>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e000      	b.n	8000d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000004 	.word	0x20000004
 8000d74:	2000000c 	.word	0x2000000c
 8000d78:	20000008 	.word	0x20000008

08000d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <HAL_IncTick+0x1c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <HAL_IncTick+0x20>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a03      	ldr	r2, [pc, #12]	; (8000d9c <HAL_IncTick+0x20>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	2000000c 	.word	0x2000000c
 8000d9c:	200001c0 	.word	0x200001c0

08000da0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b02      	ldr	r3, [pc, #8]	; (8000db0 <HAL_GetTick+0x10>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	200001c0 	.word	0x200001c0

08000db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de6:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	60d3      	str	r3, [r2, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <__NVIC_GetPriorityGrouping+0x18>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	f003 0307 	and.w	r3, r3, #7
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	db0b      	blt.n	8000e42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	f003 021f 	and.w	r2, r3, #31
 8000e30:	4906      	ldr	r1, [pc, #24]	; (8000e4c <__NVIC_EnableIRQ+0x34>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	095b      	lsrs	r3, r3, #5
 8000e38:	2001      	movs	r0, #1
 8000e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100

08000e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db0a      	blt.n	8000e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	490c      	ldr	r1, [pc, #48]	; (8000e9c <__NVIC_SetPriority+0x4c>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	0112      	lsls	r2, r2, #4
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	440b      	add	r3, r1
 8000e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e78:	e00a      	b.n	8000e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4908      	ldr	r1, [pc, #32]	; (8000ea0 <__NVIC_SetPriority+0x50>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	3b04      	subs	r3, #4
 8000e88:	0112      	lsls	r2, r2, #4
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	761a      	strb	r2, [r3, #24]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f1c3 0307 	rsb	r3, r3, #7
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	bf28      	it	cs
 8000ec2:	2304      	movcs	r3, #4
 8000ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d902      	bls.n	8000ed4 <NVIC_EncodePriority+0x30>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3b03      	subs	r3, #3
 8000ed2:	e000      	b.n	8000ed6 <NVIC_EncodePriority+0x32>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	4313      	orrs	r3, r2
         );
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3724      	adds	r7, #36	; 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f18:	d301      	bcc.n	8000f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00f      	b.n	8000f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <SysTick_Config+0x40>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f26:	210f      	movs	r1, #15
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f7ff ff90 	bl	8000e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <SysTick_Config+0x40>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <SysTick_Config+0x40>)
 8000f38:	2207      	movs	r2, #7
 8000f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	e000e010 	.word	0xe000e010

08000f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff2d 	bl	8000db4 <__NVIC_SetPriorityGrouping>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f74:	f7ff ff42 	bl	8000dfc <__NVIC_GetPriorityGrouping>
 8000f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	6978      	ldr	r0, [r7, #20]
 8000f80:	f7ff ff90 	bl	8000ea4 <NVIC_EncodePriority>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff5f 	bl	8000e50 <__NVIC_SetPriority>
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff35 	bl	8000e18 <__NVIC_EnableIRQ>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ffa2 	bl	8000f08 <SysTick_Config>
 8000fc4:	4603      	mov	r3, r0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b08b      	sub	sp, #44	; 0x2c
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe2:	e148      	b.n	8001276 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	f040 8137 	bne.w	8001270 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	4aa3      	ldr	r2, [pc, #652]	; (8001294 <HAL_GPIO_Init+0x2c4>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d05e      	beq.n	80010ca <HAL_GPIO_Init+0xfa>
 800100c:	4aa1      	ldr	r2, [pc, #644]	; (8001294 <HAL_GPIO_Init+0x2c4>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d875      	bhi.n	80010fe <HAL_GPIO_Init+0x12e>
 8001012:	4aa1      	ldr	r2, [pc, #644]	; (8001298 <HAL_GPIO_Init+0x2c8>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d058      	beq.n	80010ca <HAL_GPIO_Init+0xfa>
 8001018:	4a9f      	ldr	r2, [pc, #636]	; (8001298 <HAL_GPIO_Init+0x2c8>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d86f      	bhi.n	80010fe <HAL_GPIO_Init+0x12e>
 800101e:	4a9f      	ldr	r2, [pc, #636]	; (800129c <HAL_GPIO_Init+0x2cc>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d052      	beq.n	80010ca <HAL_GPIO_Init+0xfa>
 8001024:	4a9d      	ldr	r2, [pc, #628]	; (800129c <HAL_GPIO_Init+0x2cc>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d869      	bhi.n	80010fe <HAL_GPIO_Init+0x12e>
 800102a:	4a9d      	ldr	r2, [pc, #628]	; (80012a0 <HAL_GPIO_Init+0x2d0>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d04c      	beq.n	80010ca <HAL_GPIO_Init+0xfa>
 8001030:	4a9b      	ldr	r2, [pc, #620]	; (80012a0 <HAL_GPIO_Init+0x2d0>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d863      	bhi.n	80010fe <HAL_GPIO_Init+0x12e>
 8001036:	4a9b      	ldr	r2, [pc, #620]	; (80012a4 <HAL_GPIO_Init+0x2d4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d046      	beq.n	80010ca <HAL_GPIO_Init+0xfa>
 800103c:	4a99      	ldr	r2, [pc, #612]	; (80012a4 <HAL_GPIO_Init+0x2d4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d85d      	bhi.n	80010fe <HAL_GPIO_Init+0x12e>
 8001042:	2b12      	cmp	r3, #18
 8001044:	d82a      	bhi.n	800109c <HAL_GPIO_Init+0xcc>
 8001046:	2b12      	cmp	r3, #18
 8001048:	d859      	bhi.n	80010fe <HAL_GPIO_Init+0x12e>
 800104a:	a201      	add	r2, pc, #4	; (adr r2, 8001050 <HAL_GPIO_Init+0x80>)
 800104c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001050:	080010cb 	.word	0x080010cb
 8001054:	080010a5 	.word	0x080010a5
 8001058:	080010b7 	.word	0x080010b7
 800105c:	080010f9 	.word	0x080010f9
 8001060:	080010ff 	.word	0x080010ff
 8001064:	080010ff 	.word	0x080010ff
 8001068:	080010ff 	.word	0x080010ff
 800106c:	080010ff 	.word	0x080010ff
 8001070:	080010ff 	.word	0x080010ff
 8001074:	080010ff 	.word	0x080010ff
 8001078:	080010ff 	.word	0x080010ff
 800107c:	080010ff 	.word	0x080010ff
 8001080:	080010ff 	.word	0x080010ff
 8001084:	080010ff 	.word	0x080010ff
 8001088:	080010ff 	.word	0x080010ff
 800108c:	080010ff 	.word	0x080010ff
 8001090:	080010ff 	.word	0x080010ff
 8001094:	080010ad 	.word	0x080010ad
 8001098:	080010c1 	.word	0x080010c1
 800109c:	4a82      	ldr	r2, [pc, #520]	; (80012a8 <HAL_GPIO_Init+0x2d8>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010a2:	e02c      	b.n	80010fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	623b      	str	r3, [r7, #32]
          break;
 80010aa:	e029      	b.n	8001100 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	3304      	adds	r3, #4
 80010b2:	623b      	str	r3, [r7, #32]
          break;
 80010b4:	e024      	b.n	8001100 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	3308      	adds	r3, #8
 80010bc:	623b      	str	r3, [r7, #32]
          break;
 80010be:	e01f      	b.n	8001100 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	330c      	adds	r3, #12
 80010c6:	623b      	str	r3, [r7, #32]
          break;
 80010c8:	e01a      	b.n	8001100 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d102      	bne.n	80010d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010d2:	2304      	movs	r3, #4
 80010d4:	623b      	str	r3, [r7, #32]
          break;
 80010d6:	e013      	b.n	8001100 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d105      	bne.n	80010ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010e0:	2308      	movs	r3, #8
 80010e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69fa      	ldr	r2, [r7, #28]
 80010e8:	611a      	str	r2, [r3, #16]
          break;
 80010ea:	e009      	b.n	8001100 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ec:	2308      	movs	r3, #8
 80010ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69fa      	ldr	r2, [r7, #28]
 80010f4:	615a      	str	r2, [r3, #20]
          break;
 80010f6:	e003      	b.n	8001100 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
          break;
 80010fc:	e000      	b.n	8001100 <HAL_GPIO_Init+0x130>
          break;
 80010fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	2bff      	cmp	r3, #255	; 0xff
 8001104:	d801      	bhi.n	800110a <HAL_GPIO_Init+0x13a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	e001      	b.n	800110e <HAL_GPIO_Init+0x13e>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3304      	adds	r3, #4
 800110e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	2bff      	cmp	r3, #255	; 0xff
 8001114:	d802      	bhi.n	800111c <HAL_GPIO_Init+0x14c>
 8001116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	e002      	b.n	8001122 <HAL_GPIO_Init+0x152>
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111e:	3b08      	subs	r3, #8
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	210f      	movs	r1, #15
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	401a      	ands	r2, r3
 8001134:	6a39      	ldr	r1, [r7, #32]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	431a      	orrs	r2, r3
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8090 	beq.w	8001270 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001150:	4b56      	ldr	r3, [pc, #344]	; (80012ac <HAL_GPIO_Init+0x2dc>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a55      	ldr	r2, [pc, #340]	; (80012ac <HAL_GPIO_Init+0x2dc>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b53      	ldr	r3, [pc, #332]	; (80012ac <HAL_GPIO_Init+0x2dc>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001168:	4a51      	ldr	r2, [pc, #324]	; (80012b0 <HAL_GPIO_Init+0x2e0>)
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001174:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a49      	ldr	r2, [pc, #292]	; (80012b4 <HAL_GPIO_Init+0x2e4>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d00d      	beq.n	80011b0 <HAL_GPIO_Init+0x1e0>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a48      	ldr	r2, [pc, #288]	; (80012b8 <HAL_GPIO_Init+0x2e8>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d007      	beq.n	80011ac <HAL_GPIO_Init+0x1dc>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a47      	ldr	r2, [pc, #284]	; (80012bc <HAL_GPIO_Init+0x2ec>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d101      	bne.n	80011a8 <HAL_GPIO_Init+0x1d8>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e004      	b.n	80011b2 <HAL_GPIO_Init+0x1e2>
 80011a8:	2303      	movs	r3, #3
 80011aa:	e002      	b.n	80011b2 <HAL_GPIO_Init+0x1e2>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e000      	b.n	80011b2 <HAL_GPIO_Init+0x1e2>
 80011b0:	2300      	movs	r3, #0
 80011b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b4:	f002 0203 	and.w	r2, r2, #3
 80011b8:	0092      	lsls	r2, r2, #2
 80011ba:	4093      	lsls	r3, r2
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011c2:	493b      	ldr	r1, [pc, #236]	; (80012b0 <HAL_GPIO_Init+0x2e0>)
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	3302      	adds	r3, #2
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d006      	beq.n	80011ea <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011dc:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <HAL_GPIO_Init+0x2f0>)
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	4937      	ldr	r1, [pc, #220]	; (80012c0 <HAL_GPIO_Init+0x2f0>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	608b      	str	r3, [r1, #8]
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011ea:	4b35      	ldr	r3, [pc, #212]	; (80012c0 <HAL_GPIO_Init+0x2f0>)
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	4933      	ldr	r1, [pc, #204]	; (80012c0 <HAL_GPIO_Init+0x2f0>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d006      	beq.n	8001212 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001204:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <HAL_GPIO_Init+0x2f0>)
 8001206:	68da      	ldr	r2, [r3, #12]
 8001208:	492d      	ldr	r1, [pc, #180]	; (80012c0 <HAL_GPIO_Init+0x2f0>)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	60cb      	str	r3, [r1, #12]
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001212:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <HAL_GPIO_Init+0x2f0>)
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	43db      	mvns	r3, r3
 800121a:	4929      	ldr	r1, [pc, #164]	; (80012c0 <HAL_GPIO_Init+0x2f0>)
 800121c:	4013      	ands	r3, r2
 800121e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d006      	beq.n	800123a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800122c:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <HAL_GPIO_Init+0x2f0>)
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4923      	ldr	r1, [pc, #140]	; (80012c0 <HAL_GPIO_Init+0x2f0>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	604b      	str	r3, [r1, #4]
 8001238:	e006      	b.n	8001248 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <HAL_GPIO_Init+0x2f0>)
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	43db      	mvns	r3, r3
 8001242:	491f      	ldr	r1, [pc, #124]	; (80012c0 <HAL_GPIO_Init+0x2f0>)
 8001244:	4013      	ands	r3, r2
 8001246:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d006      	beq.n	8001262 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <HAL_GPIO_Init+0x2f0>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4919      	ldr	r1, [pc, #100]	; (80012c0 <HAL_GPIO_Init+0x2f0>)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	600b      	str	r3, [r1, #0]
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_GPIO_Init+0x2f0>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	43db      	mvns	r3, r3
 800126a:	4915      	ldr	r1, [pc, #84]	; (80012c0 <HAL_GPIO_Init+0x2f0>)
 800126c:	4013      	ands	r3, r2
 800126e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	3301      	adds	r3, #1
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	fa22 f303 	lsr.w	r3, r2, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	f47f aeaf 	bne.w	8000fe4 <HAL_GPIO_Init+0x14>
  }
}
 8001286:	bf00      	nop
 8001288:	bf00      	nop
 800128a:	372c      	adds	r7, #44	; 0x2c
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	10320000 	.word	0x10320000
 8001298:	10310000 	.word	0x10310000
 800129c:	10220000 	.word	0x10220000
 80012a0:	10210000 	.word	0x10210000
 80012a4:	10120000 	.word	0x10120000
 80012a8:	10110000 	.word	0x10110000
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010000 	.word	0x40010000
 80012b4:	40010800 	.word	0x40010800
 80012b8:	40010c00 	.word	0x40010c00
 80012bc:	40011000 	.word	0x40011000
 80012c0:	40010400 	.word	0x40010400

080012c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	e001      	b.n	80012e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	460b      	mov	r3, r1
 80012fc:	807b      	strh	r3, [r7, #2]
 80012fe:	4613      	mov	r3, r2
 8001300:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001302:	787b      	ldrb	r3, [r7, #1]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001308:	887a      	ldrh	r2, [r7, #2]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800130e:	e003      	b.n	8001318 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001310:	887b      	ldrh	r3, [r7, #2]
 8001312:	041a      	lsls	r2, r3, #16
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	611a      	str	r2, [r3, #16]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001322:	b480      	push	{r7}
 8001324:	b085      	sub	sp, #20
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	460b      	mov	r3, r1
 800132c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001334:	887a      	ldrh	r2, [r7, #2]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4013      	ands	r3, r2
 800133a:	041a      	lsls	r2, r3, #16
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	43d9      	mvns	r1, r3
 8001340:	887b      	ldrh	r3, [r7, #2]
 8001342:	400b      	ands	r3, r1
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	611a      	str	r2, [r3, #16]
}
 800134a:	bf00      	nop
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e26c      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 8087 	beq.w	8001482 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001374:	4b92      	ldr	r3, [pc, #584]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 030c 	and.w	r3, r3, #12
 800137c:	2b04      	cmp	r3, #4
 800137e:	d00c      	beq.n	800139a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001380:	4b8f      	ldr	r3, [pc, #572]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 030c 	and.w	r3, r3, #12
 8001388:	2b08      	cmp	r3, #8
 800138a:	d112      	bne.n	80013b2 <HAL_RCC_OscConfig+0x5e>
 800138c:	4b8c      	ldr	r3, [pc, #560]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001398:	d10b      	bne.n	80013b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139a:	4b89      	ldr	r3, [pc, #548]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d06c      	beq.n	8001480 <HAL_RCC_OscConfig+0x12c>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d168      	bne.n	8001480 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e246      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ba:	d106      	bne.n	80013ca <HAL_RCC_OscConfig+0x76>
 80013bc:	4b80      	ldr	r3, [pc, #512]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a7f      	ldr	r2, [pc, #508]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	e02e      	b.n	8001428 <HAL_RCC_OscConfig+0xd4>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10c      	bne.n	80013ec <HAL_RCC_OscConfig+0x98>
 80013d2:	4b7b      	ldr	r3, [pc, #492]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a7a      	ldr	r2, [pc, #488]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	4b78      	ldr	r3, [pc, #480]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a77      	ldr	r2, [pc, #476]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e01d      	b.n	8001428 <HAL_RCC_OscConfig+0xd4>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0xbc>
 80013f6:	4b72      	ldr	r3, [pc, #456]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a71      	ldr	r2, [pc, #452]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	4b6f      	ldr	r3, [pc, #444]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a6e      	ldr	r2, [pc, #440]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e00b      	b.n	8001428 <HAL_RCC_OscConfig+0xd4>
 8001410:	4b6b      	ldr	r3, [pc, #428]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a6a      	ldr	r2, [pc, #424]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b68      	ldr	r3, [pc, #416]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a67      	ldr	r2, [pc, #412]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001426:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d013      	beq.n	8001458 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff fcb6 	bl	8000da0 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001438:	f7ff fcb2 	bl	8000da0 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	; 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e1fa      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144a:	4b5d      	ldr	r3, [pc, #372]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0xe4>
 8001456:	e014      	b.n	8001482 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fca2 	bl	8000da0 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff fc9e 	bl	8000da0 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e1e6      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001472:	4b53      	ldr	r3, [pc, #332]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x10c>
 800147e:	e000      	b.n	8001482 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d063      	beq.n	8001556 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800148e:	4b4c      	ldr	r3, [pc, #304]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00b      	beq.n	80014b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800149a:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d11c      	bne.n	80014e0 <HAL_RCC_OscConfig+0x18c>
 80014a6:	4b46      	ldr	r3, [pc, #280]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d116      	bne.n	80014e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b2:	4b43      	ldr	r3, [pc, #268]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <HAL_RCC_OscConfig+0x176>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d001      	beq.n	80014ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e1ba      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ca:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4939      	ldr	r1, [pc, #228]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014de:	e03a      	b.n	8001556 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d020      	beq.n	800152a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e8:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <HAL_RCC_OscConfig+0x270>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ee:	f7ff fc57 	bl	8000da0 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f6:	f7ff fc53 	bl	8000da0 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e19b      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001508:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001514:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4927      	ldr	r1, [pc, #156]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001524:	4313      	orrs	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
 8001528:	e015      	b.n	8001556 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <HAL_RCC_OscConfig+0x270>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fc36 	bl	8000da0 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001538:	f7ff fc32 	bl	8000da0 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e17a      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154a:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d03a      	beq.n	80015d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d019      	beq.n	800159e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_RCC_OscConfig+0x274>)
 800156c:	2201      	movs	r2, #1
 800156e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001570:	f7ff fc16 	bl	8000da0 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001578:	f7ff fc12 	bl	8000da0 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e15a      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001596:	2001      	movs	r0, #1
 8001598:	f000 fa9a 	bl	8001ad0 <RCC_Delay>
 800159c:	e01c      	b.n	80015d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_RCC_OscConfig+0x274>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a4:	f7ff fbfc 	bl	8000da0 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015aa:	e00f      	b.n	80015cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ac:	f7ff fbf8 	bl	8000da0 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d908      	bls.n	80015cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e140      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	42420000 	.word	0x42420000
 80015c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015cc:	4b9e      	ldr	r3, [pc, #632]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1e9      	bne.n	80015ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 80a6 	beq.w	8001732 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ea:	4b97      	ldr	r3, [pc, #604]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10d      	bne.n	8001612 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b94      	ldr	r3, [pc, #592]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	4a93      	ldr	r2, [pc, #588]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	61d3      	str	r3, [r2, #28]
 8001602:	4b91      	ldr	r3, [pc, #580]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800160e:	2301      	movs	r3, #1
 8001610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001612:	4b8e      	ldr	r3, [pc, #568]	; (800184c <HAL_RCC_OscConfig+0x4f8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161a:	2b00      	cmp	r3, #0
 800161c:	d118      	bne.n	8001650 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800161e:	4b8b      	ldr	r3, [pc, #556]	; (800184c <HAL_RCC_OscConfig+0x4f8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a8a      	ldr	r2, [pc, #552]	; (800184c <HAL_RCC_OscConfig+0x4f8>)
 8001624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162a:	f7ff fbb9 	bl	8000da0 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001632:	f7ff fbb5 	bl	8000da0 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b64      	cmp	r3, #100	; 0x64
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e0fd      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001644:	4b81      	ldr	r3, [pc, #516]	; (800184c <HAL_RCC_OscConfig+0x4f8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d106      	bne.n	8001666 <HAL_RCC_OscConfig+0x312>
 8001658:	4b7b      	ldr	r3, [pc, #492]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4a7a      	ldr	r2, [pc, #488]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6213      	str	r3, [r2, #32]
 8001664:	e02d      	b.n	80016c2 <HAL_RCC_OscConfig+0x36e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0x334>
 800166e:	4b76      	ldr	r3, [pc, #472]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4a75      	ldr	r2, [pc, #468]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	6213      	str	r3, [r2, #32]
 800167a:	4b73      	ldr	r3, [pc, #460]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4a72      	ldr	r2, [pc, #456]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001680:	f023 0304 	bic.w	r3, r3, #4
 8001684:	6213      	str	r3, [r2, #32]
 8001686:	e01c      	b.n	80016c2 <HAL_RCC_OscConfig+0x36e>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b05      	cmp	r3, #5
 800168e:	d10c      	bne.n	80016aa <HAL_RCC_OscConfig+0x356>
 8001690:	4b6d      	ldr	r3, [pc, #436]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4a6c      	ldr	r2, [pc, #432]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	6213      	str	r3, [r2, #32]
 800169c:	4b6a      	ldr	r3, [pc, #424]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4a69      	ldr	r2, [pc, #420]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6213      	str	r3, [r2, #32]
 80016a8:	e00b      	b.n	80016c2 <HAL_RCC_OscConfig+0x36e>
 80016aa:	4b67      	ldr	r3, [pc, #412]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	4a66      	ldr	r2, [pc, #408]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6213      	str	r3, [r2, #32]
 80016b6:	4b64      	ldr	r3, [pc, #400]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4a63      	ldr	r2, [pc, #396]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80016bc:	f023 0304 	bic.w	r3, r3, #4
 80016c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d015      	beq.n	80016f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fb69 	bl	8000da0 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d2:	f7ff fb65 	bl	8000da0 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e0ab      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e8:	4b57      	ldr	r3, [pc, #348]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0ee      	beq.n	80016d2 <HAL_RCC_OscConfig+0x37e>
 80016f4:	e014      	b.n	8001720 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f6:	f7ff fb53 	bl	8000da0 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fc:	e00a      	b.n	8001714 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fe:	f7ff fb4f 	bl	8000da0 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f241 3288 	movw	r2, #5000	; 0x1388
 800170c:	4293      	cmp	r3, r2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e095      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001714:	4b4c      	ldr	r3, [pc, #304]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1ee      	bne.n	80016fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d105      	bne.n	8001732 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001726:	4b48      	ldr	r3, [pc, #288]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	4a47      	ldr	r2, [pc, #284]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 800172c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001730:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 8081 	beq.w	800183e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800173c:	4b42      	ldr	r3, [pc, #264]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b08      	cmp	r3, #8
 8001746:	d061      	beq.n	800180c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d146      	bne.n	80017de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001750:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <HAL_RCC_OscConfig+0x4fc>)
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff fb23 	bl	8000da0 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175e:	f7ff fb1f 	bl	8000da0 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e067      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001770:	4b35      	ldr	r3, [pc, #212]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1f0      	bne.n	800175e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001784:	d108      	bne.n	8001798 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001786:	4b30      	ldr	r3, [pc, #192]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	492d      	ldr	r1, [pc, #180]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001794:	4313      	orrs	r3, r2
 8001796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001798:	4b2b      	ldr	r3, [pc, #172]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a19      	ldr	r1, [r3, #32]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	430b      	orrs	r3, r1
 80017aa:	4927      	ldr	r1, [pc, #156]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b0:	4b27      	ldr	r3, [pc, #156]	; (8001850 <HAL_RCC_OscConfig+0x4fc>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7ff faf3 	bl	8000da0 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017be:	f7ff faef 	bl	8000da0 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e037      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x46a>
 80017dc:	e02f      	b.n	800183e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <HAL_RCC_OscConfig+0x4fc>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fadc 	bl	8000da0 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff fad8 	bl	8000da0 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e020      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x498>
 800180a:	e018      	b.n	800183e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e013      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	429a      	cmp	r2, r3
 800182a:	d106      	bne.n	800183a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	429a      	cmp	r2, r3
 8001838:	d001      	beq.n	800183e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40021000 	.word	0x40021000
 800184c:	40007000 	.word	0x40007000
 8001850:	42420060 	.word	0x42420060

08001854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0d0      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001868:	4b6a      	ldr	r3, [pc, #424]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d910      	bls.n	8001898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	4b67      	ldr	r3, [pc, #412]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 0207 	bic.w	r2, r3, #7
 800187e:	4965      	ldr	r1, [pc, #404]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b63      	ldr	r3, [pc, #396]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0b8      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d020      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b0:	4b59      	ldr	r3, [pc, #356]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4a58      	ldr	r2, [pc, #352]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c8:	4b53      	ldr	r3, [pc, #332]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4a52      	ldr	r2, [pc, #328]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d4:	4b50      	ldr	r3, [pc, #320]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	494d      	ldr	r1, [pc, #308]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d040      	beq.n	8001974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d115      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e07f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001912:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e073      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001922:	4b3d      	ldr	r3, [pc, #244]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e06b      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001932:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f023 0203 	bic.w	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4936      	ldr	r1, [pc, #216]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001944:	f7ff fa2c 	bl	8000da0 <HAL_GetTick>
 8001948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	e00a      	b.n	8001962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194c:	f7ff fa28 	bl	8000da0 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	; 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e053      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001962:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 020c 	and.w	r2, r3, #12
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	429a      	cmp	r2, r3
 8001972:	d1eb      	bne.n	800194c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001974:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d210      	bcs.n	80019a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 0207 	bic.w	r2, r3, #7
 800198a:	4922      	ldr	r1, [pc, #136]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e032      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4916      	ldr	r1, [pc, #88]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	490e      	ldr	r1, [pc, #56]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019e2:	f000 f821 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 80019e6:	4602      	mov	r2, r0
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	490a      	ldr	r1, [pc, #40]	; (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 80019f4:	5ccb      	ldrb	r3, [r1, r3]
 80019f6:	fa22 f303 	lsr.w	r3, r2, r3
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x1cc>)
 80019fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_RCC_ClockConfig+0x1d0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff f98a 	bl	8000d1c <HAL_InitTick>

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40022000 	.word	0x40022000
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	080024e8 	.word	0x080024e8
 8001a20:	20000004 	.word	0x20000004
 8001a24:	20000008 	.word	0x20000008

08001a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a42:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <HAL_RCC_GetSysClockFreq+0x94>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d002      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x30>
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d003      	beq.n	8001a5e <HAL_RCC_GetSysClockFreq+0x36>
 8001a56:	e027      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a5a:	613b      	str	r3, [r7, #16]
      break;
 8001a5c:	e027      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	0c9b      	lsrs	r3, r3, #18
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a68:	5cd3      	ldrb	r3, [r2, r3]
 8001a6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d010      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_RCC_GetSysClockFreq+0x94>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	0c5b      	lsrs	r3, r3, #17
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	4a11      	ldr	r2, [pc, #68]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a82:	5cd3      	ldrb	r3, [r2, r3]
 8001a84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a8a:	fb02 f203 	mul.w	r2, r2, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e004      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a0c      	ldr	r2, [pc, #48]	; (8001acc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a9c:	fb02 f303 	mul.w	r3, r2, r3
 8001aa0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	613b      	str	r3, [r7, #16]
      break;
 8001aa6:	e002      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aaa:	613b      	str	r3, [r7, #16]
      break;
 8001aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aae:	693b      	ldr	r3, [r7, #16]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	371c      	adds	r7, #28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	007a1200 	.word	0x007a1200
 8001ac4:	080024f8 	.word	0x080024f8
 8001ac8:	08002508 	.word	0x08002508
 8001acc:	003d0900 	.word	0x003d0900

08001ad0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <RCC_Delay+0x34>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <RCC_Delay+0x38>)
 8001ade:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae2:	0a5b      	lsrs	r3, r3, #9
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	fb02 f303 	mul.w	r3, r2, r3
 8001aea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001aec:	bf00      	nop
  }
  while (Delay --);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1e5a      	subs	r2, r3, #1
 8001af2:	60fa      	str	r2, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f9      	bne.n	8001aec <RCC_Delay+0x1c>
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	20000004 	.word	0x20000004
 8001b08:	10624dd3 	.word	0x10624dd3

08001b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e041      	b.n	8001ba2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff f824 	bl	8000b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3304      	adds	r3, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	f000 fa56 	bl	8001ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d001      	beq.n	8001bc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e035      	b.n	8001c30 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0201 	orr.w	r2, r2, #1
 8001bda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a16      	ldr	r2, [pc, #88]	; (8001c3c <HAL_TIM_Base_Start_IT+0x90>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d009      	beq.n	8001bfa <HAL_TIM_Base_Start_IT+0x4e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bee:	d004      	beq.n	8001bfa <HAL_TIM_Base_Start_IT+0x4e>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <HAL_TIM_Base_Start_IT+0x94>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d111      	bne.n	8001c1e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2b06      	cmp	r3, #6
 8001c0a:	d010      	beq.n	8001c2e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c1c:	e007      	b.n	8001c2e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40012c00 	.word	0x40012c00
 8001c40:	40000400 	.word	0x40000400

08001c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d020      	beq.n	8001ca8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d01b      	beq.n	8001ca8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0202 	mvn.w	r2, #2
 8001c78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f998 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001c94:	e005      	b.n	8001ca2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f98b 	bl	8001fb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f99a 	bl	8001fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d020      	beq.n	8001cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d01b      	beq.n	8001cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0204 	mvn.w	r2, #4
 8001cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f972 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001ce0:	e005      	b.n	8001cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f965 	bl	8001fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f974 	bl	8001fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d020      	beq.n	8001d40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01b      	beq.n	8001d40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f06f 0208 	mvn.w	r2, #8
 8001d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2204      	movs	r2, #4
 8001d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f94c 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001d2c:	e005      	b.n	8001d3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f93f 	bl	8001fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f94e 	bl	8001fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d020      	beq.n	8001d8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d01b      	beq.n	8001d8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0210 	mvn.w	r2, #16
 8001d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2208      	movs	r2, #8
 8001d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f926 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001d78:	e005      	b.n	8001d86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f919 	bl	8001fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f928 	bl	8001fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00c      	beq.n	8001db0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d007      	beq.n	8001db0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0201 	mvn.w	r2, #1
 8001da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7fe fd38 	bl	8000820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00c      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 fa6f 	bl	80022b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00c      	beq.n	8001df8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f8f8 	bl	8001fe8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00c      	beq.n	8001e1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d007      	beq.n	8001e1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0220 	mvn.w	r2, #32
 8001e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 fa42 	bl	80022a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_TIM_ConfigClockSource+0x1c>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e0b4      	b.n	8001faa <HAL_TIM_ConfigClockSource+0x186>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e78:	d03e      	beq.n	8001ef8 <HAL_TIM_ConfigClockSource+0xd4>
 8001e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e7e:	f200 8087 	bhi.w	8001f90 <HAL_TIM_ConfigClockSource+0x16c>
 8001e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e86:	f000 8086 	beq.w	8001f96 <HAL_TIM_ConfigClockSource+0x172>
 8001e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8e:	d87f      	bhi.n	8001f90 <HAL_TIM_ConfigClockSource+0x16c>
 8001e90:	2b70      	cmp	r3, #112	; 0x70
 8001e92:	d01a      	beq.n	8001eca <HAL_TIM_ConfigClockSource+0xa6>
 8001e94:	2b70      	cmp	r3, #112	; 0x70
 8001e96:	d87b      	bhi.n	8001f90 <HAL_TIM_ConfigClockSource+0x16c>
 8001e98:	2b60      	cmp	r3, #96	; 0x60
 8001e9a:	d050      	beq.n	8001f3e <HAL_TIM_ConfigClockSource+0x11a>
 8001e9c:	2b60      	cmp	r3, #96	; 0x60
 8001e9e:	d877      	bhi.n	8001f90 <HAL_TIM_ConfigClockSource+0x16c>
 8001ea0:	2b50      	cmp	r3, #80	; 0x50
 8001ea2:	d03c      	beq.n	8001f1e <HAL_TIM_ConfigClockSource+0xfa>
 8001ea4:	2b50      	cmp	r3, #80	; 0x50
 8001ea6:	d873      	bhi.n	8001f90 <HAL_TIM_ConfigClockSource+0x16c>
 8001ea8:	2b40      	cmp	r3, #64	; 0x40
 8001eaa:	d058      	beq.n	8001f5e <HAL_TIM_ConfigClockSource+0x13a>
 8001eac:	2b40      	cmp	r3, #64	; 0x40
 8001eae:	d86f      	bhi.n	8001f90 <HAL_TIM_ConfigClockSource+0x16c>
 8001eb0:	2b30      	cmp	r3, #48	; 0x30
 8001eb2:	d064      	beq.n	8001f7e <HAL_TIM_ConfigClockSource+0x15a>
 8001eb4:	2b30      	cmp	r3, #48	; 0x30
 8001eb6:	d86b      	bhi.n	8001f90 <HAL_TIM_ConfigClockSource+0x16c>
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d060      	beq.n	8001f7e <HAL_TIM_ConfigClockSource+0x15a>
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	d867      	bhi.n	8001f90 <HAL_TIM_ConfigClockSource+0x16c>
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d05c      	beq.n	8001f7e <HAL_TIM_ConfigClockSource+0x15a>
 8001ec4:	2b10      	cmp	r3, #16
 8001ec6:	d05a      	beq.n	8001f7e <HAL_TIM_ConfigClockSource+0x15a>
 8001ec8:	e062      	b.n	8001f90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6899      	ldr	r1, [r3, #8]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f000 f96a 	bl	80021b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001eec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	609a      	str	r2, [r3, #8]
      break;
 8001ef6:	e04f      	b.n	8001f98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6899      	ldr	r1, [r3, #8]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f000 f953 	bl	80021b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f1a:	609a      	str	r2, [r3, #8]
      break;
 8001f1c:	e03c      	b.n	8001f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6859      	ldr	r1, [r3, #4]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f000 f8ca 	bl	80020c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2150      	movs	r1, #80	; 0x50
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f921 	bl	800217e <TIM_ITRx_SetConfig>
      break;
 8001f3c:	e02c      	b.n	8001f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6859      	ldr	r1, [r3, #4]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	f000 f8e8 	bl	8002120 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2160      	movs	r1, #96	; 0x60
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f911 	bl	800217e <TIM_ITRx_SetConfig>
      break;
 8001f5c:	e01c      	b.n	8001f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	6859      	ldr	r1, [r3, #4]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	f000 f8aa 	bl	80020c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2140      	movs	r1, #64	; 0x40
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 f901 	bl	800217e <TIM_ITRx_SetConfig>
      break;
 8001f7c:	e00c      	b.n	8001f98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4619      	mov	r1, r3
 8001f88:	4610      	mov	r0, r2
 8001f8a:	f000 f8f8 	bl	800217e <TIM_ITRx_SetConfig>
      break;
 8001f8e:	e003      	b.n	8001f98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
      break;
 8001f94:	e000      	b.n	8001f98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
	...

08001ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a2b      	ldr	r2, [pc, #172]	; (80020bc <TIM_Base_SetConfig+0xc0>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d007      	beq.n	8002024 <TIM_Base_SetConfig+0x28>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201a:	d003      	beq.n	8002024 <TIM_Base_SetConfig+0x28>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a28      	ldr	r2, [pc, #160]	; (80020c0 <TIM_Base_SetConfig+0xc4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d108      	bne.n	8002036 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a20      	ldr	r2, [pc, #128]	; (80020bc <TIM_Base_SetConfig+0xc0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <TIM_Base_SetConfig+0x52>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002044:	d003      	beq.n	800204e <TIM_Base_SetConfig+0x52>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <TIM_Base_SetConfig+0xc4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d108      	bne.n	8002060 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <TIM_Base_SetConfig+0xc0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d103      	bne.n	8002094 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f023 0201 	bic.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	611a      	str	r2, [r3, #16]
  }
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	40012c00 	.word	0x40012c00
 80020c0:	40000400 	.word	0x40000400

080020c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	f023 0201 	bic.w	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f023 030a 	bic.w	r3, r3, #10
 8002100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	4313      	orrs	r3, r2
 8002108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	621a      	str	r2, [r3, #32]
}
 8002116:	bf00      	nop
 8002118:	371c      	adds	r7, #28
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002120:	b480      	push	{r7}
 8002122:	b087      	sub	sp, #28
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	f023 0210 	bic.w	r2, r3, #16
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800214a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	031b      	lsls	r3, r3, #12
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800215c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4313      	orrs	r3, r2
 8002166:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	621a      	str	r2, [r3, #32]
}
 8002174:	bf00      	nop
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002194:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	f043 0307 	orr.w	r3, r3, #7
 80021a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	609a      	str	r2, [r3, #8]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b087      	sub	sp, #28
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	021a      	lsls	r2, r3, #8
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	4313      	orrs	r3, r2
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4313      	orrs	r3, r2
 80021de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	609a      	str	r2, [r3, #8]
}
 80021e6:	bf00      	nop
 80021e8:	371c      	adds	r7, #28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002204:	2302      	movs	r3, #2
 8002206:	e041      	b.n	800228c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800222e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a14      	ldr	r2, [pc, #80]	; (8002298 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d009      	beq.n	8002260 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002254:	d004      	beq.n	8002260 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a10      	ldr	r2, [pc, #64]	; (800229c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d10c      	bne.n	800227a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002266:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	4313      	orrs	r3, r2
 8002270:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40012c00 	.word	0x40012c00
 800229c:	40000400 	.word	0x40000400

080022a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <__errno>:
 80022c4:	4b01      	ldr	r3, [pc, #4]	; (80022cc <__errno+0x8>)
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000010 	.word	0x20000010

080022d0 <__libc_init_array>:
 80022d0:	b570      	push	{r4, r5, r6, lr}
 80022d2:	2600      	movs	r6, #0
 80022d4:	4d0c      	ldr	r5, [pc, #48]	; (8002308 <__libc_init_array+0x38>)
 80022d6:	4c0d      	ldr	r4, [pc, #52]	; (800230c <__libc_init_array+0x3c>)
 80022d8:	1b64      	subs	r4, r4, r5
 80022da:	10a4      	asrs	r4, r4, #2
 80022dc:	42a6      	cmp	r6, r4
 80022de:	d109      	bne.n	80022f4 <__libc_init_array+0x24>
 80022e0:	f000 f8f6 	bl	80024d0 <_init>
 80022e4:	2600      	movs	r6, #0
 80022e6:	4d0a      	ldr	r5, [pc, #40]	; (8002310 <__libc_init_array+0x40>)
 80022e8:	4c0a      	ldr	r4, [pc, #40]	; (8002314 <__libc_init_array+0x44>)
 80022ea:	1b64      	subs	r4, r4, r5
 80022ec:	10a4      	asrs	r4, r4, #2
 80022ee:	42a6      	cmp	r6, r4
 80022f0:	d105      	bne.n	80022fe <__libc_init_array+0x2e>
 80022f2:	bd70      	pop	{r4, r5, r6, pc}
 80022f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022f8:	4798      	blx	r3
 80022fa:	3601      	adds	r6, #1
 80022fc:	e7ee      	b.n	80022dc <__libc_init_array+0xc>
 80022fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002302:	4798      	blx	r3
 8002304:	3601      	adds	r6, #1
 8002306:	e7f2      	b.n	80022ee <__libc_init_array+0x1e>
 8002308:	0800250c 	.word	0x0800250c
 800230c:	0800250c 	.word	0x0800250c
 8002310:	0800250c 	.word	0x0800250c
 8002314:	08002510 	.word	0x08002510

08002318 <malloc>:
 8002318:	4b02      	ldr	r3, [pc, #8]	; (8002324 <malloc+0xc>)
 800231a:	4601      	mov	r1, r0
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	f000 b85f 	b.w	80023e0 <_malloc_r>
 8002322:	bf00      	nop
 8002324:	20000010 	.word	0x20000010

08002328 <free>:
 8002328:	4b02      	ldr	r3, [pc, #8]	; (8002334 <free+0xc>)
 800232a:	4601      	mov	r1, r0
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	f000 b80b 	b.w	8002348 <_free_r>
 8002332:	bf00      	nop
 8002334:	20000010 	.word	0x20000010

08002338 <memset>:
 8002338:	4603      	mov	r3, r0
 800233a:	4402      	add	r2, r0
 800233c:	4293      	cmp	r3, r2
 800233e:	d100      	bne.n	8002342 <memset+0xa>
 8002340:	4770      	bx	lr
 8002342:	f803 1b01 	strb.w	r1, [r3], #1
 8002346:	e7f9      	b.n	800233c <memset+0x4>

08002348 <_free_r>:
 8002348:	b538      	push	{r3, r4, r5, lr}
 800234a:	4605      	mov	r5, r0
 800234c:	2900      	cmp	r1, #0
 800234e:	d043      	beq.n	80023d8 <_free_r+0x90>
 8002350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002354:	1f0c      	subs	r4, r1, #4
 8002356:	2b00      	cmp	r3, #0
 8002358:	bfb8      	it	lt
 800235a:	18e4      	addlt	r4, r4, r3
 800235c:	f000 f8aa 	bl	80024b4 <__malloc_lock>
 8002360:	4a1e      	ldr	r2, [pc, #120]	; (80023dc <_free_r+0x94>)
 8002362:	6813      	ldr	r3, [r2, #0]
 8002364:	4610      	mov	r0, r2
 8002366:	b933      	cbnz	r3, 8002376 <_free_r+0x2e>
 8002368:	6063      	str	r3, [r4, #4]
 800236a:	6014      	str	r4, [r2, #0]
 800236c:	4628      	mov	r0, r5
 800236e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002372:	f000 b8a5 	b.w	80024c0 <__malloc_unlock>
 8002376:	42a3      	cmp	r3, r4
 8002378:	d90a      	bls.n	8002390 <_free_r+0x48>
 800237a:	6821      	ldr	r1, [r4, #0]
 800237c:	1862      	adds	r2, r4, r1
 800237e:	4293      	cmp	r3, r2
 8002380:	bf01      	itttt	eq
 8002382:	681a      	ldreq	r2, [r3, #0]
 8002384:	685b      	ldreq	r3, [r3, #4]
 8002386:	1852      	addeq	r2, r2, r1
 8002388:	6022      	streq	r2, [r4, #0]
 800238a:	6063      	str	r3, [r4, #4]
 800238c:	6004      	str	r4, [r0, #0]
 800238e:	e7ed      	b.n	800236c <_free_r+0x24>
 8002390:	461a      	mov	r2, r3
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	b10b      	cbz	r3, 800239a <_free_r+0x52>
 8002396:	42a3      	cmp	r3, r4
 8002398:	d9fa      	bls.n	8002390 <_free_r+0x48>
 800239a:	6811      	ldr	r1, [r2, #0]
 800239c:	1850      	adds	r0, r2, r1
 800239e:	42a0      	cmp	r0, r4
 80023a0:	d10b      	bne.n	80023ba <_free_r+0x72>
 80023a2:	6820      	ldr	r0, [r4, #0]
 80023a4:	4401      	add	r1, r0
 80023a6:	1850      	adds	r0, r2, r1
 80023a8:	4283      	cmp	r3, r0
 80023aa:	6011      	str	r1, [r2, #0]
 80023ac:	d1de      	bne.n	800236c <_free_r+0x24>
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4401      	add	r1, r0
 80023b4:	6011      	str	r1, [r2, #0]
 80023b6:	6053      	str	r3, [r2, #4]
 80023b8:	e7d8      	b.n	800236c <_free_r+0x24>
 80023ba:	d902      	bls.n	80023c2 <_free_r+0x7a>
 80023bc:	230c      	movs	r3, #12
 80023be:	602b      	str	r3, [r5, #0]
 80023c0:	e7d4      	b.n	800236c <_free_r+0x24>
 80023c2:	6820      	ldr	r0, [r4, #0]
 80023c4:	1821      	adds	r1, r4, r0
 80023c6:	428b      	cmp	r3, r1
 80023c8:	bf01      	itttt	eq
 80023ca:	6819      	ldreq	r1, [r3, #0]
 80023cc:	685b      	ldreq	r3, [r3, #4]
 80023ce:	1809      	addeq	r1, r1, r0
 80023d0:	6021      	streq	r1, [r4, #0]
 80023d2:	6063      	str	r3, [r4, #4]
 80023d4:	6054      	str	r4, [r2, #4]
 80023d6:	e7c9      	b.n	800236c <_free_r+0x24>
 80023d8:	bd38      	pop	{r3, r4, r5, pc}
 80023da:	bf00      	nop
 80023dc:	200000bc 	.word	0x200000bc

080023e0 <_malloc_r>:
 80023e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e2:	1ccd      	adds	r5, r1, #3
 80023e4:	f025 0503 	bic.w	r5, r5, #3
 80023e8:	3508      	adds	r5, #8
 80023ea:	2d0c      	cmp	r5, #12
 80023ec:	bf38      	it	cc
 80023ee:	250c      	movcc	r5, #12
 80023f0:	2d00      	cmp	r5, #0
 80023f2:	4606      	mov	r6, r0
 80023f4:	db01      	blt.n	80023fa <_malloc_r+0x1a>
 80023f6:	42a9      	cmp	r1, r5
 80023f8:	d903      	bls.n	8002402 <_malloc_r+0x22>
 80023fa:	230c      	movs	r3, #12
 80023fc:	6033      	str	r3, [r6, #0]
 80023fe:	2000      	movs	r0, #0
 8002400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002402:	f000 f857 	bl	80024b4 <__malloc_lock>
 8002406:	4921      	ldr	r1, [pc, #132]	; (800248c <_malloc_r+0xac>)
 8002408:	680a      	ldr	r2, [r1, #0]
 800240a:	4614      	mov	r4, r2
 800240c:	b99c      	cbnz	r4, 8002436 <_malloc_r+0x56>
 800240e:	4f20      	ldr	r7, [pc, #128]	; (8002490 <_malloc_r+0xb0>)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	b923      	cbnz	r3, 800241e <_malloc_r+0x3e>
 8002414:	4621      	mov	r1, r4
 8002416:	4630      	mov	r0, r6
 8002418:	f000 f83c 	bl	8002494 <_sbrk_r>
 800241c:	6038      	str	r0, [r7, #0]
 800241e:	4629      	mov	r1, r5
 8002420:	4630      	mov	r0, r6
 8002422:	f000 f837 	bl	8002494 <_sbrk_r>
 8002426:	1c43      	adds	r3, r0, #1
 8002428:	d123      	bne.n	8002472 <_malloc_r+0x92>
 800242a:	230c      	movs	r3, #12
 800242c:	4630      	mov	r0, r6
 800242e:	6033      	str	r3, [r6, #0]
 8002430:	f000 f846 	bl	80024c0 <__malloc_unlock>
 8002434:	e7e3      	b.n	80023fe <_malloc_r+0x1e>
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	1b5b      	subs	r3, r3, r5
 800243a:	d417      	bmi.n	800246c <_malloc_r+0x8c>
 800243c:	2b0b      	cmp	r3, #11
 800243e:	d903      	bls.n	8002448 <_malloc_r+0x68>
 8002440:	6023      	str	r3, [r4, #0]
 8002442:	441c      	add	r4, r3
 8002444:	6025      	str	r5, [r4, #0]
 8002446:	e004      	b.n	8002452 <_malloc_r+0x72>
 8002448:	6863      	ldr	r3, [r4, #4]
 800244a:	42a2      	cmp	r2, r4
 800244c:	bf0c      	ite	eq
 800244e:	600b      	streq	r3, [r1, #0]
 8002450:	6053      	strne	r3, [r2, #4]
 8002452:	4630      	mov	r0, r6
 8002454:	f000 f834 	bl	80024c0 <__malloc_unlock>
 8002458:	f104 000b 	add.w	r0, r4, #11
 800245c:	1d23      	adds	r3, r4, #4
 800245e:	f020 0007 	bic.w	r0, r0, #7
 8002462:	1ac2      	subs	r2, r0, r3
 8002464:	d0cc      	beq.n	8002400 <_malloc_r+0x20>
 8002466:	1a1b      	subs	r3, r3, r0
 8002468:	50a3      	str	r3, [r4, r2]
 800246a:	e7c9      	b.n	8002400 <_malloc_r+0x20>
 800246c:	4622      	mov	r2, r4
 800246e:	6864      	ldr	r4, [r4, #4]
 8002470:	e7cc      	b.n	800240c <_malloc_r+0x2c>
 8002472:	1cc4      	adds	r4, r0, #3
 8002474:	f024 0403 	bic.w	r4, r4, #3
 8002478:	42a0      	cmp	r0, r4
 800247a:	d0e3      	beq.n	8002444 <_malloc_r+0x64>
 800247c:	1a21      	subs	r1, r4, r0
 800247e:	4630      	mov	r0, r6
 8002480:	f000 f808 	bl	8002494 <_sbrk_r>
 8002484:	3001      	adds	r0, #1
 8002486:	d1dd      	bne.n	8002444 <_malloc_r+0x64>
 8002488:	e7cf      	b.n	800242a <_malloc_r+0x4a>
 800248a:	bf00      	nop
 800248c:	200000bc 	.word	0x200000bc
 8002490:	200000c0 	.word	0x200000c0

08002494 <_sbrk_r>:
 8002494:	b538      	push	{r3, r4, r5, lr}
 8002496:	2300      	movs	r3, #0
 8002498:	4d05      	ldr	r5, [pc, #20]	; (80024b0 <_sbrk_r+0x1c>)
 800249a:	4604      	mov	r4, r0
 800249c:	4608      	mov	r0, r1
 800249e:	602b      	str	r3, [r5, #0]
 80024a0:	f7fe fbc4 	bl	8000c2c <_sbrk>
 80024a4:	1c43      	adds	r3, r0, #1
 80024a6:	d102      	bne.n	80024ae <_sbrk_r+0x1a>
 80024a8:	682b      	ldr	r3, [r5, #0]
 80024aa:	b103      	cbz	r3, 80024ae <_sbrk_r+0x1a>
 80024ac:	6023      	str	r3, [r4, #0]
 80024ae:	bd38      	pop	{r3, r4, r5, pc}
 80024b0:	200001c4 	.word	0x200001c4

080024b4 <__malloc_lock>:
 80024b4:	4801      	ldr	r0, [pc, #4]	; (80024bc <__malloc_lock+0x8>)
 80024b6:	f000 b809 	b.w	80024cc <__retarget_lock_acquire_recursive>
 80024ba:	bf00      	nop
 80024bc:	200001cc 	.word	0x200001cc

080024c0 <__malloc_unlock>:
 80024c0:	4801      	ldr	r0, [pc, #4]	; (80024c8 <__malloc_unlock+0x8>)
 80024c2:	f000 b804 	b.w	80024ce <__retarget_lock_release_recursive>
 80024c6:	bf00      	nop
 80024c8:	200001cc 	.word	0x200001cc

080024cc <__retarget_lock_acquire_recursive>:
 80024cc:	4770      	bx	lr

080024ce <__retarget_lock_release_recursive>:
 80024ce:	4770      	bx	lr

080024d0 <_init>:
 80024d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d2:	bf00      	nop
 80024d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024d6:	bc08      	pop	{r3}
 80024d8:	469e      	mov	lr, r3
 80024da:	4770      	bx	lr

080024dc <_fini>:
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024de:	bf00      	nop
 80024e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e2:	bc08      	pop	{r3}
 80024e4:	469e      	mov	lr, r3
 80024e6:	4770      	bx	lr
