
Ex2_10_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002870  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800297c  0800297c  0001297c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029a0  080029a0  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  080029a0  080029a0  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029a0  080029a0  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029a0  080029a0  000129a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029a4  080029a4  000129a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  080029a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000044  080029ec  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080029ec  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a004  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc9  00000000  00000000  0002a071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002bd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002c7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001721c  00000000  00000000  0002d100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d050  00000000  00000000  0004431c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082583  00000000  00000000  0005136c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d38ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000289c  00000000  00000000  000d3944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000044 	.word	0x20000044
 8000128:	00000000 	.word	0x00000000
 800012c:	08002964 	.word	0x08002964

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000048 	.word	0x20000048
 8000148:	08002964 	.word	0x08002964

0800014c <fsm_automatic_run>:
 */

#include "fsm_automatic.h"


void fsm_automatic_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status){
 8000150:	4bac      	ldr	r3, [pc, #688]	; (8000404 <fsm_automatic_run+0x2b8>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b04      	cmp	r3, #4
 8000158:	f200 81c9 	bhi.w	80004ee <fsm_automatic_run+0x3a2>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic_run+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000179 	.word	0x08000179
 8000168:	080001df 	.word	0x080001df
 800016c:	08000293 	.word	0x08000293
 8000170:	0800034f 	.word	0x0800034f
 8000174:	08000435 	.word	0x08000435
	case INIT:
		//-----INIT: the status is assigned AUTO_RED_GREEN-----//
		//assign timeRED, timeGREEN, timeAMBER
		//assign tmpRED, tmpAMBER, tmpGREEN
		status = AUTO_RED_GREEN;
 8000178:	4ba2      	ldr	r3, [pc, #648]	; (8000404 <fsm_automatic_run+0x2b8>)
 800017a:	2202      	movs	r2, #2
 800017c:	601a      	str	r2, [r3, #0]
		setTimer1(defaultTimeGreen*1000); //Multiply by 1000 as we input with unit second
 800017e:	4ba2      	ldr	r3, [pc, #648]	; (8000408 <fsm_automatic_run+0x2bc>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000186:	fb02 f303 	mul.w	r3, r2, r3
 800018a:	4618      	mov	r0, r3
 800018c:	f000 ff76 	bl	800107c <setTimer1>
		timeRED = defaultTimeRed;
 8000190:	4b9e      	ldr	r3, [pc, #632]	; (800040c <fsm_automatic_run+0x2c0>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a9e      	ldr	r2, [pc, #632]	; (8000410 <fsm_automatic_run+0x2c4>)
 8000196:	6013      	str	r3, [r2, #0]
		timeGREEN = defaultTimeGreen;
 8000198:	4b9b      	ldr	r3, [pc, #620]	; (8000408 <fsm_automatic_run+0x2bc>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a9d      	ldr	r2, [pc, #628]	; (8000414 <fsm_automatic_run+0x2c8>)
 800019e:	6013      	str	r3, [r2, #0]
		tmpRED = defaultTimeRed;
 80001a0:	4b9a      	ldr	r3, [pc, #616]	; (800040c <fsm_automatic_run+0x2c0>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a9c      	ldr	r2, [pc, #624]	; (8000418 <fsm_automatic_run+0x2cc>)
 80001a6:	6013      	str	r3, [r2, #0]
		tmpAMBER = defaultTimeAmber;
 80001a8:	4b9c      	ldr	r3, [pc, #624]	; (800041c <fsm_automatic_run+0x2d0>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a9c      	ldr	r2, [pc, #624]	; (8000420 <fsm_automatic_run+0x2d4>)
 80001ae:	6013      	str	r3, [r2, #0]
		tmpGREEN = defaultTimeGreen;
 80001b0:	4b95      	ldr	r3, [pc, #596]	; (8000408 <fsm_automatic_run+0x2bc>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a9b      	ldr	r2, [pc, #620]	; (8000424 <fsm_automatic_run+0x2d8>)
 80001b6:	6013      	str	r3, [r2, #0]
		setTimer2(1000);
 80001b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001bc:	f000 ff7a 	bl	80010b4 <setTimer2>
		updateClockBuffer(timeRED--, timeGREEN--);
 80001c0:	4b93      	ldr	r3, [pc, #588]	; (8000410 <fsm_automatic_run+0x2c4>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	1e5a      	subs	r2, r3, #1
 80001c6:	4992      	ldr	r1, [pc, #584]	; (8000410 <fsm_automatic_run+0x2c4>)
 80001c8:	600a      	str	r2, [r1, #0]
 80001ca:	4a92      	ldr	r2, [pc, #584]	; (8000414 <fsm_automatic_run+0x2c8>)
 80001cc:	6812      	ldr	r2, [r2, #0]
 80001ce:	1e51      	subs	r1, r2, #1
 80001d0:	4890      	ldr	r0, [pc, #576]	; (8000414 <fsm_automatic_run+0x2c8>)
 80001d2:	6001      	str	r1, [r0, #0]
 80001d4:	4611      	mov	r1, r2
 80001d6:	4618      	mov	r0, r3
 80001d8:	f000 fc60 	bl	8000a9c <updateClockBuffer>
		break;
 80001dc:	e190      	b.n	8000500 <fsm_automatic_run+0x3b4>
		//-----AUTO_RED_GREEN: Red LEDs in Road 1 is ON while Green LEDs in Road 2 is ON-----//
		//if timer1_flag = 1, switch the green light to amber light by status AUTO_RED_AMBER
		//and update the ClockBuffer for displaying the timer for Amber and Red
		//if timer2_flag = 1, update and start counting timer for Red and Green
		//if BUTTON1 is pressed, move to MAN_MODE2
		setTrafficRed1();
 80001de:	f000 fff5 	bl	80011cc <setTrafficRed1>
		setTrafficGreen2();
 80001e2:	f001 f86b 	bl	80012bc <setTrafficGreen2>
		if(timer1_flag == 1){
 80001e6:	4b90      	ldr	r3, [pc, #576]	; (8000428 <fsm_automatic_run+0x2dc>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d121      	bne.n	8000232 <fsm_automatic_run+0xe6>
			status = AUTO_RED_AMBER;
 80001ee:	4b85      	ldr	r3, [pc, #532]	; (8000404 <fsm_automatic_run+0x2b8>)
 80001f0:	2203      	movs	r2, #3
 80001f2:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeAmber*1000);
 80001f4:	4b89      	ldr	r3, [pc, #548]	; (800041c <fsm_automatic_run+0x2d0>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001fc:	fb02 f303 	mul.w	r3, r2, r3
 8000200:	4618      	mov	r0, r3
 8000202:	f000 ff3b 	bl	800107c <setTimer1>
			timeAMBER = defaultTimeAmber;
 8000206:	4b85      	ldr	r3, [pc, #532]	; (800041c <fsm_automatic_run+0x2d0>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a88      	ldr	r2, [pc, #544]	; (800042c <fsm_automatic_run+0x2e0>)
 800020c:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeRED--,timeAMBER--);
 800020e:	4b80      	ldr	r3, [pc, #512]	; (8000410 <fsm_automatic_run+0x2c4>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	1e5a      	subs	r2, r3, #1
 8000214:	497e      	ldr	r1, [pc, #504]	; (8000410 <fsm_automatic_run+0x2c4>)
 8000216:	600a      	str	r2, [r1, #0]
 8000218:	4a84      	ldr	r2, [pc, #528]	; (800042c <fsm_automatic_run+0x2e0>)
 800021a:	6812      	ldr	r2, [r2, #0]
 800021c:	1e51      	subs	r1, r2, #1
 800021e:	4883      	ldr	r0, [pc, #524]	; (800042c <fsm_automatic_run+0x2e0>)
 8000220:	6001      	str	r1, [r0, #0]
 8000222:	4611      	mov	r1, r2
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fc39 	bl	8000a9c <updateClockBuffer>
			setTimer2(1000);
 800022a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800022e:	f000 ff41 	bl	80010b4 <setTimer2>
		}
		if(timer2_flag == 1){
 8000232:	4b7f      	ldr	r3, [pc, #508]	; (8000430 <fsm_automatic_run+0x2e4>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b01      	cmp	r3, #1
 8000238:	d111      	bne.n	800025e <fsm_automatic_run+0x112>
			updateClockBuffer(timeRED--,timeGREEN--);
 800023a:	4b75      	ldr	r3, [pc, #468]	; (8000410 <fsm_automatic_run+0x2c4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	1e5a      	subs	r2, r3, #1
 8000240:	4973      	ldr	r1, [pc, #460]	; (8000410 <fsm_automatic_run+0x2c4>)
 8000242:	600a      	str	r2, [r1, #0]
 8000244:	4a73      	ldr	r2, [pc, #460]	; (8000414 <fsm_automatic_run+0x2c8>)
 8000246:	6812      	ldr	r2, [r2, #0]
 8000248:	1e51      	subs	r1, r2, #1
 800024a:	4872      	ldr	r0, [pc, #456]	; (8000414 <fsm_automatic_run+0x2c8>)
 800024c:	6001      	str	r1, [r0, #0]
 800024e:	4611      	mov	r1, r2
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fc23 	bl	8000a9c <updateClockBuffer>
			setTimer2(1000);
 8000256:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800025a:	f000 ff2b 	bl	80010b4 <setTimer2>
		}
		if(is_button_pressed_short(0) == 1){
 800025e:	2000      	movs	r0, #0
 8000260:	f000 fbc0 	bl	80009e4 <is_button_pressed_short>
 8000264:	4603      	mov	r3, r0
 8000266:	2b01      	cmp	r3, #1
 8000268:	d105      	bne.n	8000276 <fsm_automatic_run+0x12a>
			setTimer1(250);
 800026a:	20fa      	movs	r0, #250	; 0xfa
 800026c:	f000 ff06 	bl	800107c <setTimer1>
			status = MAN_MODE2;
 8000270:	4b64      	ldr	r3, [pc, #400]	; (8000404 <fsm_automatic_run+0x2b8>)
 8000272:	220b      	movs	r2, #11
 8000274:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed_1s(0) == 1){
 8000276:	2000      	movs	r0, #0
 8000278:	f000 fbd2 	bl	8000a20 <is_button_pressed_1s>
 800027c:	4603      	mov	r3, r0
 800027e:	2b01      	cmp	r3, #1
 8000280:	f040 8137 	bne.w	80004f2 <fsm_automatic_run+0x3a6>
			setTimer1(250);
 8000284:	20fa      	movs	r0, #250	; 0xfa
 8000286:	f000 fef9 	bl	800107c <setTimer1>
			status = MAN_MODE2;
 800028a:	4b5e      	ldr	r3, [pc, #376]	; (8000404 <fsm_automatic_run+0x2b8>)
 800028c:	220b      	movs	r2, #11
 800028e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000290:	e12f      	b.n	80004f2 <fsm_automatic_run+0x3a6>
		//-----AUTO_RED_AMBER: Red LEDs in Road 1 is ON while Amber LEDs in Road 2 is ON-----//
		//if timer1_flag = 1, switch the red light to green light; and amber light to red light by status AUTO_GREEN_RED
		//and update the ClockBuffer for displaying the timer for Green and Red
		//if timer2_flag = 1, update and start counting timer for Red and Amber
		//if BUTTON1 is pressed, move to MAN_MODE2
		setTrafficRed1();
 8000292:	f000 ff9b 	bl	80011cc <setTrafficRed1>
		setTrafficAmber2();
 8000296:	f000 fff9 	bl	800128c <setTrafficAmber2>
		if(timer1_flag == 1){
 800029a:	4b63      	ldr	r3, [pc, #396]	; (8000428 <fsm_automatic_run+0x2dc>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d125      	bne.n	80002ee <fsm_automatic_run+0x1a2>
			status = AUTO_GREEN_RED;
 80002a2:	4b58      	ldr	r3, [pc, #352]	; (8000404 <fsm_automatic_run+0x2b8>)
 80002a4:	2204      	movs	r2, #4
 80002a6:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeGreen*1000);
 80002a8:	4b57      	ldr	r3, [pc, #348]	; (8000408 <fsm_automatic_run+0x2bc>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002b0:	fb02 f303 	mul.w	r3, r2, r3
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fee1 	bl	800107c <setTimer1>
			timeGREEN = defaultTimeGreen;
 80002ba:	4b53      	ldr	r3, [pc, #332]	; (8000408 <fsm_automatic_run+0x2bc>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a55      	ldr	r2, [pc, #340]	; (8000414 <fsm_automatic_run+0x2c8>)
 80002c0:	6013      	str	r3, [r2, #0]
			timeRED = defaultTimeRed;
 80002c2:	4b52      	ldr	r3, [pc, #328]	; (800040c <fsm_automatic_run+0x2c0>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a52      	ldr	r2, [pc, #328]	; (8000410 <fsm_automatic_run+0x2c4>)
 80002c8:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeGREEN--,timeRED--);
 80002ca:	4b52      	ldr	r3, [pc, #328]	; (8000414 <fsm_automatic_run+0x2c8>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	1e5a      	subs	r2, r3, #1
 80002d0:	4950      	ldr	r1, [pc, #320]	; (8000414 <fsm_automatic_run+0x2c8>)
 80002d2:	600a      	str	r2, [r1, #0]
 80002d4:	4a4e      	ldr	r2, [pc, #312]	; (8000410 <fsm_automatic_run+0x2c4>)
 80002d6:	6812      	ldr	r2, [r2, #0]
 80002d8:	1e51      	subs	r1, r2, #1
 80002da:	484d      	ldr	r0, [pc, #308]	; (8000410 <fsm_automatic_run+0x2c4>)
 80002dc:	6001      	str	r1, [r0, #0]
 80002de:	4611      	mov	r1, r2
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fbdb 	bl	8000a9c <updateClockBuffer>
			setTimer2(1000);
 80002e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ea:	f000 fee3 	bl	80010b4 <setTimer2>
		}
		if(timer2_flag == 1){
 80002ee:	4b50      	ldr	r3, [pc, #320]	; (8000430 <fsm_automatic_run+0x2e4>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d111      	bne.n	800031a <fsm_automatic_run+0x1ce>
			updateClockBuffer(timeRED--,timeAMBER--);
 80002f6:	4b46      	ldr	r3, [pc, #280]	; (8000410 <fsm_automatic_run+0x2c4>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	1e5a      	subs	r2, r3, #1
 80002fc:	4944      	ldr	r1, [pc, #272]	; (8000410 <fsm_automatic_run+0x2c4>)
 80002fe:	600a      	str	r2, [r1, #0]
 8000300:	4a4a      	ldr	r2, [pc, #296]	; (800042c <fsm_automatic_run+0x2e0>)
 8000302:	6812      	ldr	r2, [r2, #0]
 8000304:	1e51      	subs	r1, r2, #1
 8000306:	4849      	ldr	r0, [pc, #292]	; (800042c <fsm_automatic_run+0x2e0>)
 8000308:	6001      	str	r1, [r0, #0]
 800030a:	4611      	mov	r1, r2
 800030c:	4618      	mov	r0, r3
 800030e:	f000 fbc5 	bl	8000a9c <updateClockBuffer>
			setTimer2(1000);
 8000312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000316:	f000 fecd 	bl	80010b4 <setTimer2>
		}
		if(is_button_pressed_short(0) == 1){
 800031a:	2000      	movs	r0, #0
 800031c:	f000 fb62 	bl	80009e4 <is_button_pressed_short>
 8000320:	4603      	mov	r3, r0
 8000322:	2b01      	cmp	r3, #1
 8000324:	d105      	bne.n	8000332 <fsm_automatic_run+0x1e6>
			setTimer1(250);
 8000326:	20fa      	movs	r0, #250	; 0xfa
 8000328:	f000 fea8 	bl	800107c <setTimer1>
			status = MAN_MODE2;
 800032c:	4b35      	ldr	r3, [pc, #212]	; (8000404 <fsm_automatic_run+0x2b8>)
 800032e:	220b      	movs	r2, #11
 8000330:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed_1s(0) == 1){
 8000332:	2000      	movs	r0, #0
 8000334:	f000 fb74 	bl	8000a20 <is_button_pressed_1s>
 8000338:	4603      	mov	r3, r0
 800033a:	2b01      	cmp	r3, #1
 800033c:	f040 80db 	bne.w	80004f6 <fsm_automatic_run+0x3aa>
			setTimer1(250);
 8000340:	20fa      	movs	r0, #250	; 0xfa
 8000342:	f000 fe9b 	bl	800107c <setTimer1>
			status = MAN_MODE2;
 8000346:	4b2f      	ldr	r3, [pc, #188]	; (8000404 <fsm_automatic_run+0x2b8>)
 8000348:	220b      	movs	r2, #11
 800034a:	601a      	str	r2, [r3, #0]
		}
		break;
 800034c:	e0d3      	b.n	80004f6 <fsm_automatic_run+0x3aa>
		//-----AUTO_GREEN_RED: Green LEDs in Road 1 is ON while Red LEDs in Road 2 is ON-----//
		//if timer1_flag = 1, switch the green light to red light by status AUTO_AMBER_RED
		//and update the ClockBuffer for displaying the timer for Amber and Red
		//if timer2_flag = 1, update and start counting timer for Green and Red
		//if BUTTON1 is pressed, move to MAN_MODE2
		setTrafficGreen1();
 800034e:	f000 ff6d 	bl	800122c <setTrafficGreen1>
		setTrafficRed2();
 8000352:	f000 ff83 	bl	800125c <setTrafficRed2>
		if(timer1_flag == 1){
 8000356:	4b34      	ldr	r3, [pc, #208]	; (8000428 <fsm_automatic_run+0x2dc>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d121      	bne.n	80003a2 <fsm_automatic_run+0x256>
			status = AUTO_AMBER_RED;
 800035e:	4b29      	ldr	r3, [pc, #164]	; (8000404 <fsm_automatic_run+0x2b8>)
 8000360:	2205      	movs	r2, #5
 8000362:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeAmber*1000);
 8000364:	4b2d      	ldr	r3, [pc, #180]	; (800041c <fsm_automatic_run+0x2d0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800036c:	fb02 f303 	mul.w	r3, r2, r3
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fe83 	bl	800107c <setTimer1>
			timeAMBER = defaultTimeAmber;
 8000376:	4b29      	ldr	r3, [pc, #164]	; (800041c <fsm_automatic_run+0x2d0>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a2c      	ldr	r2, [pc, #176]	; (800042c <fsm_automatic_run+0x2e0>)
 800037c:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeAMBER--,timeRED--);
 800037e:	4b2b      	ldr	r3, [pc, #172]	; (800042c <fsm_automatic_run+0x2e0>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	1e5a      	subs	r2, r3, #1
 8000384:	4929      	ldr	r1, [pc, #164]	; (800042c <fsm_automatic_run+0x2e0>)
 8000386:	600a      	str	r2, [r1, #0]
 8000388:	4a21      	ldr	r2, [pc, #132]	; (8000410 <fsm_automatic_run+0x2c4>)
 800038a:	6812      	ldr	r2, [r2, #0]
 800038c:	1e51      	subs	r1, r2, #1
 800038e:	4820      	ldr	r0, [pc, #128]	; (8000410 <fsm_automatic_run+0x2c4>)
 8000390:	6001      	str	r1, [r0, #0]
 8000392:	4611      	mov	r1, r2
 8000394:	4618      	mov	r0, r3
 8000396:	f000 fb81 	bl	8000a9c <updateClockBuffer>
			setTimer2(1000);
 800039a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800039e:	f000 fe89 	bl	80010b4 <setTimer2>
		}
		if(timer2_flag == 1){
 80003a2:	4b23      	ldr	r3, [pc, #140]	; (8000430 <fsm_automatic_run+0x2e4>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d111      	bne.n	80003ce <fsm_automatic_run+0x282>
			updateClockBuffer(timeGREEN--,timeRED--);
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <fsm_automatic_run+0x2c8>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	1e5a      	subs	r2, r3, #1
 80003b0:	4918      	ldr	r1, [pc, #96]	; (8000414 <fsm_automatic_run+0x2c8>)
 80003b2:	600a      	str	r2, [r1, #0]
 80003b4:	4a16      	ldr	r2, [pc, #88]	; (8000410 <fsm_automatic_run+0x2c4>)
 80003b6:	6812      	ldr	r2, [r2, #0]
 80003b8:	1e51      	subs	r1, r2, #1
 80003ba:	4815      	ldr	r0, [pc, #84]	; (8000410 <fsm_automatic_run+0x2c4>)
 80003bc:	6001      	str	r1, [r0, #0]
 80003be:	4611      	mov	r1, r2
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 fb6b 	bl	8000a9c <updateClockBuffer>
			setTimer2(1000);
 80003c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ca:	f000 fe73 	bl	80010b4 <setTimer2>
		}
		if(is_button_pressed_short(0) == 1){
 80003ce:	2000      	movs	r0, #0
 80003d0:	f000 fb08 	bl	80009e4 <is_button_pressed_short>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d106      	bne.n	80003e8 <fsm_automatic_run+0x29c>
			setTimer1(250);
 80003da:	20fa      	movs	r0, #250	; 0xfa
 80003dc:	f000 fe4e 	bl	800107c <setTimer1>
			status = MAN_MODE2;
 80003e0:	4b08      	ldr	r3, [pc, #32]	; (8000404 <fsm_automatic_run+0x2b8>)
 80003e2:	220b      	movs	r2, #11
 80003e4:	601a      	str	r2, [r3, #0]
		}
		else if(is_button_pressed_1s(0) == 1){
			setTimer1(250);
			status = MAN_MODE2;
		}
		break;
 80003e6:	e088      	b.n	80004fa <fsm_automatic_run+0x3ae>
		else if(is_button_pressed_1s(0) == 1){
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 fb19 	bl	8000a20 <is_button_pressed_1s>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	f040 8082 	bne.w	80004fa <fsm_automatic_run+0x3ae>
			setTimer1(250);
 80003f6:	20fa      	movs	r0, #250	; 0xfa
 80003f8:	f000 fe40 	bl	800107c <setTimer1>
			status = MAN_MODE2;
 80003fc:	4b01      	ldr	r3, [pc, #4]	; (8000404 <fsm_automatic_run+0x2b8>)
 80003fe:	220b      	movs	r2, #11
 8000400:	601a      	str	r2, [r3, #0]
		break;
 8000402:	e07a      	b.n	80004fa <fsm_automatic_run+0x3ae>
 8000404:	20000060 	.word	0x20000060
 8000408:	20000010 	.word	0x20000010
 800040c:	2000000c 	.word	0x2000000c
 8000410:	20000000 	.word	0x20000000
 8000414:	20000004 	.word	0x20000004
 8000418:	20000018 	.word	0x20000018
 800041c:	20000014 	.word	0x20000014
 8000420:	20000020 	.word	0x20000020
 8000424:	2000001c 	.word	0x2000001c
 8000428:	20000098 	.word	0x20000098
 800042c:	20000008 	.word	0x20000008
 8000430:	200000a0 	.word	0x200000a0
		//-----AUTO_AMBER_RED: Amber LEDs in Road 1 is ON while Red LEDs in Road 2 is ON-----//
		//if timer1_flag = 1, switch the amber light to red light; and red light to green light by status AUTO_RED_GREEN
		//and update the ClockBuffer for displaying the timer for Red and Green
		//if timer2_flag = 1, update and start counting timer for Amber and Red
		//if BUTTON1 is pressed, move to MAN_MODE2
		setTrafficAmber1();
 8000434:	f000 fee2 	bl	80011fc <setTrafficAmber1>
		setTrafficRed2();
 8000438:	f000 ff10 	bl	800125c <setTrafficRed2>
		if(timer1_flag == 1){
 800043c:	4b31      	ldr	r3, [pc, #196]	; (8000504 <fsm_automatic_run+0x3b8>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b01      	cmp	r3, #1
 8000442:	d125      	bne.n	8000490 <fsm_automatic_run+0x344>
			status = AUTO_RED_GREEN;
 8000444:	4b30      	ldr	r3, [pc, #192]	; (8000508 <fsm_automatic_run+0x3bc>)
 8000446:	2202      	movs	r2, #2
 8000448:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeGreen*1000);
 800044a:	4b30      	ldr	r3, [pc, #192]	; (800050c <fsm_automatic_run+0x3c0>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000452:	fb02 f303 	mul.w	r3, r2, r3
 8000456:	4618      	mov	r0, r3
 8000458:	f000 fe10 	bl	800107c <setTimer1>
			timeRED = defaultTimeRed;
 800045c:	4b2c      	ldr	r3, [pc, #176]	; (8000510 <fsm_automatic_run+0x3c4>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a2c      	ldr	r2, [pc, #176]	; (8000514 <fsm_automatic_run+0x3c8>)
 8000462:	6013      	str	r3, [r2, #0]
			timeGREEN = defaultTimeGreen;
 8000464:	4b29      	ldr	r3, [pc, #164]	; (800050c <fsm_automatic_run+0x3c0>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a2b      	ldr	r2, [pc, #172]	; (8000518 <fsm_automatic_run+0x3cc>)
 800046a:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeRED--,timeGREEN--);
 800046c:	4b29      	ldr	r3, [pc, #164]	; (8000514 <fsm_automatic_run+0x3c8>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	1e5a      	subs	r2, r3, #1
 8000472:	4928      	ldr	r1, [pc, #160]	; (8000514 <fsm_automatic_run+0x3c8>)
 8000474:	600a      	str	r2, [r1, #0]
 8000476:	4a28      	ldr	r2, [pc, #160]	; (8000518 <fsm_automatic_run+0x3cc>)
 8000478:	6812      	ldr	r2, [r2, #0]
 800047a:	1e51      	subs	r1, r2, #1
 800047c:	4826      	ldr	r0, [pc, #152]	; (8000518 <fsm_automatic_run+0x3cc>)
 800047e:	6001      	str	r1, [r0, #0]
 8000480:	4611      	mov	r1, r2
 8000482:	4618      	mov	r0, r3
 8000484:	f000 fb0a 	bl	8000a9c <updateClockBuffer>
			setTimer2(1000);
 8000488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800048c:	f000 fe12 	bl	80010b4 <setTimer2>
		}
		if(timer2_flag == 1){
 8000490:	4b22      	ldr	r3, [pc, #136]	; (800051c <fsm_automatic_run+0x3d0>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b01      	cmp	r3, #1
 8000496:	d111      	bne.n	80004bc <fsm_automatic_run+0x370>
			updateClockBuffer(timeAMBER--, timeRED--);
 8000498:	4b21      	ldr	r3, [pc, #132]	; (8000520 <fsm_automatic_run+0x3d4>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	1e5a      	subs	r2, r3, #1
 800049e:	4920      	ldr	r1, [pc, #128]	; (8000520 <fsm_automatic_run+0x3d4>)
 80004a0:	600a      	str	r2, [r1, #0]
 80004a2:	4a1c      	ldr	r2, [pc, #112]	; (8000514 <fsm_automatic_run+0x3c8>)
 80004a4:	6812      	ldr	r2, [r2, #0]
 80004a6:	1e51      	subs	r1, r2, #1
 80004a8:	481a      	ldr	r0, [pc, #104]	; (8000514 <fsm_automatic_run+0x3c8>)
 80004aa:	6001      	str	r1, [r0, #0]
 80004ac:	4611      	mov	r1, r2
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 faf4 	bl	8000a9c <updateClockBuffer>
			setTimer2(1000);
 80004b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004b8:	f000 fdfc 	bl	80010b4 <setTimer2>
		}
		if(is_button_pressed_short(0) == 1){
 80004bc:	2000      	movs	r0, #0
 80004be:	f000 fa91 	bl	80009e4 <is_button_pressed_short>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d105      	bne.n	80004d4 <fsm_automatic_run+0x388>
			setTimer1(250);
 80004c8:	20fa      	movs	r0, #250	; 0xfa
 80004ca:	f000 fdd7 	bl	800107c <setTimer1>
			status = MAN_MODE2;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <fsm_automatic_run+0x3bc>)
 80004d0:	220b      	movs	r2, #11
 80004d2:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed_1s(0) == 1){
 80004d4:	2000      	movs	r0, #0
 80004d6:	f000 faa3 	bl	8000a20 <is_button_pressed_1s>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d10e      	bne.n	80004fe <fsm_automatic_run+0x3b2>
			setTimer1(250);
 80004e0:	20fa      	movs	r0, #250	; 0xfa
 80004e2:	f000 fdcb 	bl	800107c <setTimer1>
			status = MAN_MODE2;
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <fsm_automatic_run+0x3bc>)
 80004e8:	220b      	movs	r2, #11
 80004ea:	601a      	str	r2, [r3, #0]
		}
		break;
 80004ec:	e007      	b.n	80004fe <fsm_automatic_run+0x3b2>
	default:
		break;
 80004ee:	bf00      	nop
 80004f0:	e006      	b.n	8000500 <fsm_automatic_run+0x3b4>
		break;
 80004f2:	bf00      	nop
 80004f4:	e004      	b.n	8000500 <fsm_automatic_run+0x3b4>
		break;
 80004f6:	bf00      	nop
 80004f8:	e002      	b.n	8000500 <fsm_automatic_run+0x3b4>
		break;
 80004fa:	bf00      	nop
 80004fc:	e000      	b.n	8000500 <fsm_automatic_run+0x3b4>
		break;
 80004fe:	bf00      	nop
	}
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000098 	.word	0x20000098
 8000508:	20000060 	.word	0x20000060
 800050c:	20000010 	.word	0x20000010
 8000510:	2000000c 	.word	0x2000000c
 8000514:	20000000 	.word	0x20000000
 8000518:	20000004 	.word	0x20000004
 800051c:	200000a0 	.word	0x200000a0
 8000520:	20000008 	.word	0x20000008

08000524 <fsm_manual_run>:
 *      Author: phuct
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	switch(status){
 8000528:	4b91      	ldr	r3, [pc, #580]	; (8000770 <fsm_manual_run+0x24c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	3b0a      	subs	r3, #10
 800052e:	2b03      	cmp	r3, #3
 8000530:	f200 818f 	bhi.w	8000852 <fsm_manual_run+0x32e>
 8000534:	a201      	add	r2, pc, #4	; (adr r2, 800053c <fsm_manual_run+0x18>)
 8000536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800053a:	bf00      	nop
 800053c:	0800054d 	.word	0x0800054d
 8000540:	080005a3 	.word	0x080005a3
 8000544:	08000689 	.word	0x08000689
 8000548:	08000799 	.word	0x08000799
	case MAN_MODE1:
		//Return to status INIT / AUTO_RED_GREEN
		setTimer1(defaultTimeGreen*1000);
 800054c:	4b89      	ldr	r3, [pc, #548]	; (8000774 <fsm_manual_run+0x250>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000554:	fb02 f303 	mul.w	r3, r2, r3
 8000558:	4618      	mov	r0, r3
 800055a:	f000 fd8f 	bl	800107c <setTimer1>
		setTimer2(1000);
 800055e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000562:	f000 fda7 	bl	80010b4 <setTimer2>
		timeRED = defaultTimeRed;
 8000566:	4b84      	ldr	r3, [pc, #528]	; (8000778 <fsm_manual_run+0x254>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a84      	ldr	r2, [pc, #528]	; (800077c <fsm_manual_run+0x258>)
 800056c:	6013      	str	r3, [r2, #0]
		timeGREEN = defaultTimeGreen;
 800056e:	4b81      	ldr	r3, [pc, #516]	; (8000774 <fsm_manual_run+0x250>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a83      	ldr	r2, [pc, #524]	; (8000780 <fsm_manual_run+0x25c>)
 8000574:	6013      	str	r3, [r2, #0]
		tmpAMBER = defaultTimeAmber;
 8000576:	4b83      	ldr	r3, [pc, #524]	; (8000784 <fsm_manual_run+0x260>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a83      	ldr	r2, [pc, #524]	; (8000788 <fsm_manual_run+0x264>)
 800057c:	6013      	str	r3, [r2, #0]
		updateClockBuffer(timeRED--, timeGREEN--);
 800057e:	4b7f      	ldr	r3, [pc, #508]	; (800077c <fsm_manual_run+0x258>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	1e5a      	subs	r2, r3, #1
 8000584:	497d      	ldr	r1, [pc, #500]	; (800077c <fsm_manual_run+0x258>)
 8000586:	600a      	str	r2, [r1, #0]
 8000588:	4a7d      	ldr	r2, [pc, #500]	; (8000780 <fsm_manual_run+0x25c>)
 800058a:	6812      	ldr	r2, [r2, #0]
 800058c:	1e51      	subs	r1, r2, #1
 800058e:	487c      	ldr	r0, [pc, #496]	; (8000780 <fsm_manual_run+0x25c>)
 8000590:	6001      	str	r1, [r0, #0]
 8000592:	4611      	mov	r1, r2
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fa81 	bl	8000a9c <updateClockBuffer>
		status = AUTO_RED_GREEN;
 800059a:	4b75      	ldr	r3, [pc, #468]	; (8000770 <fsm_manual_run+0x24c>)
 800059c:	2202      	movs	r2, #2
 800059e:	601a      	str	r2, [r3, #0]
		break;
 80005a0:	e158      	b.n	8000854 <fsm_manual_run+0x330>
	case MAN_MODE2:
		//Only Red LEDs in both Road 1 and 2 are ON, other LEDs are OFF
		setTrafficRed1();
 80005a2:	f000 fe13 	bl	80011cc <setTrafficRed1>
		setTrafficRed2();
 80005a6:	f000 fe59 	bl	800125c <setTrafficRed2>
		//If BUTTON1 is pressed, switch to status MAN_MODE3
		if(is_button_pressed_short(0) == 1){
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 fa1a 	bl	80009e4 <is_button_pressed_short>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d107      	bne.n	80005c6 <fsm_manual_run+0xa2>
			status = MAN_MODE3;
 80005b6:	4b6e      	ldr	r3, [pc, #440]	; (8000770 <fsm_manual_run+0x24c>)
 80005b8:	220c      	movs	r2, #12
 80005ba:	601a      	str	r2, [r3, #0]
			setTimer1(500); //2Hz mean 2 LEDs turn ON for 1 sec, each LED ON for 500ms
 80005bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c0:	f000 fd5c 	bl	800107c <setTimer1>
 80005c4:	e00c      	b.n	80005e0 <fsm_manual_run+0xbc>
		}
		else if(is_button_pressed_1s(0) == 1){
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 fa2a 	bl	8000a20 <is_button_pressed_1s>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d106      	bne.n	80005e0 <fsm_manual_run+0xbc>
			status = MAN_MODE3;
 80005d2:	4b67      	ldr	r3, [pc, #412]	; (8000770 <fsm_manual_run+0x24c>)
 80005d4:	220c      	movs	r2, #12
 80005d6:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 80005d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005dc:	f000 fd4e 	bl	800107c <setTimer1>
		}
		//Blinking Red LEDs
		if(timer1_flag == 1){
 80005e0:	4b6a      	ldr	r3, [pc, #424]	; (800078c <fsm_manual_run+0x268>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d10d      	bne.n	8000604 <fsm_manual_run+0xe0>
			setTimer1(500);
 80005e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ec:	f000 fd46 	bl	800107c <setTimer1>
			HAL_GPIO_TogglePin(RED1_GPIO_Port,RED1_Pin);
 80005f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f4:	4866      	ldr	r0, [pc, #408]	; (8000790 <fsm_manual_run+0x26c>)
 80005f6:	f001 f9b8 	bl	800196a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED2_GPIO_Port,RED2_Pin);
 80005fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005fe:	4864      	ldr	r0, [pc, #400]	; (8000790 <fsm_manual_run+0x26c>)
 8000600:	f001 f9b3 	bl	800196a <HAL_GPIO_TogglePin>
		}
		//If BUTTON2 is pressed, tempRED value increase 1 unit
		//If value overcome 99, it return to 1
		if(is_button_pressed_short(1) == 1){
 8000604:	2001      	movs	r0, #1
 8000606:	f000 f9ed 	bl	80009e4 <is_button_pressed_short>
 800060a:	4603      	mov	r3, r0
 800060c:	2b01      	cmp	r3, #1
 800060e:	d112      	bne.n	8000636 <fsm_manual_run+0x112>
			tmpRED++;
 8000610:	4b60      	ldr	r3, [pc, #384]	; (8000794 <fsm_manual_run+0x270>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3301      	adds	r3, #1
 8000616:	4a5f      	ldr	r2, [pc, #380]	; (8000794 <fsm_manual_run+0x270>)
 8000618:	6013      	str	r3, [r2, #0]
			if(tmpRED > 99) tmpRED = 1;
 800061a:	4b5e      	ldr	r3, [pc, #376]	; (8000794 <fsm_manual_run+0x270>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b63      	cmp	r3, #99	; 0x63
 8000620:	dd02      	ble.n	8000628 <fsm_manual_run+0x104>
 8000622:	4b5c      	ldr	r3, [pc, #368]	; (8000794 <fsm_manual_run+0x270>)
 8000624:	2201      	movs	r2, #1
 8000626:	601a      	str	r2, [r3, #0]
			updateClockBuffer(2, tmpRED);
 8000628:	4b5a      	ldr	r3, [pc, #360]	; (8000794 <fsm_manual_run+0x270>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4619      	mov	r1, r3
 800062e:	2002      	movs	r0, #2
 8000630:	f000 fa34 	bl	8000a9c <updateClockBuffer>
 8000634:	e017      	b.n	8000666 <fsm_manual_run+0x142>
		}
		else if(is_button_pressed_1s(1) == 1){
 8000636:	2001      	movs	r0, #1
 8000638:	f000 f9f2 	bl	8000a20 <is_button_pressed_1s>
 800063c:	4603      	mov	r3, r0
 800063e:	2b01      	cmp	r3, #1
 8000640:	d111      	bne.n	8000666 <fsm_manual_run+0x142>
			tmpRED++;
 8000642:	4b54      	ldr	r3, [pc, #336]	; (8000794 <fsm_manual_run+0x270>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	4a52      	ldr	r2, [pc, #328]	; (8000794 <fsm_manual_run+0x270>)
 800064a:	6013      	str	r3, [r2, #0]
			if(tmpRED > 99) tmpRED = 1;
 800064c:	4b51      	ldr	r3, [pc, #324]	; (8000794 <fsm_manual_run+0x270>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b63      	cmp	r3, #99	; 0x63
 8000652:	dd02      	ble.n	800065a <fsm_manual_run+0x136>
 8000654:	4b4f      	ldr	r3, [pc, #316]	; (8000794 <fsm_manual_run+0x270>)
 8000656:	2201      	movs	r2, #1
 8000658:	601a      	str	r2, [r3, #0]
			updateClockBuffer(2, tmpRED);
 800065a:	4b4e      	ldr	r3, [pc, #312]	; (8000794 <fsm_manual_run+0x270>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4619      	mov	r1, r3
 8000660:	2002      	movs	r0, #2
 8000662:	f000 fa1b 	bl	8000a9c <updateClockBuffer>
		}
		//If BUTTON3 is pressed, tmpRED is assigned for defaultTimeRed
		if(is_button_pressed_short(2) == 1){
 8000666:	2002      	movs	r0, #2
 8000668:	f000 f9bc 	bl	80009e4 <is_button_pressed_short>
 800066c:	4603      	mov	r3, r0
 800066e:	2b01      	cmp	r3, #1
 8000670:	d103      	bne.n	800067a <fsm_manual_run+0x156>
			defaultTimeRed = tmpRED;
 8000672:	4b48      	ldr	r3, [pc, #288]	; (8000794 <fsm_manual_run+0x270>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a40      	ldr	r2, [pc, #256]	; (8000778 <fsm_manual_run+0x254>)
 8000678:	6013      	str	r3, [r2, #0]
		}
		updateClockBuffer(2, defaultTimeRed); //Num 2 display the current Mode 2 to blink Red LEDs
 800067a:	4b3f      	ldr	r3, [pc, #252]	; (8000778 <fsm_manual_run+0x254>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4619      	mov	r1, r3
 8000680:	2002      	movs	r0, #2
 8000682:	f000 fa0b 	bl	8000a9c <updateClockBuffer>
		break;
 8000686:	e0e5      	b.n	8000854 <fsm_manual_run+0x330>
	case MAN_MODE3:
		//Only Amber LEDs in both Road 1 and 2 are ON, other LEDs are OFF
		setTrafficAmber1();
 8000688:	f000 fdb8 	bl	80011fc <setTrafficAmber1>
		setTrafficAmber2();
 800068c:	f000 fdfe 	bl	800128c <setTrafficAmber2>
		//If BUTTON1 is pressed, switch to status MAN_MODE4
		if(is_button_pressed_short(0) == 1){
 8000690:	2000      	movs	r0, #0
 8000692:	f000 f9a7 	bl	80009e4 <is_button_pressed_short>
 8000696:	4603      	mov	r3, r0
 8000698:	2b01      	cmp	r3, #1
 800069a:	d107      	bne.n	80006ac <fsm_manual_run+0x188>
			status = MAN_MODE4;
 800069c:	4b34      	ldr	r3, [pc, #208]	; (8000770 <fsm_manual_run+0x24c>)
 800069e:	220d      	movs	r2, #13
 80006a0:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 80006a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006a6:	f000 fce9 	bl	800107c <setTimer1>
 80006aa:	e00c      	b.n	80006c6 <fsm_manual_run+0x1a2>
		}
		else if(is_button_pressed_1s(1) == 1){
 80006ac:	2001      	movs	r0, #1
 80006ae:	f000 f9b7 	bl	8000a20 <is_button_pressed_1s>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d106      	bne.n	80006c6 <fsm_manual_run+0x1a2>
			status = MAN_MODE1;
 80006b8:	4b2d      	ldr	r3, [pc, #180]	; (8000770 <fsm_manual_run+0x24c>)
 80006ba:	220a      	movs	r2, #10
 80006bc:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 80006be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c2:	f000 fcdb 	bl	800107c <setTimer1>
		}
		//Blinking Amber LEDs
		if(timer1_flag == 1){
 80006c6:	4b31      	ldr	r3, [pc, #196]	; (800078c <fsm_manual_run+0x268>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d10d      	bne.n	80006ea <fsm_manual_run+0x1c6>
			HAL_GPIO_TogglePin(AMBER1_GPIO_Port,AMBER1_Pin);
 80006ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d2:	482f      	ldr	r0, [pc, #188]	; (8000790 <fsm_manual_run+0x26c>)
 80006d4:	f001 f949 	bl	800196a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(AMBER2_GPIO_Port,AMBER2_Pin);
 80006d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006dc:	482c      	ldr	r0, [pc, #176]	; (8000790 <fsm_manual_run+0x26c>)
 80006de:	f001 f944 	bl	800196a <HAL_GPIO_TogglePin>
			setTimer1(500);
 80006e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e6:	f000 fcc9 	bl	800107c <setTimer1>
		}
		//If BUTTON2 is pressed, tmpAMBER value increase 1 unit
		//If value overcome 99, it return to 1
		if(is_button_pressed_short(1) == 1){
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 f97a 	bl	80009e4 <is_button_pressed_short>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d112      	bne.n	800071c <fsm_manual_run+0x1f8>
			tmpAMBER++;
 80006f6:	4b24      	ldr	r3, [pc, #144]	; (8000788 <fsm_manual_run+0x264>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	4a22      	ldr	r2, [pc, #136]	; (8000788 <fsm_manual_run+0x264>)
 80006fe:	6013      	str	r3, [r2, #0]
			if(tmpAMBER > 99) tmpAMBER = 1;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <fsm_manual_run+0x264>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b63      	cmp	r3, #99	; 0x63
 8000706:	dd02      	ble.n	800070e <fsm_manual_run+0x1ea>
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <fsm_manual_run+0x264>)
 800070a:	2201      	movs	r2, #1
 800070c:	601a      	str	r2, [r3, #0]
			updateClockBuffer(3, tmpAMBER);
 800070e:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <fsm_manual_run+0x264>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4619      	mov	r1, r3
 8000714:	2003      	movs	r0, #3
 8000716:	f000 f9c1 	bl	8000a9c <updateClockBuffer>
 800071a:	e017      	b.n	800074c <fsm_manual_run+0x228>
		}
		else if(is_button_pressed_1s(1) == 1){
 800071c:	2001      	movs	r0, #1
 800071e:	f000 f97f 	bl	8000a20 <is_button_pressed_1s>
 8000722:	4603      	mov	r3, r0
 8000724:	2b01      	cmp	r3, #1
 8000726:	d111      	bne.n	800074c <fsm_manual_run+0x228>
			tmpAMBER++;
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <fsm_manual_run+0x264>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	4a16      	ldr	r2, [pc, #88]	; (8000788 <fsm_manual_run+0x264>)
 8000730:	6013      	str	r3, [r2, #0]
			if(tmpAMBER > 99) tmpAMBER = 1;
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <fsm_manual_run+0x264>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b63      	cmp	r3, #99	; 0x63
 8000738:	dd02      	ble.n	8000740 <fsm_manual_run+0x21c>
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <fsm_manual_run+0x264>)
 800073c:	2201      	movs	r2, #1
 800073e:	601a      	str	r2, [r3, #0]
			updateClockBuffer(3, tmpAMBER);
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <fsm_manual_run+0x264>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	2003      	movs	r0, #3
 8000748:	f000 f9a8 	bl	8000a9c <updateClockBuffer>
		}
		//If BUTTON3 is pressed, tempAMBER is assigned for defaultTimeAmber
		if(is_button_pressed_short(2) == 1){
 800074c:	2002      	movs	r0, #2
 800074e:	f000 f949 	bl	80009e4 <is_button_pressed_short>
 8000752:	4603      	mov	r3, r0
 8000754:	2b01      	cmp	r3, #1
 8000756:	d103      	bne.n	8000760 <fsm_manual_run+0x23c>
			defaultTimeAmber = tmpAMBER;
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <fsm_manual_run+0x264>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a09      	ldr	r2, [pc, #36]	; (8000784 <fsm_manual_run+0x260>)
 800075e:	6013      	str	r3, [r2, #0]
		}
		updateClockBuffer(3, defaultTimeAmber);	//Num 3 display the current Mode 3 to blink Amber LEDs
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <fsm_manual_run+0x260>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	2003      	movs	r0, #3
 8000768:	f000 f998 	bl	8000a9c <updateClockBuffer>
		break;
 800076c:	e072      	b.n	8000854 <fsm_manual_run+0x330>
 800076e:	bf00      	nop
 8000770:	20000060 	.word	0x20000060
 8000774:	20000010 	.word	0x20000010
 8000778:	2000000c 	.word	0x2000000c
 800077c:	20000000 	.word	0x20000000
 8000780:	20000004 	.word	0x20000004
 8000784:	20000014 	.word	0x20000014
 8000788:	20000020 	.word	0x20000020
 800078c:	20000098 	.word	0x20000098
 8000790:	40010c00 	.word	0x40010c00
 8000794:	20000018 	.word	0x20000018
	case MAN_MODE4:
		//If BUTTON1 is pressed, switch to status MAN_MODE1
		if(is_button_pressed_short(0) == 1){
 8000798:	2000      	movs	r0, #0
 800079a:	f000 f923 	bl	80009e4 <is_button_pressed_short>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d102      	bne.n	80007aa <fsm_manual_run+0x286>
			status = MAN_MODE1;
 80007a4:	4b2c      	ldr	r3, [pc, #176]	; (8000858 <fsm_manual_run+0x334>)
 80007a6:	220a      	movs	r2, #10
 80007a8:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed_1s(0) == 1){
 80007aa:	2000      	movs	r0, #0
 80007ac:	f000 f938 	bl	8000a20 <is_button_pressed_1s>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d102      	bne.n	80007bc <fsm_manual_run+0x298>
			status = MAN_MODE1;
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <fsm_manual_run+0x334>)
 80007b8:	220a      	movs	r2, #10
 80007ba:	601a      	str	r2, [r3, #0]
		}
		//Only Green LEDs in both Road 1 and 2 are ON, other LEDs are OFF
		setTrafficGreen1();
 80007bc:	f000 fd36 	bl	800122c <setTrafficGreen1>
		setTrafficGreen2();
 80007c0:	f000 fd7c 	bl	80012bc <setTrafficGreen2>
		//Blinking Green LEDs
		if(timer1_flag == 1){
 80007c4:	4b25      	ldr	r3, [pc, #148]	; (800085c <fsm_manual_run+0x338>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d10d      	bne.n	80007e8 <fsm_manual_run+0x2c4>
			HAL_GPIO_TogglePin(GREEN1_GPIO_Port,GREEN1_Pin);
 80007cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d0:	4823      	ldr	r0, [pc, #140]	; (8000860 <fsm_manual_run+0x33c>)
 80007d2:	f001 f8ca 	bl	800196a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN2_GPIO_Port,GREEN2_Pin);
 80007d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007da:	4821      	ldr	r0, [pc, #132]	; (8000860 <fsm_manual_run+0x33c>)
 80007dc:	f001 f8c5 	bl	800196a <HAL_GPIO_TogglePin>
			setTimer1(500);
 80007e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007e4:	f000 fc4a 	bl	800107c <setTimer1>
		}
		//If BUTTON2 is pressed, tmpGREEN value increase 1 unit
		//If value overcome 99, it return to 1
			if(is_button_pressed_short(1) == 1){
 80007e8:	2001      	movs	r0, #1
 80007ea:	f000 f8fb 	bl	80009e4 <is_button_pressed_short>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d10b      	bne.n	800080c <fsm_manual_run+0x2e8>
				tmpGREEN++;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <fsm_manual_run+0x340>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	4a1a      	ldr	r2, [pc, #104]	; (8000864 <fsm_manual_run+0x340>)
 80007fc:	6013      	str	r3, [r2, #0]
				if(tmpGREEN > 99) tmpGREEN = 1;
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <fsm_manual_run+0x340>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b63      	cmp	r3, #99	; 0x63
 8000804:	dd02      	ble.n	800080c <fsm_manual_run+0x2e8>
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <fsm_manual_run+0x340>)
 8000808:	2201      	movs	r2, #1
 800080a:	601a      	str	r2, [r3, #0]
			}
			if(is_button_pressed_1s(1) == 1){
 800080c:	2001      	movs	r0, #1
 800080e:	f000 f907 	bl	8000a20 <is_button_pressed_1s>
 8000812:	4603      	mov	r3, r0
 8000814:	2b01      	cmp	r3, #1
 8000816:	d10b      	bne.n	8000830 <fsm_manual_run+0x30c>
				tmpGREEN++;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <fsm_manual_run+0x340>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	4a11      	ldr	r2, [pc, #68]	; (8000864 <fsm_manual_run+0x340>)
 8000820:	6013      	str	r3, [r2, #0]
				if(tmpGREEN > 99) tmpGREEN = 1;
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <fsm_manual_run+0x340>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b63      	cmp	r3, #99	; 0x63
 8000828:	dd02      	ble.n	8000830 <fsm_manual_run+0x30c>
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <fsm_manual_run+0x340>)
 800082c:	2201      	movs	r2, #1
 800082e:	601a      	str	r2, [r3, #0]
			}
		//If BUTTON3 is pressed, tmpGREEN is assigned for defaultTimeGreen
			if(is_button_pressed_short(2) == 1){
 8000830:	2002      	movs	r0, #2
 8000832:	f000 f8d7 	bl	80009e4 <is_button_pressed_short>
 8000836:	4603      	mov	r3, r0
 8000838:	2b01      	cmp	r3, #1
 800083a:	d103      	bne.n	8000844 <fsm_manual_run+0x320>
				defaultTimeGreen = tmpGREEN ;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <fsm_manual_run+0x340>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a09      	ldr	r2, [pc, #36]	; (8000868 <fsm_manual_run+0x344>)
 8000842:	6013      	str	r3, [r2, #0]
			}
		updateClockBuffer(4, defaultTimeGreen);	//Num 4 display the current Mode 4 to blink Green LEDs
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <fsm_manual_run+0x344>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4619      	mov	r1, r3
 800084a:	2004      	movs	r0, #4
 800084c:	f000 f926 	bl	8000a9c <updateClockBuffer>
		break;
 8000850:	e000      	b.n	8000854 <fsm_manual_run+0x330>
	default:
		break;
 8000852:	bf00      	nop
	}
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000060 	.word	0x20000060
 800085c:	20000098 	.word	0x20000098
 8000860:	40010c00 	.word	0x40010c00
 8000864:	2000001c 	.word	0x2000001c
 8000868:	20000010 	.word	0x20000010

0800086c <button_reading>:
static uint8_t flagForButtonPressShort[NO_OF_BUTTONS];

// Counter for automatically detecting when a button is pressed more than 1 second
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];

void button_reading(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
    for (int i = 0; i < NO_OF_BUTTONS; i++) {
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	e09d      	b.n	80009b4 <button_reading+0x148>
        debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000878:	4a53      	ldr	r2, [pc, #332]	; (80009c8 <button_reading+0x15c>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4413      	add	r3, r2
 800087e:	7819      	ldrb	r1, [r3, #0]
 8000880:	4a52      	ldr	r2, [pc, #328]	; (80009cc <button_reading+0x160>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	460a      	mov	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]

        // Update to handle multiple buttons
        switch(i) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b02      	cmp	r3, #2
 800088e:	d021      	beq.n	80008d4 <button_reading+0x68>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b02      	cmp	r3, #2
 8000894:	dc2a      	bgt.n	80008ec <button_reading+0x80>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d003      	beq.n	80008a4 <button_reading+0x38>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d00c      	beq.n	80008bc <button_reading+0x50>
                break;
            case 2:
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
                break;
            default:
                break;
 80008a2:	e023      	b.n	80008ec <button_reading+0x80>
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80008a4:	2102      	movs	r1, #2
 80008a6:	484a      	ldr	r0, [pc, #296]	; (80009d0 <button_reading+0x164>)
 80008a8:	f001 f830 	bl	800190c <HAL_GPIO_ReadPin>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4619      	mov	r1, r3
 80008b0:	4a45      	ldr	r2, [pc, #276]	; (80009c8 <button_reading+0x15c>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	460a      	mov	r2, r1
 80008b8:	701a      	strb	r2, [r3, #0]
                break;
 80008ba:	e018      	b.n	80008ee <button_reading+0x82>
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80008bc:	2104      	movs	r1, #4
 80008be:	4844      	ldr	r0, [pc, #272]	; (80009d0 <button_reading+0x164>)
 80008c0:	f001 f824 	bl	800190c <HAL_GPIO_ReadPin>
 80008c4:	4603      	mov	r3, r0
 80008c6:	4619      	mov	r1, r3
 80008c8:	4a3f      	ldr	r2, [pc, #252]	; (80009c8 <button_reading+0x15c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	460a      	mov	r2, r1
 80008d0:	701a      	strb	r2, [r3, #0]
                break;
 80008d2:	e00c      	b.n	80008ee <button_reading+0x82>
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80008d4:	2108      	movs	r1, #8
 80008d6:	483e      	ldr	r0, [pc, #248]	; (80009d0 <button_reading+0x164>)
 80008d8:	f001 f818 	bl	800190c <HAL_GPIO_ReadPin>
 80008dc:	4603      	mov	r3, r0
 80008de:	4619      	mov	r1, r3
 80008e0:	4a39      	ldr	r2, [pc, #228]	; (80009c8 <button_reading+0x15c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	460a      	mov	r2, r1
 80008e8:	701a      	strb	r2, [r3, #0]
                break;
 80008ea:	e000      	b.n	80008ee <button_reading+0x82>
                break;
 80008ec:	bf00      	nop
        }

        if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 80008ee:	4a36      	ldr	r2, [pc, #216]	; (80009c8 <button_reading+0x15c>)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4413      	add	r3, r2
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	4935      	ldr	r1, [pc, #212]	; (80009cc <button_reading+0x160>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	440b      	add	r3, r1
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d155      	bne.n	80009ae <button_reading+0x142>
            buttonBuffer[i] = debounceButtonBuffer1[i]; // Debouncing logic
 8000902:	4a31      	ldr	r2, [pc, #196]	; (80009c8 <button_reading+0x15c>)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4413      	add	r3, r2
 8000908:	7819      	ldrb	r1, [r3, #0]
 800090a:	4a32      	ldr	r2, [pc, #200]	; (80009d4 <button_reading+0x168>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4413      	add	r3, r2
 8000910:	460a      	mov	r2, r1
 8000912:	701a      	strb	r2, [r3, #0]

            if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000914:	4a2f      	ldr	r2, [pc, #188]	; (80009d4 <button_reading+0x168>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d12b      	bne.n	8000978 <button_reading+0x10c>
                // Button is pressed; we start counting
                if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000920:	4a2d      	ldr	r2, [pc, #180]	; (80009d8 <button_reading+0x16c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000928:	2b63      	cmp	r3, #99	; 0x63
 800092a:	d81a      	bhi.n	8000962 <button_reading+0xf6>
                    counterForButtonPress1s[i]++;
 800092c:	4a2a      	ldr	r2, [pc, #168]	; (80009d8 <button_reading+0x16c>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000934:	3301      	adds	r3, #1
 8000936:	b299      	uxth	r1, r3
 8000938:	4a27      	ldr	r2, [pc, #156]	; (80009d8 <button_reading+0x16c>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    if (counterForButtonPress1s[i] == DURATION_FOR_AUTO_INCREASING) {
 8000940:	4a25      	ldr	r2, [pc, #148]	; (80009d8 <button_reading+0x16c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000948:	2b64      	cmp	r3, #100	; 0x64
 800094a:	d130      	bne.n	80009ae <button_reading+0x142>
                        // Flag is turned on when 1 second has passed since the button was pressed
                        flagForButtonPress1s[i] = 1;
 800094c:	4a23      	ldr	r2, [pc, #140]	; (80009dc <button_reading+0x170>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
                        flagForButtonPressShort[i] = 0; // Reset short press flag
 8000956:	4a22      	ldr	r2, [pc, #136]	; (80009e0 <button_reading+0x174>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4413      	add	r3, r2
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
 8000960:	e025      	b.n	80009ae <button_reading+0x142>
                    }
                } else {
                    // The button is pressed for less than 1 second
                    flagForButtonPressShort[i] = 1;
 8000962:	4a1f      	ldr	r2, [pc, #124]	; (80009e0 <button_reading+0x174>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4413      	add	r3, r2
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
                    flagForButtonPress1s[i] = 0; // Reset long press flag
 800096c:	4a1b      	ldr	r2, [pc, #108]	; (80009dc <button_reading+0x170>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
 8000976:	e01a      	b.n	80009ae <button_reading+0x142>
                }
            } else { // Button is released
                // Button has been released
                if (counterForButtonPress1s[i] > 0 && counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING/2) {
 8000978:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <button_reading+0x16c>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d00a      	beq.n	800099a <button_reading+0x12e>
 8000984:	4a14      	ldr	r2, [pc, #80]	; (80009d8 <button_reading+0x16c>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800098c:	2b31      	cmp	r3, #49	; 0x31
 800098e:	d804      	bhi.n	800099a <button_reading+0x12e>
                    // If it was pressed for a short time
                    flagForButtonPressShort[i] = 1;
 8000990:	4a13      	ldr	r2, [pc, #76]	; (80009e0 <button_reading+0x174>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
                }
                counterForButtonPress1s[i] = 0;  // Reset the counter
 800099a:	4a0f      	ldr	r2, [pc, #60]	; (80009d8 <button_reading+0x16c>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2100      	movs	r1, #0
 80009a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                flagForButtonPress1s[i] = 0;     // Reset the 1s press flag
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <button_reading+0x170>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NO_OF_BUTTONS; i++) {
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3301      	adds	r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	f77f af5e 	ble.w	8000878 <button_reading+0xc>
            }
        }
    }
}
 80009bc:	bf00      	nop
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000068 	.word	0x20000068
 80009cc:	2000006c 	.word	0x2000006c
 80009d0:	40010800 	.word	0x40010800
 80009d4:	20000064 	.word	0x20000064
 80009d8:	20000078 	.word	0x20000078
 80009dc:	20000070 	.word	0x20000070
 80009e0:	20000074 	.word	0x20000074

080009e4 <is_button_pressed_short>:

// Function to check if button is pressed shorter than 1s
unsigned char is_button_pressed_short(uint8_t index) {
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
    if (index >= NO_OF_BUTTONS) return 0;
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d901      	bls.n	80009f8 <is_button_pressed_short+0x14>
 80009f4:	2300      	movs	r3, #0
 80009f6:	e00b      	b.n	8000a10 <is_button_pressed_short+0x2c>
    if (flagForButtonPressShort[index] == 1) {
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <is_button_pressed_short+0x38>)
 80009fc:	5cd3      	ldrb	r3, [r2, r3]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d105      	bne.n	8000a0e <is_button_pressed_short+0x2a>
        flagForButtonPressShort[index] = 0; // Reset the flag
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <is_button_pressed_short+0x38>)
 8000a06:	2100      	movs	r1, #0
 8000a08:	54d1      	strb	r1, [r2, r3]
        return 1;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e000      	b.n	8000a10 <is_button_pressed_short+0x2c>
    }
    return 0;
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000074 	.word	0x20000074

08000a20 <is_button_pressed_1s>:

// Function to check if button is pressed longer than 1s
unsigned char is_button_pressed_1s(uint8_t index) {
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
    if (index >= NO_OF_BUTTONS) return 0;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d901      	bls.n	8000a34 <is_button_pressed_1s+0x14>
 8000a30:	2300      	movs	r3, #0
 8000a32:	e00b      	b.n	8000a4c <is_button_pressed_1s+0x2c>
    if (flagForButtonPress1s[index] == 1) {
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <is_button_pressed_1s+0x38>)
 8000a38:	5cd3      	ldrb	r3, [r2, r3]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d105      	bne.n	8000a4a <is_button_pressed_1s+0x2a>
        flagForButtonPress1s[index] = 0; // Reset the flag
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <is_button_pressed_1s+0x38>)
 8000a42:	2100      	movs	r1, #0
 8000a44:	54d1      	strb	r1, [r2, r3]
        return 1;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e000      	b.n	8000a4c <is_button_pressed_1s+0x2c>
    }
    return 0;
 8000a4a:	2300      	movs	r3, #0
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000070 	.word	0x20000070

08000a5c <display7SEG>:
//	| 0x66 = 01100110 = Num 4 | 0x6D = 01101101 = Num 5 | 0x7D = 01111101 = Num 6 |
//	| 0x07 = 00000111 = Num 7 | 0x7F = 01111111 = Num 8 | 0x6F = 01101111 = Num 9 |
int led_buffer[MAX_BUFF] = {0,0,0,0};

//------Display LED 7SEG--------//
void display7SEG(int number){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	uint16_t bit_var = led_matrix[number];
 8000a64:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <display7SEG+0x38>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a6c:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, bit_var, RESET);
 8000a6e:	89fb      	ldrh	r3, [r7, #14]
 8000a70:	2200      	movs	r2, #0
 8000a72:	4619      	mov	r1, r3
 8000a74:	4808      	ldr	r0, [pc, #32]	; (8000a98 <display7SEG+0x3c>)
 8000a76:	f000 ff60 	bl	800193a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ~bit_var, SET);	// "~" mean NOT operator, inverts the bit from 1 to 0 and vice versa
 8000a7a:	89fb      	ldrh	r3, [r7, #14]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	2201      	movs	r2, #1
 8000a82:	4619      	mov	r1, r3
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <display7SEG+0x3c>)
 8000a86:	f000 ff58 	bl	800193a <HAL_GPIO_WritePin>
}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000024 	.word	0x20000024
 8000a98:	40010c00 	.word	0x40010c00

08000a9c <updateClockBuffer>:

//------Update Clock Buffer--------//
//If counter1 < 10, e.g. value = 2, 7SEG1 display 0 and 7SEG2 display 2
//If counter1 > 10, e.g. value = 12, 7SEG1 display 1 and 7SEG2 display 2
void updateClockBuffer(int counter1, int counter2){
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
	    led_buffer[0] = counter1 / 10;	// The divider / is to take the digit at tens
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <updateClockBuffer+0x70>)
 8000aaa:	fb82 1203 	smull	r1, r2, r2, r3
 8000aae:	1092      	asrs	r2, r2, #2
 8000ab0:	17db      	asrs	r3, r3, #31
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	4a16      	ldr	r2, [pc, #88]	; (8000b10 <updateClockBuffer+0x74>)
 8000ab6:	6013      	str	r3, [r2, #0]
		led_buffer[1] = counter1 % 10;	// The divider % is to take the digit at units
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <updateClockBuffer+0x70>)
 8000abc:	fb83 2301 	smull	r2, r3, r3, r1
 8000ac0:	109a      	asrs	r2, r3, #2
 8000ac2:	17cb      	asrs	r3, r1, #31
 8000ac4:	1ad2      	subs	r2, r2, r3
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	4413      	add	r3, r2
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	1aca      	subs	r2, r1, r3
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <updateClockBuffer+0x74>)
 8000ad2:	605a      	str	r2, [r3, #4]
		led_buffer[2] = counter2 / 10;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <updateClockBuffer+0x70>)
 8000ad8:	fb82 1203 	smull	r1, r2, r2, r3
 8000adc:	1092      	asrs	r2, r2, #2
 8000ade:	17db      	asrs	r3, r3, #31
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <updateClockBuffer+0x74>)
 8000ae4:	6093      	str	r3, [r2, #8]
		led_buffer[3] = counter2 % 10;
 8000ae6:	6839      	ldr	r1, [r7, #0]
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <updateClockBuffer+0x70>)
 8000aea:	fb83 2301 	smull	r2, r3, r3, r1
 8000aee:	109a      	asrs	r2, r3, #2
 8000af0:	17cb      	asrs	r3, r1, #31
 8000af2:	1ad2      	subs	r2, r2, r3
 8000af4:	4613      	mov	r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	4413      	add	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	1aca      	subs	r2, r1, r3
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <updateClockBuffer+0x74>)
 8000b00:	60da      	str	r2, [r3, #12]
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	66666667 	.word	0x66666667
 8000b10:	20000080 	.word	0x20000080

08000b14 <update7SEG>:

//------Update Clock Buffer to LED 7SEG--------//
// show which led 7 segment is ON and the value it display
void update7SEG(int index){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d850      	bhi.n	8000bc4 <update7SEG+0xb0>
 8000b22:	a201      	add	r2, pc, #4	; (adr r2, 8000b28 <update7SEG+0x14>)
 8000b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b28:	08000b39 	.word	0x08000b39
 8000b2c:	08000b5b 	.word	0x08000b5b
 8000b30:	08000b7d 	.word	0x08000b7d
 8000b34:	08000ba1 	.word	0x08000ba1
	switch(index){
	case 0:
		// Display the first 7 SEG with led_buffer[0]
		HAL_GPIO_WritePin(GPIOA, EN0_Pin, RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2140      	movs	r1, #64	; 0x40
 8000b3c:	4824      	ldr	r0, [pc, #144]	; (8000bd0 <update7SEG+0xbc>)
 8000b3e:	f000 fefc 	bl	800193a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000b48:	4821      	ldr	r0, [pc, #132]	; (8000bd0 <update7SEG+0xbc>)
 8000b4a:	f000 fef6 	bl	800193a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <update7SEG+0xc0>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ff82 	bl	8000a5c <display7SEG>
		break;
 8000b58:	e035      	b.n	8000bc6 <update7SEG+0xb2>
	case 1:
		// Display the second 7 SEG with led_buffer[1]
		HAL_GPIO_WritePin(GPIOA, EN1_Pin, RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2180      	movs	r1, #128	; 0x80
 8000b5e:	481c      	ldr	r0, [pc, #112]	; (8000bd0 <update7SEG+0xbc>)
 8000b60:	f000 feeb 	bl	800193a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	f44f 7150 	mov.w	r1, #832	; 0x340
 8000b6a:	4819      	ldr	r0, [pc, #100]	; (8000bd0 <update7SEG+0xbc>)
 8000b6c:	f000 fee5 	bl	800193a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <update7SEG+0xc0>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff71 	bl	8000a5c <display7SEG>
		break;
 8000b7a:	e024      	b.n	8000bc6 <update7SEG+0xb2>
	case 2:
		// Display the third 7 SEG with led_buffer[2]
		HAL_GPIO_WritePin(GPIOA, EN2_Pin, RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b82:	4813      	ldr	r0, [pc, #76]	; (8000bd0 <update7SEG+0xbc>)
 8000b84:	f000 fed9 	bl	800193a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8000b8e:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <update7SEG+0xbc>)
 8000b90:	f000 fed3 	bl	800193a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <update7SEG+0xc0>)
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff5f 	bl	8000a5c <display7SEG>
		break;
 8000b9e:	e012      	b.n	8000bc6 <update7SEG+0xb2>
	case 3:
		// Display the forth 7 SEG with led_buffer[3]
		HAL_GPIO_WritePin(GPIOA, EN3_Pin, RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba6:	480a      	ldr	r0, [pc, #40]	; (8000bd0 <update7SEG+0xbc>)
 8000ba8:	f000 fec7 	bl	800193a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin| EN1_Pin | EN2_Pin , SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000bb2:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <update7SEG+0xbc>)
 8000bb4:	f000 fec1 	bl	800193a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <update7SEG+0xc0>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff4d 	bl	8000a5c <display7SEG>
		break;
 8000bc2:	e000      	b.n	8000bc6 <update7SEG+0xb2>
	default:
		break;
 8000bc4:	bf00      	nop
	}
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40010800 	.word	0x40010800
 8000bd4:	20000080 	.word	0x20000080

08000bd8 <scanLed>:
//-----Display Clock in LED 7SEG with 250ms for each LED-----//
int index_led = 0;
void scanLed(){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 8000bdc:	4b50      	ldr	r3, [pc, #320]	; (8000d20 <scanLed+0x148>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	f040 809b 	bne.w	8000d1c <scanLed+0x144>
		if(status == 2 || 3 || 4 || 5){
			if(is_button_pressed_short(2) == 1){
 8000be6:	2002      	movs	r0, #2
 8000be8:	f7ff fefc 	bl	80009e4 <is_button_pressed_short>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d11d      	bne.n	8000c2e <scanLed+0x56>
				if(tmpRED != defaultTimeRed) tmpRED = defaultTimeRed;
 8000bf2:	4b4c      	ldr	r3, [pc, #304]	; (8000d24 <scanLed+0x14c>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	4b4c      	ldr	r3, [pc, #304]	; (8000d28 <scanLed+0x150>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d003      	beq.n	8000c06 <scanLed+0x2e>
 8000bfe:	4b4a      	ldr	r3, [pc, #296]	; (8000d28 <scanLed+0x150>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a48      	ldr	r2, [pc, #288]	; (8000d24 <scanLed+0x14c>)
 8000c04:	6013      	str	r3, [r2, #0]
				if(tmpAMBER != defaultTimeAmber) tmpAMBER = defaultTimeAmber;
 8000c06:	4b49      	ldr	r3, [pc, #292]	; (8000d2c <scanLed+0x154>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4b49      	ldr	r3, [pc, #292]	; (8000d30 <scanLed+0x158>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d003      	beq.n	8000c1a <scanLed+0x42>
 8000c12:	4b47      	ldr	r3, [pc, #284]	; (8000d30 <scanLed+0x158>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a45      	ldr	r2, [pc, #276]	; (8000d2c <scanLed+0x154>)
 8000c18:	6013      	str	r3, [r2, #0]
				if(tmpGREEN != defaultTimeGreen) tmpRED = defaultTimeGreen;
 8000c1a:	4b46      	ldr	r3, [pc, #280]	; (8000d34 <scanLed+0x15c>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	4b46      	ldr	r3, [pc, #280]	; (8000d38 <scanLed+0x160>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d003      	beq.n	8000c2e <scanLed+0x56>
 8000c26:	4b44      	ldr	r3, [pc, #272]	; (8000d38 <scanLed+0x160>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a3e      	ldr	r2, [pc, #248]	; (8000d24 <scanLed+0x14c>)
 8000c2c:	6013      	str	r3, [r2, #0]
			}
			if(is_button_pressed_short(1) == 1 || is_button_pressed_1s(2) == 1){
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f7ff fed8 	bl	80009e4 <is_button_pressed_short>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d005      	beq.n	8000c46 <scanLed+0x6e>
 8000c3a:	2002      	movs	r0, #2
 8000c3c:	f7ff fef0 	bl	8000a20 <is_button_pressed_1s>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d13a      	bne.n	8000cbc <scanLed+0xe4>
				if((defaultTimeRed - (defaultTimeGreen + defaultTimeAmber)) != 0){
 8000c46:	4b3c      	ldr	r3, [pc, #240]	; (8000d38 <scanLed+0x160>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b39      	ldr	r3, [pc, #228]	; (8000d30 <scanLed+0x158>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	441a      	add	r2, r3
 8000c50:	4b35      	ldr	r3, [pc, #212]	; (8000d28 <scanLed+0x150>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d031      	beq.n	8000cbc <scanLed+0xe4>
					if((defaultTimeRed - (defaultTimeGreen + defaultTimeAmber)) > 0){
 8000c58:	4b33      	ldr	r3, [pc, #204]	; (8000d28 <scanLed+0x150>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b36      	ldr	r3, [pc, #216]	; (8000d38 <scanLed+0x160>)
 8000c5e:	6819      	ldr	r1, [r3, #0]
 8000c60:	4b33      	ldr	r3, [pc, #204]	; (8000d30 <scanLed+0x158>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	440b      	add	r3, r1
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	dd0b      	ble.n	8000c84 <scanLed+0xac>
						defaultTimeAmber++;
 8000c6c:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <scanLed+0x158>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	3301      	adds	r3, #1
 8000c72:	4a2f      	ldr	r2, [pc, #188]	; (8000d30 <scanLed+0x158>)
 8000c74:	6013      	str	r3, [r2, #0]
						defaultTimeGreen = defaultTimeRed - defaultTimeAmber;
 8000c76:	4b2c      	ldr	r3, [pc, #176]	; (8000d28 <scanLed+0x150>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <scanLed+0x158>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	4a2d      	ldr	r2, [pc, #180]	; (8000d38 <scanLed+0x160>)
 8000c82:	6013      	str	r3, [r2, #0]
					}
					if((defaultTimeRed - (defaultTimeGreen + defaultTimeAmber)) < 0){
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <scanLed+0x150>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <scanLed+0x160>)
 8000c8a:	6819      	ldr	r1, [r3, #0]
 8000c8c:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <scanLed+0x158>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	440b      	add	r3, r1
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	da11      	bge.n	8000cbc <scanLed+0xe4>
						if(defaultTimeRed < (defaultTimeGreen + defaultTimeAmber)){
 8000c98:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <scanLed+0x160>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <scanLed+0x158>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	441a      	add	r2, r3
 8000ca2:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <scanLed+0x150>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	dd08      	ble.n	8000cbc <scanLed+0xe4>
							defaultTimeAmber = 2;
 8000caa:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <scanLed+0x158>)
 8000cac:	2202      	movs	r2, #2
 8000cae:	601a      	str	r2, [r3, #0]
							defaultTimeGreen = 3;
 8000cb0:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <scanLed+0x160>)
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	601a      	str	r2, [r3, #0]
							defaultTimeRed = 5;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <scanLed+0x150>)
 8000cb8:	2205      	movs	r2, #5
 8000cba:	601a      	str	r2, [r3, #0]
						}
					}
				}
			}
		}
		if(status == MAN_MODE2)
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <scanLed+0x164>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b0b      	cmp	r3, #11
 8000cc2:	d105      	bne.n	8000cd0 <scanLed+0xf8>
			updateClockBuffer(2, tmpRED);
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <scanLed+0x14c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2002      	movs	r0, #2
 8000ccc:	f7ff fee6 	bl	8000a9c <updateClockBuffer>
		if(status == MAN_MODE3)
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <scanLed+0x164>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b0c      	cmp	r3, #12
 8000cd6:	d105      	bne.n	8000ce4 <scanLed+0x10c>
			updateClockBuffer(3, tmpAMBER);
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <scanLed+0x154>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f7ff fedc 	bl	8000a9c <updateClockBuffer>
		if(status == MAN_MODE4)
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <scanLed+0x164>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b0d      	cmp	r3, #13
 8000cea:	d105      	bne.n	8000cf8 <scanLed+0x120>
			updateClockBuffer(4, tmpGREEN);
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <scanLed+0x15c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	2004      	movs	r0, #4
 8000cf4:	f7ff fed2 	bl	8000a9c <updateClockBuffer>
		update7SEG(index_led++);
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <scanLed+0x168>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	1c5a      	adds	r2, r3, #1
 8000cfe:	4910      	ldr	r1, [pc, #64]	; (8000d40 <scanLed+0x168>)
 8000d00:	600a      	str	r2, [r1, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff06 	bl	8000b14 <update7SEG>
		if(index_led > 3) index_led = 0;
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <scanLed+0x168>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	dd02      	ble.n	8000d16 <scanLed+0x13e>
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <scanLed+0x168>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
		setTimer3(250);
 8000d16:	20fa      	movs	r0, #250	; 0xfa
 8000d18:	f000 f9e8 	bl	80010ec <setTimer3>
	}
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200000a8 	.word	0x200000a8
 8000d24:	20000018 	.word	0x20000018
 8000d28:	2000000c 	.word	0x2000000c
 8000d2c:	20000020 	.word	0x20000020
 8000d30:	20000014 	.word	0x20000014
 8000d34:	2000001c 	.word	0x2000001c
 8000d38:	20000010 	.word	0x20000010
 8000d3c:	20000060 	.word	0x20000060
 8000d40:	20000090 	.word	0x20000090

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d48:	f000 faf6 	bl	8001338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4c:	f000 f818 	bl	8000d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d50:	f000 f89e 	bl	8000e90 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d54:	f000 f850 	bl	8000df8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d58:	4807      	ldr	r0, [pc, #28]	; (8000d78 <main+0x34>)
 8000d5a:	f001 fa4b 	bl	80021f4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <main+0x38>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	601a      	str	r2, [r3, #0]
  setTimer3(100);
 8000d64:	2064      	movs	r0, #100	; 0x64
 8000d66:	f000 f9c1 	bl	80010ec <setTimer3>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_automatic_run();
 8000d6a:	f7ff f9ef 	bl	800014c <fsm_automatic_run>
	  fsm_manual_run();
 8000d6e:	f7ff fbd9 	bl	8000524 <fsm_manual_run>
	  scanLed();
 8000d72:	f7ff ff31 	bl	8000bd8 <scanLed>
	  fsm_automatic_run();
 8000d76:	e7f8      	b.n	8000d6a <main+0x26>
 8000d78:	200000ac 	.word	0x200000ac
 8000d7c:	20000060 	.word	0x20000060

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b090      	sub	sp, #64	; 0x40
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 0318 	add.w	r3, r7, #24
 8000d8a:	2228      	movs	r2, #40	; 0x28
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 fde0 	bl	8002954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da6:	2301      	movs	r3, #1
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000daa:	2310      	movs	r3, #16
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db2:	f107 0318 	add.w	r3, r7, #24
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 fdf0 	bl	800199c <HAL_RCC_OscConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dc2:	f000 f8c7 	bl	8000f54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc6:	230f      	movs	r3, #15
 8000dc8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f001 f85c 	bl	8001e9c <HAL_RCC_ClockConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dea:	f000 f8b3 	bl	8000f54 <Error_Handler>
  }
}
 8000dee:	bf00      	nop
 8000df0:	3740      	adds	r7, #64	; 0x40
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfe:	f107 0308 	add.w	r3, r7, #8
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e14:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <MX_TIM2_Init+0x94>)
 8000e16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <MX_TIM2_Init+0x94>)
 8000e1e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <MX_TIM2_Init+0x94>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <MX_TIM2_Init+0x94>)
 8000e2c:	2209      	movs	r2, #9
 8000e2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <MX_TIM2_Init+0x94>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <MX_TIM2_Init+0x94>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e3c:	4813      	ldr	r0, [pc, #76]	; (8000e8c <MX_TIM2_Init+0x94>)
 8000e3e:	f001 f989 	bl	8002154 <HAL_TIM_Base_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e48:	f000 f884 	bl	8000f54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	4619      	mov	r1, r3
 8000e58:	480c      	ldr	r0, [pc, #48]	; (8000e8c <MX_TIM2_Init+0x94>)
 8000e5a:	f001 fb07 	bl	800246c <HAL_TIM_ConfigClockSource>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e64:	f000 f876 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e70:	463b      	mov	r3, r7
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_TIM2_Init+0x94>)
 8000e76:	f001 fcdf 	bl	8002838 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e80:	f000 f868 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200000ac 	.word	0x200000ac

08000e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <MX_GPIO_Init+0xb8>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a27      	ldr	r2, [pc, #156]	; (8000f48 <MX_GPIO_Init+0xb8>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <MX_GPIO_Init+0xb8>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebc:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <MX_GPIO_Init+0xb8>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a21      	ldr	r2, [pc, #132]	; (8000f48 <MX_GPIO_Init+0xb8>)
 8000ec2:	f043 0308 	orr.w	r3, r3, #8
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <MX_GPIO_Init+0xb8>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0308 	and.w	r3, r3, #8
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000eda:	481c      	ldr	r0, [pc, #112]	; (8000f4c <MX_GPIO_Init+0xbc>)
 8000edc:	f000 fd2d 	bl	800193a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|GREEN1_Pin
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f643 717f 	movw	r1, #16255	; 0x3f7f
 8000ee6:	481a      	ldr	r0, [pc, #104]	; (8000f50 <MX_GPIO_Init+0xc0>)
 8000ee8:	f000 fd27 	bl	800193a <HAL_GPIO_WritePin>
                          |RED2_Pin|AMBER2_Pin|GREEN2_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|RED1_Pin
                          |AMBER1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000eec:	230e      	movs	r3, #14
 8000eee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	4619      	mov	r1, r3
 8000efe:	4813      	ldr	r0, [pc, #76]	; (8000f4c <MX_GPIO_Init+0xbc>)
 8000f00:	f000 fb8a 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8000f04:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000f08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2302      	movs	r3, #2
 8000f14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0308 	add.w	r3, r7, #8
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <MX_GPIO_Init+0xbc>)
 8000f1e:	f000 fb7b 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin GREEN1_Pin
                           RED2_Pin AMBER2_Pin GREEN2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin RED1_Pin
                           AMBER1_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|GREEN1_Pin
 8000f22:	f643 737f 	movw	r3, #16255	; 0x3f7f
 8000f26:	60bb      	str	r3, [r7, #8]
                          |RED2_Pin|AMBER2_Pin|GREEN2_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|RED1_Pin
                          |AMBER1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2302      	movs	r3, #2
 8000f32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_GPIO_Init+0xc0>)
 8000f3c:	f000 fb6c 	bl	8001618 <HAL_GPIO_Init>

}
 8000f40:	bf00      	nop
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40010800 	.word	0x40010800
 8000f50:	40010c00 	.word	0x40010c00

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <Error_Handler+0x8>
	...

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_MspInit+0x5c>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <HAL_MspInit+0x5c>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6193      	str	r3, [r2, #24]
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_MspInit+0x5c>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <HAL_MspInit+0x5c>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <HAL_MspInit+0x5c>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f88:	61d3      	str	r3, [r2, #28]
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_MspInit+0x5c>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_MspInit+0x60>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_MspInit+0x60>)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010000 	.word	0x40010000

08000fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd4:	d113      	bne.n	8000ffe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <HAL_TIM_Base_MspInit+0x44>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <HAL_TIM_Base_MspInit+0x44>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	61d3      	str	r3, [r2, #28]
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <HAL_TIM_Base_MspInit+0x44>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	201c      	movs	r0, #28
 8000ff4:	f000 fad9 	bl	80015aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ff8:	201c      	movs	r0, #28
 8000ffa:	f000 faf2 	bl	80015e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <NMI_Handler+0x4>

08001012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <MemManage_Handler+0x4>

0800101e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <UsageFault_Handler+0x4>

0800102a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr

08001036 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr

0800104e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001052:	f000 f9b7 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <TIM2_IRQHandler+0x10>)
 8001062:	f001 f913 	bl	800228c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200000ac 	.word	0x200000ac

08001070 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <setTimer1>:
int timer2_counter = 0;
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration){
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <setTimer1+0x2c>)
 8001088:	fb82 1203 	smull	r1, r2, r2, r3
 800108c:	1092      	asrs	r2, r2, #2
 800108e:	17db      	asrs	r3, r3, #31
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	4a06      	ldr	r2, [pc, #24]	; (80010ac <setTimer1+0x30>)
 8001094:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <setTimer1+0x34>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	66666667 	.word	0x66666667
 80010ac:	20000094 	.word	0x20000094
 80010b0:	20000098 	.word	0x20000098

080010b4 <setTimer2>:

void setTimer2(int duration){
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <setTimer2+0x2c>)
 80010c0:	fb82 1203 	smull	r1, r2, r2, r3
 80010c4:	1092      	asrs	r2, r2, #2
 80010c6:	17db      	asrs	r3, r3, #31
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <setTimer2+0x30>)
 80010cc:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <setTimer2+0x34>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	66666667 	.word	0x66666667
 80010e4:	2000009c 	.word	0x2000009c
 80010e8:	200000a0 	.word	0x200000a0

080010ec <setTimer3>:

void setTimer3(int duration){
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <setTimer3+0x2c>)
 80010f8:	fb82 1203 	smull	r1, r2, r2, r3
 80010fc:	1092      	asrs	r2, r2, #2
 80010fe:	17db      	asrs	r3, r3, #31
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	4a06      	ldr	r2, [pc, #24]	; (800111c <setTimer3+0x30>)
 8001104:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <setTimer3+0x34>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	66666667 	.word	0x66666667
 800111c:	200000a4 	.word	0x200000a4
 8001120:	200000a8 	.word	0x200000a8

08001124 <timerRun>:

void timerRun(){
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <timerRun+0x6c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	dd0b      	ble.n	8001148 <timerRun+0x24>
		timer1_counter--;
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <timerRun+0x6c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3b01      	subs	r3, #1
 8001136:	4a16      	ldr	r2, [pc, #88]	; (8001190 <timerRun+0x6c>)
 8001138:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <timerRun+0x6c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	dc02      	bgt.n	8001148 <timerRun+0x24>
			timer1_flag = 1;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <timerRun+0x70>)
 8001144:	2201      	movs	r2, #1
 8001146:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <timerRun+0x74>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	dd0b      	ble.n	8001168 <timerRun+0x44>
		timer2_counter--;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <timerRun+0x74>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3b01      	subs	r3, #1
 8001156:	4a10      	ldr	r2, [pc, #64]	; (8001198 <timerRun+0x74>)
 8001158:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <timerRun+0x74>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	dc02      	bgt.n	8001168 <timerRun+0x44>
			timer2_flag = 1;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <timerRun+0x78>)
 8001164:	2201      	movs	r2, #1
 8001166:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <timerRun+0x7c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	dd0b      	ble.n	8001188 <timerRun+0x64>
		timer3_counter--;
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <timerRun+0x7c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	3b01      	subs	r3, #1
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <timerRun+0x7c>)
 8001178:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <timerRun+0x7c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	dc02      	bgt.n	8001188 <timerRun+0x64>
			timer3_flag = 1;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <timerRun+0x80>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	20000094 	.word	0x20000094
 8001194:	20000098 	.word	0x20000098
 8001198:	2000009c 	.word	0x2000009c
 800119c:	200000a0 	.word	0x200000a0
 80011a0:	200000a4 	.word	0x200000a4
 80011a4:	200000a8 	.word	0x200000a8

080011a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011b8:	d101      	bne.n	80011be <HAL_TIM_PeriodElapsedCallback+0x16>
		button_reading();
 80011ba:	f7ff fb57 	bl	800086c <button_reading>
	}
	timerRun();
 80011be:	f7ff ffb1 	bl	8001124 <timerRun>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <setTrafficRed1>:
 *      Author: phuct
 */

#include "traffic.h"

void setTrafficRed1(){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d6:	4808      	ldr	r0, [pc, #32]	; (80011f8 <setTrafficRed1+0x2c>)
 80011d8:	f000 fbaf 	bl	800193a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER1_GPIO_Port, AMBER1_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <setTrafficRed1+0x2c>)
 80011e4:	f000 fba9 	bl	800193a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ee:	4802      	ldr	r0, [pc, #8]	; (80011f8 <setTrafficRed1+0x2c>)
 80011f0:	f000 fba3 	bl	800193a <HAL_GPIO_WritePin>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40010c00 	.word	0x40010c00

080011fc <setTrafficAmber1>:

void setTrafficAmber1(){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001206:	4808      	ldr	r0, [pc, #32]	; (8001228 <setTrafficAmber1+0x2c>)
 8001208:	f000 fb97 	bl	800193a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER1_GPIO_Port, AMBER1_Pin, GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <setTrafficAmber1+0x2c>)
 8001214:	f000 fb91 	bl	800193a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800121e:	4802      	ldr	r0, [pc, #8]	; (8001228 <setTrafficAmber1+0x2c>)
 8001220:	f000 fb8b 	bl	800193a <HAL_GPIO_WritePin>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40010c00 	.word	0x40010c00

0800122c <setTrafficGreen1>:

void setTrafficGreen1(){
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001236:	4808      	ldr	r0, [pc, #32]	; (8001258 <setTrafficGreen1+0x2c>)
 8001238:	f000 fb7f 	bl	800193a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER1_GPIO_Port, AMBER1_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <setTrafficGreen1+0x2c>)
 8001244:	f000 fb79 	bl	800193a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 8001248:	2201      	movs	r2, #1
 800124a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800124e:	4802      	ldr	r0, [pc, #8]	; (8001258 <setTrafficGreen1+0x2c>)
 8001250:	f000 fb73 	bl	800193a <HAL_GPIO_WritePin>
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40010c00 	.word	0x40010c00

0800125c <setTrafficRed2>:

void setTrafficRed2(){
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001266:	4808      	ldr	r0, [pc, #32]	; (8001288 <setTrafficRed2+0x2c>)
 8001268:	f000 fb67 	bl	800193a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <setTrafficRed2+0x2c>)
 8001274:	f000 fb61 	bl	800193a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127e:	4802      	ldr	r0, [pc, #8]	; (8001288 <setTrafficRed2+0x2c>)
 8001280:	f000 fb5b 	bl	800193a <HAL_GPIO_WritePin>
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40010c00 	.word	0x40010c00

0800128c <setTrafficAmber2>:

void setTrafficAmber2(){
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001296:	4808      	ldr	r0, [pc, #32]	; (80012b8 <setTrafficAmber2+0x2c>)
 8001298:	f000 fb4f 	bl	800193a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, GPIO_PIN_SET);
 800129c:	2201      	movs	r2, #1
 800129e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <setTrafficAmber2+0x2c>)
 80012a4:	f000 fb49 	bl	800193a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ae:	4802      	ldr	r0, [pc, #8]	; (80012b8 <setTrafficAmber2+0x2c>)
 80012b0:	f000 fb43 	bl	800193a <HAL_GPIO_WritePin>
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40010c00 	.word	0x40010c00

080012bc <setTrafficGreen2>:

void setTrafficGreen2(){
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c6:	4808      	ldr	r0, [pc, #32]	; (80012e8 <setTrafficGreen2+0x2c>)
 80012c8:	f000 fb37 	bl	800193a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <setTrafficGreen2+0x2c>)
 80012d4:	f000 fb31 	bl	800193a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012de:	4802      	ldr	r0, [pc, #8]	; (80012e8 <setTrafficGreen2+0x2c>)
 80012e0:	f000 fb2b 	bl	800193a <HAL_GPIO_WritePin>
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40010c00 	.word	0x40010c00

080012ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012ec:	f7ff fec0 	bl	8001070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f0:	480b      	ldr	r0, [pc, #44]	; (8001320 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012f2:	490c      	ldr	r1, [pc, #48]	; (8001324 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012f4:	4a0c      	ldr	r2, [pc, #48]	; (8001328 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f8:	e002      	b.n	8001300 <LoopCopyDataInit>

080012fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fe:	3304      	adds	r3, #4

08001300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001304:	d3f9      	bcc.n	80012fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001306:	4a09      	ldr	r2, [pc, #36]	; (800132c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001308:	4c09      	ldr	r4, [pc, #36]	; (8001330 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800130c:	e001      	b.n	8001312 <LoopFillZerobss>

0800130e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001310:	3204      	adds	r2, #4

08001312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001314:	d3fb      	bcc.n	800130e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001316:	f001 faf9 	bl	800290c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800131a:	f7ff fd13 	bl	8000d44 <main>
  bx lr
 800131e:	4770      	bx	lr
  ldr r0, =_sdata
 8001320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001324:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8001328:	080029a8 	.word	0x080029a8
  ldr r2, =_sbss
 800132c:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8001330:	200000f8 	.word	0x200000f8

08001334 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001334:	e7fe      	b.n	8001334 <ADC1_2_IRQHandler>
	...

08001338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_Init+0x28>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_Init+0x28>)
 8001342:	f043 0310 	orr.w	r3, r3, #16
 8001346:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001348:	2003      	movs	r0, #3
 800134a:	f000 f923 	bl	8001594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134e:	200f      	movs	r0, #15
 8001350:	f000 f808 	bl	8001364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001354:	f7ff fe04 	bl	8000f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40022000 	.word	0x40022000

08001364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_InitTick+0x54>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_InitTick+0x58>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	fbb3 f3f1 	udiv	r3, r3, r1
 800137e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f93b 	bl	80015fe <HAL_SYSTICK_Config>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e00e      	b.n	80013b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d80a      	bhi.n	80013ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001398:	2200      	movs	r2, #0
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f000 f903 	bl	80015aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a4:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <HAL_InitTick+0x5c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e000      	b.n	80013b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000038 	.word	0x20000038
 80013bc:	20000040 	.word	0x20000040
 80013c0:	2000003c 	.word	0x2000003c

080013c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_IncTick+0x1c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_IncTick+0x20>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a03      	ldr	r2, [pc, #12]	; (80013e4 <HAL_IncTick+0x20>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	20000040 	.word	0x20000040
 80013e4:	200000f4 	.word	0x200000f4

080013e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return uwTick;
 80013ec:	4b02      	ldr	r3, [pc, #8]	; (80013f8 <HAL_GetTick+0x10>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	200000f4 	.word	0x200000f4

080013fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <__NVIC_GetPriorityGrouping+0x18>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	f003 0307 	and.w	r3, r3, #7
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0b      	blt.n	800148a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	f003 021f 	and.w	r2, r3, #31
 8001478:	4906      	ldr	r1, [pc, #24]	; (8001494 <__NVIC_EnableIRQ+0x34>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	2001      	movs	r0, #1
 8001482:	fa00 f202 	lsl.w	r2, r0, r2
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001560:	d301      	bcc.n	8001566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001562:	2301      	movs	r3, #1
 8001564:	e00f      	b.n	8001586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <SysTick_Config+0x40>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156e:	210f      	movs	r1, #15
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f7ff ff90 	bl	8001498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <SysTick_Config+0x40>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <SysTick_Config+0x40>)
 8001580:	2207      	movs	r2, #7
 8001582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	e000e010 	.word	0xe000e010

08001594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff2d 	bl	80013fc <__NVIC_SetPriorityGrouping>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015bc:	f7ff ff42 	bl	8001444 <__NVIC_GetPriorityGrouping>
 80015c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	6978      	ldr	r0, [r7, #20]
 80015c8:	f7ff ff90 	bl	80014ec <NVIC_EncodePriority>
 80015cc:	4602      	mov	r2, r0
 80015ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff5f 	bl	8001498 <__NVIC_SetPriority>
}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff35 	bl	8001460 <__NVIC_EnableIRQ>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffa2 	bl	8001550 <SysTick_Config>
 800160c:	4603      	mov	r3, r0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001618:	b480      	push	{r7}
 800161a:	b08b      	sub	sp, #44	; 0x2c
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162a:	e148      	b.n	80018be <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800162c:	2201      	movs	r2, #1
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	429a      	cmp	r2, r3
 8001646:	f040 8137 	bne.w	80018b8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	4aa3      	ldr	r2, [pc, #652]	; (80018dc <HAL_GPIO_Init+0x2c4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d05e      	beq.n	8001712 <HAL_GPIO_Init+0xfa>
 8001654:	4aa1      	ldr	r2, [pc, #644]	; (80018dc <HAL_GPIO_Init+0x2c4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d875      	bhi.n	8001746 <HAL_GPIO_Init+0x12e>
 800165a:	4aa1      	ldr	r2, [pc, #644]	; (80018e0 <HAL_GPIO_Init+0x2c8>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d058      	beq.n	8001712 <HAL_GPIO_Init+0xfa>
 8001660:	4a9f      	ldr	r2, [pc, #636]	; (80018e0 <HAL_GPIO_Init+0x2c8>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d86f      	bhi.n	8001746 <HAL_GPIO_Init+0x12e>
 8001666:	4a9f      	ldr	r2, [pc, #636]	; (80018e4 <HAL_GPIO_Init+0x2cc>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d052      	beq.n	8001712 <HAL_GPIO_Init+0xfa>
 800166c:	4a9d      	ldr	r2, [pc, #628]	; (80018e4 <HAL_GPIO_Init+0x2cc>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d869      	bhi.n	8001746 <HAL_GPIO_Init+0x12e>
 8001672:	4a9d      	ldr	r2, [pc, #628]	; (80018e8 <HAL_GPIO_Init+0x2d0>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d04c      	beq.n	8001712 <HAL_GPIO_Init+0xfa>
 8001678:	4a9b      	ldr	r2, [pc, #620]	; (80018e8 <HAL_GPIO_Init+0x2d0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d863      	bhi.n	8001746 <HAL_GPIO_Init+0x12e>
 800167e:	4a9b      	ldr	r2, [pc, #620]	; (80018ec <HAL_GPIO_Init+0x2d4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d046      	beq.n	8001712 <HAL_GPIO_Init+0xfa>
 8001684:	4a99      	ldr	r2, [pc, #612]	; (80018ec <HAL_GPIO_Init+0x2d4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d85d      	bhi.n	8001746 <HAL_GPIO_Init+0x12e>
 800168a:	2b12      	cmp	r3, #18
 800168c:	d82a      	bhi.n	80016e4 <HAL_GPIO_Init+0xcc>
 800168e:	2b12      	cmp	r3, #18
 8001690:	d859      	bhi.n	8001746 <HAL_GPIO_Init+0x12e>
 8001692:	a201      	add	r2, pc, #4	; (adr r2, 8001698 <HAL_GPIO_Init+0x80>)
 8001694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001698:	08001713 	.word	0x08001713
 800169c:	080016ed 	.word	0x080016ed
 80016a0:	080016ff 	.word	0x080016ff
 80016a4:	08001741 	.word	0x08001741
 80016a8:	08001747 	.word	0x08001747
 80016ac:	08001747 	.word	0x08001747
 80016b0:	08001747 	.word	0x08001747
 80016b4:	08001747 	.word	0x08001747
 80016b8:	08001747 	.word	0x08001747
 80016bc:	08001747 	.word	0x08001747
 80016c0:	08001747 	.word	0x08001747
 80016c4:	08001747 	.word	0x08001747
 80016c8:	08001747 	.word	0x08001747
 80016cc:	08001747 	.word	0x08001747
 80016d0:	08001747 	.word	0x08001747
 80016d4:	08001747 	.word	0x08001747
 80016d8:	08001747 	.word	0x08001747
 80016dc:	080016f5 	.word	0x080016f5
 80016e0:	08001709 	.word	0x08001709
 80016e4:	4a82      	ldr	r2, [pc, #520]	; (80018f0 <HAL_GPIO_Init+0x2d8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ea:	e02c      	b.n	8001746 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	623b      	str	r3, [r7, #32]
          break;
 80016f2:	e029      	b.n	8001748 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	3304      	adds	r3, #4
 80016fa:	623b      	str	r3, [r7, #32]
          break;
 80016fc:	e024      	b.n	8001748 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	3308      	adds	r3, #8
 8001704:	623b      	str	r3, [r7, #32]
          break;
 8001706:	e01f      	b.n	8001748 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	330c      	adds	r3, #12
 800170e:	623b      	str	r3, [r7, #32]
          break;
 8001710:	e01a      	b.n	8001748 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800171a:	2304      	movs	r3, #4
 800171c:	623b      	str	r3, [r7, #32]
          break;
 800171e:	e013      	b.n	8001748 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d105      	bne.n	8001734 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001728:	2308      	movs	r3, #8
 800172a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	611a      	str	r2, [r3, #16]
          break;
 8001732:	e009      	b.n	8001748 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001734:	2308      	movs	r3, #8
 8001736:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	615a      	str	r2, [r3, #20]
          break;
 800173e:	e003      	b.n	8001748 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
          break;
 8001744:	e000      	b.n	8001748 <HAL_GPIO_Init+0x130>
          break;
 8001746:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	2bff      	cmp	r3, #255	; 0xff
 800174c:	d801      	bhi.n	8001752 <HAL_GPIO_Init+0x13a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	e001      	b.n	8001756 <HAL_GPIO_Init+0x13e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3304      	adds	r3, #4
 8001756:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	2bff      	cmp	r3, #255	; 0xff
 800175c:	d802      	bhi.n	8001764 <HAL_GPIO_Init+0x14c>
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	e002      	b.n	800176a <HAL_GPIO_Init+0x152>
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	3b08      	subs	r3, #8
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	210f      	movs	r1, #15
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	401a      	ands	r2, r3
 800177c:	6a39      	ldr	r1, [r7, #32]
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	fa01 f303 	lsl.w	r3, r1, r3
 8001784:	431a      	orrs	r2, r3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8090 	beq.w	80018b8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001798:	4b56      	ldr	r3, [pc, #344]	; (80018f4 <HAL_GPIO_Init+0x2dc>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a55      	ldr	r2, [pc, #340]	; (80018f4 <HAL_GPIO_Init+0x2dc>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b53      	ldr	r3, [pc, #332]	; (80018f4 <HAL_GPIO_Init+0x2dc>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017b0:	4a51      	ldr	r2, [pc, #324]	; (80018f8 <HAL_GPIO_Init+0x2e0>)
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	3302      	adds	r3, #2
 80017b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	220f      	movs	r2, #15
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	4013      	ands	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a49      	ldr	r2, [pc, #292]	; (80018fc <HAL_GPIO_Init+0x2e4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d00d      	beq.n	80017f8 <HAL_GPIO_Init+0x1e0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a48      	ldr	r2, [pc, #288]	; (8001900 <HAL_GPIO_Init+0x2e8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d007      	beq.n	80017f4 <HAL_GPIO_Init+0x1dc>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a47      	ldr	r2, [pc, #284]	; (8001904 <HAL_GPIO_Init+0x2ec>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d101      	bne.n	80017f0 <HAL_GPIO_Init+0x1d8>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e004      	b.n	80017fa <HAL_GPIO_Init+0x1e2>
 80017f0:	2303      	movs	r3, #3
 80017f2:	e002      	b.n	80017fa <HAL_GPIO_Init+0x1e2>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_GPIO_Init+0x1e2>
 80017f8:	2300      	movs	r3, #0
 80017fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fc:	f002 0203 	and.w	r2, r2, #3
 8001800:	0092      	lsls	r2, r2, #2
 8001802:	4093      	lsls	r3, r2
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4313      	orrs	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800180a:	493b      	ldr	r1, [pc, #236]	; (80018f8 <HAL_GPIO_Init+0x2e0>)
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	3302      	adds	r3, #2
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d006      	beq.n	8001832 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001824:	4b38      	ldr	r3, [pc, #224]	; (8001908 <HAL_GPIO_Init+0x2f0>)
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	4937      	ldr	r1, [pc, #220]	; (8001908 <HAL_GPIO_Init+0x2f0>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	608b      	str	r3, [r1, #8]
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001832:	4b35      	ldr	r3, [pc, #212]	; (8001908 <HAL_GPIO_Init+0x2f0>)
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	43db      	mvns	r3, r3
 800183a:	4933      	ldr	r1, [pc, #204]	; (8001908 <HAL_GPIO_Init+0x2f0>)
 800183c:	4013      	ands	r3, r2
 800183e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800184c:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <HAL_GPIO_Init+0x2f0>)
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	492d      	ldr	r1, [pc, #180]	; (8001908 <HAL_GPIO_Init+0x2f0>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	60cb      	str	r3, [r1, #12]
 8001858:	e006      	b.n	8001868 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <HAL_GPIO_Init+0x2f0>)
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	43db      	mvns	r3, r3
 8001862:	4929      	ldr	r1, [pc, #164]	; (8001908 <HAL_GPIO_Init+0x2f0>)
 8001864:	4013      	ands	r3, r2
 8001866:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d006      	beq.n	8001882 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <HAL_GPIO_Init+0x2f0>)
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	4923      	ldr	r1, [pc, #140]	; (8001908 <HAL_GPIO_Init+0x2f0>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
 8001880:	e006      	b.n	8001890 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001882:	4b21      	ldr	r3, [pc, #132]	; (8001908 <HAL_GPIO_Init+0x2f0>)
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	43db      	mvns	r3, r3
 800188a:	491f      	ldr	r1, [pc, #124]	; (8001908 <HAL_GPIO_Init+0x2f0>)
 800188c:	4013      	ands	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d006      	beq.n	80018aa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800189c:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <HAL_GPIO_Init+0x2f0>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4919      	ldr	r1, [pc, #100]	; (8001908 <HAL_GPIO_Init+0x2f0>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	600b      	str	r3, [r1, #0]
 80018a8:	e006      	b.n	80018b8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_GPIO_Init+0x2f0>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	4915      	ldr	r1, [pc, #84]	; (8001908 <HAL_GPIO_Init+0x2f0>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	3301      	adds	r3, #1
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	fa22 f303 	lsr.w	r3, r2, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f47f aeaf 	bne.w	800162c <HAL_GPIO_Init+0x14>
  }
}
 80018ce:	bf00      	nop
 80018d0:	bf00      	nop
 80018d2:	372c      	adds	r7, #44	; 0x2c
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	10320000 	.word	0x10320000
 80018e0:	10310000 	.word	0x10310000
 80018e4:	10220000 	.word	0x10220000
 80018e8:	10210000 	.word	0x10210000
 80018ec:	10120000 	.word	0x10120000
 80018f0:	10110000 	.word	0x10110000
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40010000 	.word	0x40010000
 80018fc:	40010800 	.word	0x40010800
 8001900:	40010c00 	.word	0x40010c00
 8001904:	40011000 	.word	0x40011000
 8001908:	40010400 	.word	0x40010400

0800190c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	887b      	ldrh	r3, [r7, #2]
 800191e:	4013      	ands	r3, r2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
 8001928:	e001      	b.n	800192e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800192e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	807b      	strh	r3, [r7, #2]
 8001946:	4613      	mov	r3, r2
 8001948:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800194a:	787b      	ldrb	r3, [r7, #1]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001950:	887a      	ldrh	r2, [r7, #2]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001956:	e003      	b.n	8001960 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001958:	887b      	ldrh	r3, [r7, #2]
 800195a:	041a      	lsls	r2, r3, #16
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	611a      	str	r2, [r3, #16]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr

0800196a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800196a:	b480      	push	{r7}
 800196c:	b085      	sub	sp, #20
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	460b      	mov	r3, r1
 8001974:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800197c:	887a      	ldrh	r2, [r7, #2]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4013      	ands	r3, r2
 8001982:	041a      	lsls	r2, r3, #16
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	43d9      	mvns	r1, r3
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	400b      	ands	r3, r1
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	611a      	str	r2, [r3, #16]
}
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e26c      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8087 	beq.w	8001aca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019bc:	4b92      	ldr	r3, [pc, #584]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d00c      	beq.n	80019e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019c8:	4b8f      	ldr	r3, [pc, #572]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d112      	bne.n	80019fa <HAL_RCC_OscConfig+0x5e>
 80019d4:	4b8c      	ldr	r3, [pc, #560]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e0:	d10b      	bne.n	80019fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e2:	4b89      	ldr	r3, [pc, #548]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d06c      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x12c>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d168      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e246      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a02:	d106      	bne.n	8001a12 <HAL_RCC_OscConfig+0x76>
 8001a04:	4b80      	ldr	r3, [pc, #512]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a7f      	ldr	r2, [pc, #508]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	e02e      	b.n	8001a70 <HAL_RCC_OscConfig+0xd4>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x98>
 8001a1a:	4b7b      	ldr	r3, [pc, #492]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a7a      	ldr	r2, [pc, #488]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	4b78      	ldr	r3, [pc, #480]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a77      	ldr	r2, [pc, #476]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e01d      	b.n	8001a70 <HAL_RCC_OscConfig+0xd4>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0xbc>
 8001a3e:	4b72      	ldr	r3, [pc, #456]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a71      	ldr	r2, [pc, #452]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b6f      	ldr	r3, [pc, #444]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a6e      	ldr	r2, [pc, #440]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0xd4>
 8001a58:	4b6b      	ldr	r3, [pc, #428]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a6a      	ldr	r2, [pc, #424]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b68      	ldr	r3, [pc, #416]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a67      	ldr	r2, [pc, #412]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d013      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff fcb6 	bl	80013e8 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff fcb2 	bl	80013e8 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e1fa      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	4b5d      	ldr	r3, [pc, #372]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0xe4>
 8001a9e:	e014      	b.n	8001aca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fca2 	bl	80013e8 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fc9e 	bl	80013e8 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e1e6      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x10c>
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d063      	beq.n	8001b9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad6:	4b4c      	ldr	r3, [pc, #304]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00b      	beq.n	8001afa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ae2:	4b49      	ldr	r3, [pc, #292]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d11c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x18c>
 8001aee:	4b46      	ldr	r3, [pc, #280]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d116      	bne.n	8001b28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afa:	4b43      	ldr	r3, [pc, #268]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_RCC_OscConfig+0x176>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e1ba      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b12:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4939      	ldr	r1, [pc, #228]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	e03a      	b.n	8001b9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d020      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b30:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7ff fc57 	bl	80013e8 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3e:	f7ff fc53 	bl	80013e8 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e19b      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b50:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5c:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4927      	ldr	r1, [pc, #156]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]
 8001b70:	e015      	b.n	8001b9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff fc36 	bl	80013e8 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b80:	f7ff fc32 	bl	80013e8 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e17a      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d03a      	beq.n	8001c20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d019      	beq.n	8001be6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_RCC_OscConfig+0x274>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb8:	f7ff fc16 	bl	80013e8 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fc12 	bl	80013e8 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e15a      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bde:	2001      	movs	r0, #1
 8001be0:	f000 fa9a 	bl	8002118 <RCC_Delay>
 8001be4:	e01c      	b.n	8001c20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_RCC_OscConfig+0x274>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bec:	f7ff fbfc 	bl	80013e8 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf2:	e00f      	b.n	8001c14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf4:	f7ff fbf8 	bl	80013e8 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d908      	bls.n	8001c14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e140      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	42420000 	.word	0x42420000
 8001c10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c14:	4b9e      	ldr	r3, [pc, #632]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1e9      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 80a6 	beq.w	8001d7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c32:	4b97      	ldr	r3, [pc, #604]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10d      	bne.n	8001c5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4b94      	ldr	r3, [pc, #592]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	4a93      	ldr	r2, [pc, #588]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	61d3      	str	r3, [r2, #28]
 8001c4a:	4b91      	ldr	r3, [pc, #580]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c56:	2301      	movs	r3, #1
 8001c58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5a:	4b8e      	ldr	r3, [pc, #568]	; (8001e94 <HAL_RCC_OscConfig+0x4f8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d118      	bne.n	8001c98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c66:	4b8b      	ldr	r3, [pc, #556]	; (8001e94 <HAL_RCC_OscConfig+0x4f8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a8a      	ldr	r2, [pc, #552]	; (8001e94 <HAL_RCC_OscConfig+0x4f8>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c72:	f7ff fbb9 	bl	80013e8 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7a:	f7ff fbb5 	bl	80013e8 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b64      	cmp	r3, #100	; 0x64
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e0fd      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	4b81      	ldr	r3, [pc, #516]	; (8001e94 <HAL_RCC_OscConfig+0x4f8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x312>
 8001ca0:	4b7b      	ldr	r3, [pc, #492]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4a7a      	ldr	r2, [pc, #488]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6213      	str	r3, [r2, #32]
 8001cac:	e02d      	b.n	8001d0a <HAL_RCC_OscConfig+0x36e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x334>
 8001cb6:	4b76      	ldr	r3, [pc, #472]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4a75      	ldr	r2, [pc, #468]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6213      	str	r3, [r2, #32]
 8001cc2:	4b73      	ldr	r3, [pc, #460]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	4a72      	ldr	r2, [pc, #456]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	f023 0304 	bic.w	r3, r3, #4
 8001ccc:	6213      	str	r3, [r2, #32]
 8001cce:	e01c      	b.n	8001d0a <HAL_RCC_OscConfig+0x36e>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d10c      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x356>
 8001cd8:	4b6d      	ldr	r3, [pc, #436]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4a6c      	ldr	r2, [pc, #432]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6213      	str	r3, [r2, #32]
 8001ce4:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4a69      	ldr	r2, [pc, #420]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6213      	str	r3, [r2, #32]
 8001cf0:	e00b      	b.n	8001d0a <HAL_RCC_OscConfig+0x36e>
 8001cf2:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	4a66      	ldr	r2, [pc, #408]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	6213      	str	r3, [r2, #32]
 8001cfe:	4b64      	ldr	r3, [pc, #400]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4a63      	ldr	r2, [pc, #396]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d015      	beq.n	8001d3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d12:	f7ff fb69 	bl	80013e8 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	e00a      	b.n	8001d30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1a:	f7ff fb65 	bl	80013e8 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0ab      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d30:	4b57      	ldr	r3, [pc, #348]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0ee      	beq.n	8001d1a <HAL_RCC_OscConfig+0x37e>
 8001d3c:	e014      	b.n	8001d68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fb53 	bl	80013e8 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7ff fb4f 	bl	80013e8 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e095      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5c:	4b4c      	ldr	r3, [pc, #304]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1ee      	bne.n	8001d46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d68:	7dfb      	ldrb	r3, [r7, #23]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d105      	bne.n	8001d7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6e:	4b48      	ldr	r3, [pc, #288]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	4a47      	ldr	r2, [pc, #284]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8081 	beq.w	8001e86 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d84:	4b42      	ldr	r3, [pc, #264]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d061      	beq.n	8001e54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d146      	bne.n	8001e26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d98:	4b3f      	ldr	r3, [pc, #252]	; (8001e98 <HAL_RCC_OscConfig+0x4fc>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7ff fb23 	bl	80013e8 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da6:	f7ff fb1f 	bl	80013e8 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e067      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db8:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f0      	bne.n	8001da6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dcc:	d108      	bne.n	8001de0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dce:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	492d      	ldr	r1, [pc, #180]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de0:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a19      	ldr	r1, [r3, #32]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	430b      	orrs	r3, r1
 8001df2:	4927      	ldr	r1, [pc, #156]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df8:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <HAL_RCC_OscConfig+0x4fc>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7ff faf3 	bl	80013e8 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e06:	f7ff faef 	bl	80013e8 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e037      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e18:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x46a>
 8001e24:	e02f      	b.n	8001e86 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e26:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <HAL_RCC_OscConfig+0x4fc>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fadc 	bl	80013e8 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e34:	f7ff fad8 	bl	80013e8 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e020      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x498>
 8001e52:	e018      	b.n	8001e86 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e013      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d106      	bne.n	8001e82 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d001      	beq.n	8001e86 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40007000 	.word	0x40007000
 8001e98:	42420060 	.word	0x42420060

08001e9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0d0      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b6a      	ldr	r3, [pc, #424]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d910      	bls.n	8001ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b67      	ldr	r3, [pc, #412]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 0207 	bic.w	r2, r3, #7
 8001ec6:	4965      	ldr	r1, [pc, #404]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b63      	ldr	r3, [pc, #396]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0b8      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d020      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef8:	4b59      	ldr	r3, [pc, #356]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a58      	ldr	r2, [pc, #352]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f10:	4b53      	ldr	r3, [pc, #332]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f1c:	4b50      	ldr	r3, [pc, #320]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	494d      	ldr	r1, [pc, #308]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d040      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	4b47      	ldr	r3, [pc, #284]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d115      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e07f      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5a:	4b41      	ldr	r3, [pc, #260]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e073      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6a:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e06b      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f7a:	4b39      	ldr	r3, [pc, #228]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f023 0203 	bic.w	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4936      	ldr	r1, [pc, #216]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f8c:	f7ff fa2c 	bl	80013e8 <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f94:	f7ff fa28 	bl	80013e8 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e053      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 020c 	and.w	r2, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1eb      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d210      	bcs.n	8001fec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b24      	ldr	r3, [pc, #144]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 0207 	bic.w	r2, r3, #7
 8001fd2:	4922      	ldr	r1, [pc, #136]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e032      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4916      	ldr	r1, [pc, #88]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002016:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	490e      	ldr	r1, [pc, #56]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800202a:	f000 f821 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 800202e:	4602      	mov	r2, r0
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	490a      	ldr	r1, [pc, #40]	; (8002064 <HAL_RCC_ClockConfig+0x1c8>)
 800203c:	5ccb      	ldrb	r3, [r1, r3]
 800203e:	fa22 f303 	lsr.w	r3, r2, r3
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <HAL_RCC_ClockConfig+0x1cc>)
 8002044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_RCC_ClockConfig+0x1d0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff f98a 	bl	8001364 <HAL_InitTick>

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40022000 	.word	0x40022000
 8002060:	40021000 	.word	0x40021000
 8002064:	0800297c 	.word	0x0800297c
 8002068:	20000038 	.word	0x20000038
 800206c:	2000003c 	.word	0x2000003c

08002070 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800208a:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <HAL_RCC_GetSysClockFreq+0x94>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b04      	cmp	r3, #4
 8002098:	d002      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x30>
 800209a:	2b08      	cmp	r3, #8
 800209c:	d003      	beq.n	80020a6 <HAL_RCC_GetSysClockFreq+0x36>
 800209e:	e027      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_RCC_GetSysClockFreq+0x98>)
 80020a2:	613b      	str	r3, [r7, #16]
      break;
 80020a4:	e027      	b.n	80020f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	0c9b      	lsrs	r3, r3, #18
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	4a17      	ldr	r2, [pc, #92]	; (800210c <HAL_RCC_GetSysClockFreq+0x9c>)
 80020b0:	5cd3      	ldrb	r3, [r2, r3]
 80020b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d010      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <HAL_RCC_GetSysClockFreq+0x94>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	0c5b      	lsrs	r3, r3, #17
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	4a11      	ldr	r2, [pc, #68]	; (8002110 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a0d      	ldr	r2, [pc, #52]	; (8002108 <HAL_RCC_GetSysClockFreq+0x98>)
 80020d2:	fb02 f203 	mul.w	r2, r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	e004      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a0c      	ldr	r2, [pc, #48]	; (8002114 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020e4:	fb02 f303 	mul.w	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	613b      	str	r3, [r7, #16]
      break;
 80020ee:	e002      	b.n	80020f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_RCC_GetSysClockFreq+0x98>)
 80020f2:	613b      	str	r3, [r7, #16]
      break;
 80020f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f6:	693b      	ldr	r3, [r7, #16]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	371c      	adds	r7, #28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	007a1200 	.word	0x007a1200
 800210c:	0800298c 	.word	0x0800298c
 8002110:	0800299c 	.word	0x0800299c
 8002114:	003d0900 	.word	0x003d0900

08002118 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <RCC_Delay+0x34>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <RCC_Delay+0x38>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	0a5b      	lsrs	r3, r3, #9
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	fb02 f303 	mul.w	r3, r2, r3
 8002132:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002134:	bf00      	nop
  }
  while (Delay --);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1e5a      	subs	r2, r3, #1
 800213a:	60fa      	str	r2, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f9      	bne.n	8002134 <RCC_Delay+0x1c>
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	20000038 	.word	0x20000038
 8002150:	10624dd3 	.word	0x10624dd3

08002154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e041      	b.n	80021ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe ff22 	bl	8000fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3304      	adds	r3, #4
 8002190:	4619      	mov	r1, r3
 8002192:	4610      	mov	r0, r2
 8002194:	f000 fa56 	bl	8002644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b01      	cmp	r3, #1
 8002206:	d001      	beq.n	800220c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e035      	b.n	8002278 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a16      	ldr	r2, [pc, #88]	; (8002284 <HAL_TIM_Base_Start_IT+0x90>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d009      	beq.n	8002242 <HAL_TIM_Base_Start_IT+0x4e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002236:	d004      	beq.n	8002242 <HAL_TIM_Base_Start_IT+0x4e>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a12      	ldr	r2, [pc, #72]	; (8002288 <HAL_TIM_Base_Start_IT+0x94>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d111      	bne.n	8002266 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2b06      	cmp	r3, #6
 8002252:	d010      	beq.n	8002276 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002264:	e007      	b.n	8002276 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40012c00 	.word	0x40012c00
 8002288:	40000400 	.word	0x40000400

0800228c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d020      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d01b      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0202 	mvn.w	r2, #2
 80022c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f998 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 80022dc:	e005      	b.n	80022ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f98b 	bl	80025fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f99a 	bl	800261e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d020      	beq.n	800233c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01b      	beq.n	800233c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0204 	mvn.w	r2, #4
 800230c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2202      	movs	r2, #2
 8002312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f972 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 8002328:	e005      	b.n	8002336 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f965 	bl	80025fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f974 	bl	800261e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d020      	beq.n	8002388 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01b      	beq.n	8002388 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0208 	mvn.w	r2, #8
 8002358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2204      	movs	r2, #4
 800235e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f94c 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 8002374:	e005      	b.n	8002382 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f93f 	bl	80025fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f94e 	bl	800261e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	2b00      	cmp	r3, #0
 8002390:	d020      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01b      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0210 	mvn.w	r2, #16
 80023a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2208      	movs	r2, #8
 80023aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f926 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 80023c0:	e005      	b.n	80023ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f919 	bl	80025fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f928 	bl	800261e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00c      	beq.n	80023f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d007      	beq.n	80023f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0201 	mvn.w	r2, #1
 80023f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7fe fed8 	bl	80011a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00c      	beq.n	800241c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fa6f 	bl	80028fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00c      	beq.n	8002440 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	d007      	beq.n	8002440 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f8f8 	bl	8002630 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00c      	beq.n	8002464 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0220 	mvn.w	r2, #32
 800245c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fa42 	bl	80028e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_TIM_ConfigClockSource+0x1c>
 8002484:	2302      	movs	r3, #2
 8002486:	e0b4      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x186>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c0:	d03e      	beq.n	8002540 <HAL_TIM_ConfigClockSource+0xd4>
 80024c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c6:	f200 8087 	bhi.w	80025d8 <HAL_TIM_ConfigClockSource+0x16c>
 80024ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ce:	f000 8086 	beq.w	80025de <HAL_TIM_ConfigClockSource+0x172>
 80024d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d6:	d87f      	bhi.n	80025d8 <HAL_TIM_ConfigClockSource+0x16c>
 80024d8:	2b70      	cmp	r3, #112	; 0x70
 80024da:	d01a      	beq.n	8002512 <HAL_TIM_ConfigClockSource+0xa6>
 80024dc:	2b70      	cmp	r3, #112	; 0x70
 80024de:	d87b      	bhi.n	80025d8 <HAL_TIM_ConfigClockSource+0x16c>
 80024e0:	2b60      	cmp	r3, #96	; 0x60
 80024e2:	d050      	beq.n	8002586 <HAL_TIM_ConfigClockSource+0x11a>
 80024e4:	2b60      	cmp	r3, #96	; 0x60
 80024e6:	d877      	bhi.n	80025d8 <HAL_TIM_ConfigClockSource+0x16c>
 80024e8:	2b50      	cmp	r3, #80	; 0x50
 80024ea:	d03c      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0xfa>
 80024ec:	2b50      	cmp	r3, #80	; 0x50
 80024ee:	d873      	bhi.n	80025d8 <HAL_TIM_ConfigClockSource+0x16c>
 80024f0:	2b40      	cmp	r3, #64	; 0x40
 80024f2:	d058      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0x13a>
 80024f4:	2b40      	cmp	r3, #64	; 0x40
 80024f6:	d86f      	bhi.n	80025d8 <HAL_TIM_ConfigClockSource+0x16c>
 80024f8:	2b30      	cmp	r3, #48	; 0x30
 80024fa:	d064      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0x15a>
 80024fc:	2b30      	cmp	r3, #48	; 0x30
 80024fe:	d86b      	bhi.n	80025d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002500:	2b20      	cmp	r3, #32
 8002502:	d060      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002504:	2b20      	cmp	r3, #32
 8002506:	d867      	bhi.n	80025d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002508:	2b00      	cmp	r3, #0
 800250a:	d05c      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0x15a>
 800250c:	2b10      	cmp	r3, #16
 800250e:	d05a      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002510:	e062      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6818      	ldr	r0, [r3, #0]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	6899      	ldr	r1, [r3, #8]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f000 f96a 	bl	80027fa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002534:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	609a      	str	r2, [r3, #8]
      break;
 800253e:	e04f      	b.n	80025e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	6899      	ldr	r1, [r3, #8]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f000 f953 	bl	80027fa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002562:	609a      	str	r2, [r3, #8]
      break;
 8002564:	e03c      	b.n	80025e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	6859      	ldr	r1, [r3, #4]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	461a      	mov	r2, r3
 8002574:	f000 f8ca 	bl	800270c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2150      	movs	r1, #80	; 0x50
 800257e:	4618      	mov	r0, r3
 8002580:	f000 f921 	bl	80027c6 <TIM_ITRx_SetConfig>
      break;
 8002584:	e02c      	b.n	80025e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6859      	ldr	r1, [r3, #4]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	461a      	mov	r2, r3
 8002594:	f000 f8e8 	bl	8002768 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2160      	movs	r1, #96	; 0x60
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f911 	bl	80027c6 <TIM_ITRx_SetConfig>
      break;
 80025a4:	e01c      	b.n	80025e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6859      	ldr	r1, [r3, #4]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	461a      	mov	r2, r3
 80025b4:	f000 f8aa 	bl	800270c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2140      	movs	r1, #64	; 0x40
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f901 	bl	80027c6 <TIM_ITRx_SetConfig>
      break;
 80025c4:	e00c      	b.n	80025e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4619      	mov	r1, r3
 80025d0:	4610      	mov	r0, r2
 80025d2:	f000 f8f8 	bl	80027c6 <TIM_ITRx_SetConfig>
      break;
 80025d6:	e003      	b.n	80025e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
      break;
 80025dc:	e000      	b.n	80025e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr

0800261e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
	...

08002644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a2b      	ldr	r2, [pc, #172]	; (8002704 <TIM_Base_SetConfig+0xc0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d007      	beq.n	800266c <TIM_Base_SetConfig+0x28>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002662:	d003      	beq.n	800266c <TIM_Base_SetConfig+0x28>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a28      	ldr	r2, [pc, #160]	; (8002708 <TIM_Base_SetConfig+0xc4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d108      	bne.n	800267e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a20      	ldr	r2, [pc, #128]	; (8002704 <TIM_Base_SetConfig+0xc0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <TIM_Base_SetConfig+0x52>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800268c:	d003      	beq.n	8002696 <TIM_Base_SetConfig+0x52>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a1d      	ldr	r2, [pc, #116]	; (8002708 <TIM_Base_SetConfig+0xc4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d108      	bne.n	80026a8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <TIM_Base_SetConfig+0xc0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d103      	bne.n	80026dc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f023 0201 	bic.w	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	611a      	str	r2, [r3, #16]
  }
}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	40012c00 	.word	0x40012c00
 8002708:	40000400 	.word	0x40000400

0800270c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	f023 0201 	bic.w	r2, r3, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f023 030a 	bic.w	r3, r3, #10
 8002748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	621a      	str	r2, [r3, #32]
}
 800275e:	bf00      	nop
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	f023 0210 	bic.w	r2, r3, #16
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	031b      	lsls	r3, r3, #12
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	621a      	str	r2, [r3, #32]
}
 80027bc:	bf00      	nop
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f043 0307 	orr.w	r3, r3, #7
 80027e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	609a      	str	r2, [r3, #8]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b087      	sub	sp, #28
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002814:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	021a      	lsls	r2, r3, #8
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	431a      	orrs	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	4313      	orrs	r3, r2
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	609a      	str	r2, [r3, #8]
}
 800282e:	bf00      	nop
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800284c:	2302      	movs	r3, #2
 800284e:	e041      	b.n	80028d4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d009      	beq.n	80028a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289c:	d004      	beq.n	80028a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a10      	ldr	r2, [pc, #64]	; (80028e4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d10c      	bne.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40000400 	.word	0x40000400

080028e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <__libc_init_array>:
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	2600      	movs	r6, #0
 8002910:	4d0c      	ldr	r5, [pc, #48]	; (8002944 <__libc_init_array+0x38>)
 8002912:	4c0d      	ldr	r4, [pc, #52]	; (8002948 <__libc_init_array+0x3c>)
 8002914:	1b64      	subs	r4, r4, r5
 8002916:	10a4      	asrs	r4, r4, #2
 8002918:	42a6      	cmp	r6, r4
 800291a:	d109      	bne.n	8002930 <__libc_init_array+0x24>
 800291c:	f000 f822 	bl	8002964 <_init>
 8002920:	2600      	movs	r6, #0
 8002922:	4d0a      	ldr	r5, [pc, #40]	; (800294c <__libc_init_array+0x40>)
 8002924:	4c0a      	ldr	r4, [pc, #40]	; (8002950 <__libc_init_array+0x44>)
 8002926:	1b64      	subs	r4, r4, r5
 8002928:	10a4      	asrs	r4, r4, #2
 800292a:	42a6      	cmp	r6, r4
 800292c:	d105      	bne.n	800293a <__libc_init_array+0x2e>
 800292e:	bd70      	pop	{r4, r5, r6, pc}
 8002930:	f855 3b04 	ldr.w	r3, [r5], #4
 8002934:	4798      	blx	r3
 8002936:	3601      	adds	r6, #1
 8002938:	e7ee      	b.n	8002918 <__libc_init_array+0xc>
 800293a:	f855 3b04 	ldr.w	r3, [r5], #4
 800293e:	4798      	blx	r3
 8002940:	3601      	adds	r6, #1
 8002942:	e7f2      	b.n	800292a <__libc_init_array+0x1e>
 8002944:	080029a0 	.word	0x080029a0
 8002948:	080029a0 	.word	0x080029a0
 800294c:	080029a0 	.word	0x080029a0
 8002950:	080029a4 	.word	0x080029a4

08002954 <memset>:
 8002954:	4603      	mov	r3, r0
 8002956:	4402      	add	r2, r0
 8002958:	4293      	cmp	r3, r2
 800295a:	d100      	bne.n	800295e <memset+0xa>
 800295c:	4770      	bx	lr
 800295e:	f803 1b01 	strb.w	r1, [r3], #1
 8002962:	e7f9      	b.n	8002958 <memset+0x4>

08002964 <_init>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	bf00      	nop
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr

08002970 <_fini>:
 8002970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002972:	bf00      	nop
 8002974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002976:	bc08      	pop	{r3}
 8002978:	469e      	mov	lr, r3
 800297a:	4770      	bx	lr
