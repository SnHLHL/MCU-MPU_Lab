
Ex2_10_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f5c  08002f5c  00012f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f80  08002f80  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08002f80  08002f80  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f80  08002f80  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f80  08002f80  00012f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f84  08002f84  00012f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08002f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000050  08002fd8  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08002fd8  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ef8  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c92  00000000  00000000  00029f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002bc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002c6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017478  00000000  00000000  0002d018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da5f  00000000  00000000  00044490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008267e  00000000  00000000  00051eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d456d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000290c  00000000  00000000  000d45c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f44 	.word	0x08002f44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	08002f44 	.word	0x08002f44

0800014c <fsm_automatic_run>:
 */

#include "fsm_automatic.h"


void fsm_automatic_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status){
 8000150:	4b91      	ldr	r3, [pc, #580]	; (8000398 <fsm_automatic_run+0x24c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b04      	cmp	r3, #4
 8000158:	f200 8202 	bhi.w	8000560 <fsm_automatic_run+0x414>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic_run+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000179 	.word	0x08000179
 8000168:	080001e3 	.word	0x080001e3
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080003c9 	.word	0x080003c9
 8000174:	0800049f 	.word	0x0800049f
	case INIT:
		//-----INIT: the status is assigned AUTO_RED_GREEN-----//
		//assign timeRED, timeGREEN, timeAMBER
		//assign tmpRED, tmpAMBER, tmpGREEN
		setTrafficOff();
 8000178:	f001 fb96 	bl	80018a8 <setTrafficOff>
		status = AUTO_RED_GREEN;
 800017c:	4b86      	ldr	r3, [pc, #536]	; (8000398 <fsm_automatic_run+0x24c>)
 800017e:	2202      	movs	r2, #2
 8000180:	601a      	str	r2, [r3, #0]
		setTimer1(defaultTimeGreen*1000); //Multiply by 1000 as we input with unit second
 8000182:	4b86      	ldr	r3, [pc, #536]	; (800039c <fsm_automatic_run+0x250>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800018a:	fb02 f303 	mul.w	r3, r2, r3
 800018e:	4618      	mov	r0, r3
 8000190:	f001 fa34 	bl	80015fc <setTimer1>
		timeRED = defaultTimeRed;
 8000194:	4b82      	ldr	r3, [pc, #520]	; (80003a0 <fsm_automatic_run+0x254>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a82      	ldr	r2, [pc, #520]	; (80003a4 <fsm_automatic_run+0x258>)
 800019a:	6013      	str	r3, [r2, #0]
		timeGREEN = defaultTimeGreen;
 800019c:	4b7f      	ldr	r3, [pc, #508]	; (800039c <fsm_automatic_run+0x250>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a81      	ldr	r2, [pc, #516]	; (80003a8 <fsm_automatic_run+0x25c>)
 80001a2:	6013      	str	r3, [r2, #0]
		tmpRED = defaultTimeRed;
 80001a4:	4b7e      	ldr	r3, [pc, #504]	; (80003a0 <fsm_automatic_run+0x254>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a80      	ldr	r2, [pc, #512]	; (80003ac <fsm_automatic_run+0x260>)
 80001aa:	6013      	str	r3, [r2, #0]
		tmpAMBER = defaultTimeAmber;
 80001ac:	4b80      	ldr	r3, [pc, #512]	; (80003b0 <fsm_automatic_run+0x264>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a80      	ldr	r2, [pc, #512]	; (80003b4 <fsm_automatic_run+0x268>)
 80001b2:	6013      	str	r3, [r2, #0]
		tmpGREEN = defaultTimeGreen;
 80001b4:	4b79      	ldr	r3, [pc, #484]	; (800039c <fsm_automatic_run+0x250>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a7f      	ldr	r2, [pc, #508]	; (80003b8 <fsm_automatic_run+0x26c>)
 80001ba:	6013      	str	r3, [r2, #0]
		setTimer2(1000);
 80001bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001c0:	f001 fa38 	bl	8001634 <setTimer2>
		updateClockBuffer(timeRED--, timeGREEN--);
 80001c4:	4b77      	ldr	r3, [pc, #476]	; (80003a4 <fsm_automatic_run+0x258>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	1e5a      	subs	r2, r3, #1
 80001ca:	4976      	ldr	r1, [pc, #472]	; (80003a4 <fsm_automatic_run+0x258>)
 80001cc:	600a      	str	r2, [r1, #0]
 80001ce:	4a76      	ldr	r2, [pc, #472]	; (80003a8 <fsm_automatic_run+0x25c>)
 80001d0:	6812      	ldr	r2, [r2, #0]
 80001d2:	1e51      	subs	r1, r2, #1
 80001d4:	4874      	ldr	r0, [pc, #464]	; (80003a8 <fsm_automatic_run+0x25c>)
 80001d6:	6001      	str	r1, [r0, #0]
 80001d8:	4611      	mov	r1, r2
 80001da:	4618      	mov	r0, r3
 80001dc:	f000 ff12 	bl	8001004 <updateClockBuffer>
		break;
 80001e0:	e1c7      	b.n	8000572 <fsm_automatic_run+0x426>
		//-----AUTO_RED_GREEN: Red LEDs in Road 1 is ON while Green LEDs in Road 2 is ON-----//
		//if timer1_flag = 1, switch the green light to amber light by status AUTO_RED_AMBER
		//and update the ClockBuffer for displaying the timer for Amber and Red
		//if timer2_flag = 1, update and start counting timer for Red and Green
		//if BUTTON1 is pressed, move to MAN_MODE2
		setTrafficRed1();
 80001e2:	f001 fad1 	bl	8001788 <setTrafficRed1>
		setTrafficGreen2();
 80001e6:	f001 fb47 	bl	8001878 <setTrafficGreen2>
		if(timer1_flag == 1){
 80001ea:	4b74      	ldr	r3, [pc, #464]	; (80003bc <fsm_automatic_run+0x270>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	2b01      	cmp	r3, #1
 80001f0:	d121      	bne.n	8000236 <fsm_automatic_run+0xea>
			status = AUTO_RED_AMBER;
 80001f2:	4b69      	ldr	r3, [pc, #420]	; (8000398 <fsm_automatic_run+0x24c>)
 80001f4:	2203      	movs	r2, #3
 80001f6:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeAmber*1000);
 80001f8:	4b6d      	ldr	r3, [pc, #436]	; (80003b0 <fsm_automatic_run+0x264>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000200:	fb02 f303 	mul.w	r3, r2, r3
 8000204:	4618      	mov	r0, r3
 8000206:	f001 f9f9 	bl	80015fc <setTimer1>
			timeAMBER = defaultTimeAmber;
 800020a:	4b69      	ldr	r3, [pc, #420]	; (80003b0 <fsm_automatic_run+0x264>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a6c      	ldr	r2, [pc, #432]	; (80003c0 <fsm_automatic_run+0x274>)
 8000210:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeRED--,timeAMBER--);
 8000212:	4b64      	ldr	r3, [pc, #400]	; (80003a4 <fsm_automatic_run+0x258>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	1e5a      	subs	r2, r3, #1
 8000218:	4962      	ldr	r1, [pc, #392]	; (80003a4 <fsm_automatic_run+0x258>)
 800021a:	600a      	str	r2, [r1, #0]
 800021c:	4a68      	ldr	r2, [pc, #416]	; (80003c0 <fsm_automatic_run+0x274>)
 800021e:	6812      	ldr	r2, [r2, #0]
 8000220:	1e51      	subs	r1, r2, #1
 8000222:	4867      	ldr	r0, [pc, #412]	; (80003c0 <fsm_automatic_run+0x274>)
 8000224:	6001      	str	r1, [r0, #0]
 8000226:	4611      	mov	r1, r2
 8000228:	4618      	mov	r0, r3
 800022a:	f000 feeb 	bl	8001004 <updateClockBuffer>
			setTimer2(1000);
 800022e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000232:	f001 f9ff 	bl	8001634 <setTimer2>
		}
		if(timer2_flag == 1){
 8000236:	4b63      	ldr	r3, [pc, #396]	; (80003c4 <fsm_automatic_run+0x278>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	2b01      	cmp	r3, #1
 800023c:	d111      	bne.n	8000262 <fsm_automatic_run+0x116>
			updateClockBuffer(timeRED--,timeGREEN--);
 800023e:	4b59      	ldr	r3, [pc, #356]	; (80003a4 <fsm_automatic_run+0x258>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	1e5a      	subs	r2, r3, #1
 8000244:	4957      	ldr	r1, [pc, #348]	; (80003a4 <fsm_automatic_run+0x258>)
 8000246:	600a      	str	r2, [r1, #0]
 8000248:	4a57      	ldr	r2, [pc, #348]	; (80003a8 <fsm_automatic_run+0x25c>)
 800024a:	6812      	ldr	r2, [r2, #0]
 800024c:	1e51      	subs	r1, r2, #1
 800024e:	4856      	ldr	r0, [pc, #344]	; (80003a8 <fsm_automatic_run+0x25c>)
 8000250:	6001      	str	r1, [r0, #0]
 8000252:	4611      	mov	r1, r2
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fed5 	bl	8001004 <updateClockBuffer>
			setTimer2(1000);
 800025a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800025e:	f001 f9e9 	bl	8001634 <setTimer2>
		}
		if(is_button_pressed_short(0) == 1){
 8000262:	2000      	movs	r0, #0
 8000264:	f000 fe72 	bl	8000f4c <is_button_pressed_short>
 8000268:	4603      	mov	r3, r0
 800026a:	2b01      	cmp	r3, #1
 800026c:	d10a      	bne.n	8000284 <fsm_automatic_run+0x138>
			setTimer1(500);
 800026e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000272:	f001 f9c3 	bl	80015fc <setTimer1>
			status = MAN_MODE2;
 8000276:	4b48      	ldr	r3, [pc, #288]	; (8000398 <fsm_automatic_run+0x24c>)
 8000278:	220b      	movs	r2, #11
 800027a:	601a      	str	r2, [r3, #0]
			setTimer4(5000);
 800027c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000280:	f001 fa10 	bl	80016a4 <setTimer4>
		}
		if(is_button_pressed_1s(0) == 1){
 8000284:	2000      	movs	r0, #0
 8000286:	f000 fe7f 	bl	8000f88 <is_button_pressed_1s>
 800028a:	4603      	mov	r3, r0
 800028c:	2b01      	cmp	r3, #1
 800028e:	d105      	bne.n	800029c <fsm_automatic_run+0x150>
			setTimer1(250);
 8000290:	20fa      	movs	r0, #250	; 0xfa
 8000292:	f001 f9b3 	bl	80015fc <setTimer1>
			status = MAN_MODE2;
 8000296:	4b40      	ldr	r3, [pc, #256]	; (8000398 <fsm_automatic_run+0x24c>)
 8000298:	220b      	movs	r2, #11
 800029a:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed_short(1) == 1){
 800029c:	2001      	movs	r0, #1
 800029e:	f000 fe55 	bl	8000f4c <is_button_pressed_short>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	f040 815d 	bne.w	8000564 <fsm_automatic_run+0x418>
			setTimer1(1000);
 80002aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ae:	f001 f9a5 	bl	80015fc <setTimer1>
			status = SET_MODE1;
 80002b2:	4b39      	ldr	r3, [pc, #228]	; (8000398 <fsm_automatic_run+0x24c>)
 80002b4:	220e      	movs	r2, #14
 80002b6:	601a      	str	r2, [r3, #0]
		}
		break;
 80002b8:	e154      	b.n	8000564 <fsm_automatic_run+0x418>
		//-----AUTO_RED_AMBER: Red LEDs in Road 1 is ON while Amber LEDs in Road 2 is ON-----//
		//if timer1_flag = 1, switch the red light to green light; and amber light to red light by status AUTO_GREEN_RED
		//and update the ClockBuffer for displaying the timer for Green and Red
		//if timer2_flag = 1, update and start counting timer for Red and Amber
		//if BUTTON1 is pressed, move to MAN_MODE2
		setTrafficRed1();
 80002ba:	f001 fa65 	bl	8001788 <setTrafficRed1>
		setTrafficAmber2();
 80002be:	f001 fac3 	bl	8001848 <setTrafficAmber2>
		if(timer1_flag == 1){
 80002c2:	4b3e      	ldr	r3, [pc, #248]	; (80003bc <fsm_automatic_run+0x270>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d125      	bne.n	8000316 <fsm_automatic_run+0x1ca>
			status = AUTO_GREEN_RED;
 80002ca:	4b33      	ldr	r3, [pc, #204]	; (8000398 <fsm_automatic_run+0x24c>)
 80002cc:	2204      	movs	r2, #4
 80002ce:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeGreen*1000);
 80002d0:	4b32      	ldr	r3, [pc, #200]	; (800039c <fsm_automatic_run+0x250>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002d8:	fb02 f303 	mul.w	r3, r2, r3
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 f98d 	bl	80015fc <setTimer1>
			timeGREEN = defaultTimeGreen;
 80002e2:	4b2e      	ldr	r3, [pc, #184]	; (800039c <fsm_automatic_run+0x250>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a30      	ldr	r2, [pc, #192]	; (80003a8 <fsm_automatic_run+0x25c>)
 80002e8:	6013      	str	r3, [r2, #0]
			timeRED = defaultTimeRed;
 80002ea:	4b2d      	ldr	r3, [pc, #180]	; (80003a0 <fsm_automatic_run+0x254>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a2d      	ldr	r2, [pc, #180]	; (80003a4 <fsm_automatic_run+0x258>)
 80002f0:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeGREEN--,timeRED--);
 80002f2:	4b2d      	ldr	r3, [pc, #180]	; (80003a8 <fsm_automatic_run+0x25c>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	1e5a      	subs	r2, r3, #1
 80002f8:	492b      	ldr	r1, [pc, #172]	; (80003a8 <fsm_automatic_run+0x25c>)
 80002fa:	600a      	str	r2, [r1, #0]
 80002fc:	4a29      	ldr	r2, [pc, #164]	; (80003a4 <fsm_automatic_run+0x258>)
 80002fe:	6812      	ldr	r2, [r2, #0]
 8000300:	1e51      	subs	r1, r2, #1
 8000302:	4828      	ldr	r0, [pc, #160]	; (80003a4 <fsm_automatic_run+0x258>)
 8000304:	6001      	str	r1, [r0, #0]
 8000306:	4611      	mov	r1, r2
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fe7b 	bl	8001004 <updateClockBuffer>
			setTimer2(1000);
 800030e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000312:	f001 f98f 	bl	8001634 <setTimer2>
		}
		if(timer2_flag == 1){
 8000316:	4b2b      	ldr	r3, [pc, #172]	; (80003c4 <fsm_automatic_run+0x278>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d111      	bne.n	8000342 <fsm_automatic_run+0x1f6>
			updateClockBuffer(timeRED--,timeAMBER--);
 800031e:	4b21      	ldr	r3, [pc, #132]	; (80003a4 <fsm_automatic_run+0x258>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	491f      	ldr	r1, [pc, #124]	; (80003a4 <fsm_automatic_run+0x258>)
 8000326:	600a      	str	r2, [r1, #0]
 8000328:	4a25      	ldr	r2, [pc, #148]	; (80003c0 <fsm_automatic_run+0x274>)
 800032a:	6812      	ldr	r2, [r2, #0]
 800032c:	1e51      	subs	r1, r2, #1
 800032e:	4824      	ldr	r0, [pc, #144]	; (80003c0 <fsm_automatic_run+0x274>)
 8000330:	6001      	str	r1, [r0, #0]
 8000332:	4611      	mov	r1, r2
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fe65 	bl	8001004 <updateClockBuffer>
			setTimer2(1000);
 800033a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800033e:	f001 f979 	bl	8001634 <setTimer2>
		}
		if(is_button_pressed_short(0) == 1){
 8000342:	2000      	movs	r0, #0
 8000344:	f000 fe02 	bl	8000f4c <is_button_pressed_short>
 8000348:	4603      	mov	r3, r0
 800034a:	2b01      	cmp	r3, #1
 800034c:	d109      	bne.n	8000362 <fsm_automatic_run+0x216>
			setTimer1(250);
 800034e:	20fa      	movs	r0, #250	; 0xfa
 8000350:	f001 f954 	bl	80015fc <setTimer1>
			status = MAN_MODE2;
 8000354:	4b10      	ldr	r3, [pc, #64]	; (8000398 <fsm_automatic_run+0x24c>)
 8000356:	220b      	movs	r2, #11
 8000358:	601a      	str	r2, [r3, #0]
			setTimer4(5000);
 800035a:	f241 3088 	movw	r0, #5000	; 0x1388
 800035e:	f001 f9a1 	bl	80016a4 <setTimer4>
		}
		if(is_button_pressed_1s(0) == 1){
 8000362:	2000      	movs	r0, #0
 8000364:	f000 fe10 	bl	8000f88 <is_button_pressed_1s>
 8000368:	4603      	mov	r3, r0
 800036a:	2b01      	cmp	r3, #1
 800036c:	d105      	bne.n	800037a <fsm_automatic_run+0x22e>
			setTimer1(250);
 800036e:	20fa      	movs	r0, #250	; 0xfa
 8000370:	f001 f944 	bl	80015fc <setTimer1>
			status = MAN_MODE2;
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <fsm_automatic_run+0x24c>)
 8000376:	220b      	movs	r2, #11
 8000378:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed_short(1) == 1){
 800037a:	2001      	movs	r0, #1
 800037c:	f000 fde6 	bl	8000f4c <is_button_pressed_short>
 8000380:	4603      	mov	r3, r0
 8000382:	2b01      	cmp	r3, #1
 8000384:	f040 80f0 	bne.w	8000568 <fsm_automatic_run+0x41c>
			setTimer1(1000);
 8000388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800038c:	f001 f936 	bl	80015fc <setTimer1>
			status = SET_MODE1;
 8000390:	4b01      	ldr	r3, [pc, #4]	; (8000398 <fsm_automatic_run+0x24c>)
 8000392:	220e      	movs	r2, #14
 8000394:	601a      	str	r2, [r3, #0]
		}
		break;
 8000396:	e0e7      	b.n	8000568 <fsm_automatic_run+0x41c>
 8000398:	20000070 	.word	0x20000070
 800039c:	20000010 	.word	0x20000010
 80003a0:	2000000c 	.word	0x2000000c
 80003a4:	20000000 	.word	0x20000000
 80003a8:	20000004 	.word	0x20000004
 80003ac:	20000024 	.word	0x20000024
 80003b0:	20000014 	.word	0x20000014
 80003b4:	2000002c 	.word	0x2000002c
 80003b8:	20000028 	.word	0x20000028
 80003bc:	200000b4 	.word	0x200000b4
 80003c0:	20000008 	.word	0x20000008
 80003c4:	200000bc 	.word	0x200000bc
		//-----AUTO_GREEN_RED: Green LEDs in Road 1 is ON while Red LEDs in Road 2 is ON-----//
		//if timer1_flag = 1, switch the green light to red light by status AUTO_AMBER_RED
		//and update the ClockBuffer for displaying the timer for Amber and Red
		//if timer2_flag = 1, update and start counting timer for Green and Red
		//if BUTTON1 is pressed, move to MAN_MODE2
		setTrafficGreen1();
 80003c8:	f001 fa0e 	bl	80017e8 <setTrafficGreen1>
		setTrafficRed2();
 80003cc:	f001 fa24 	bl	8001818 <setTrafficRed2>
		if(timer1_flag == 1){
 80003d0:	4b69      	ldr	r3, [pc, #420]	; (8000578 <fsm_automatic_run+0x42c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d121      	bne.n	800041c <fsm_automatic_run+0x2d0>
			status = AUTO_AMBER_RED;
 80003d8:	4b68      	ldr	r3, [pc, #416]	; (800057c <fsm_automatic_run+0x430>)
 80003da:	2205      	movs	r2, #5
 80003dc:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeAmber*1000);
 80003de:	4b68      	ldr	r3, [pc, #416]	; (8000580 <fsm_automatic_run+0x434>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003e6:	fb02 f303 	mul.w	r3, r2, r3
 80003ea:	4618      	mov	r0, r3
 80003ec:	f001 f906 	bl	80015fc <setTimer1>
			timeAMBER = defaultTimeAmber;
 80003f0:	4b63      	ldr	r3, [pc, #396]	; (8000580 <fsm_automatic_run+0x434>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a63      	ldr	r2, [pc, #396]	; (8000584 <fsm_automatic_run+0x438>)
 80003f6:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeAMBER--,timeRED--);
 80003f8:	4b62      	ldr	r3, [pc, #392]	; (8000584 <fsm_automatic_run+0x438>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	1e5a      	subs	r2, r3, #1
 80003fe:	4961      	ldr	r1, [pc, #388]	; (8000584 <fsm_automatic_run+0x438>)
 8000400:	600a      	str	r2, [r1, #0]
 8000402:	4a61      	ldr	r2, [pc, #388]	; (8000588 <fsm_automatic_run+0x43c>)
 8000404:	6812      	ldr	r2, [r2, #0]
 8000406:	1e51      	subs	r1, r2, #1
 8000408:	485f      	ldr	r0, [pc, #380]	; (8000588 <fsm_automatic_run+0x43c>)
 800040a:	6001      	str	r1, [r0, #0]
 800040c:	4611      	mov	r1, r2
 800040e:	4618      	mov	r0, r3
 8000410:	f000 fdf8 	bl	8001004 <updateClockBuffer>
			setTimer2(1000);
 8000414:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000418:	f001 f90c 	bl	8001634 <setTimer2>
		}
		if(timer2_flag == 1){
 800041c:	4b5b      	ldr	r3, [pc, #364]	; (800058c <fsm_automatic_run+0x440>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d111      	bne.n	8000448 <fsm_automatic_run+0x2fc>
			updateClockBuffer(timeGREEN--,timeRED--);
 8000424:	4b5a      	ldr	r3, [pc, #360]	; (8000590 <fsm_automatic_run+0x444>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	4959      	ldr	r1, [pc, #356]	; (8000590 <fsm_automatic_run+0x444>)
 800042c:	600a      	str	r2, [r1, #0]
 800042e:	4a56      	ldr	r2, [pc, #344]	; (8000588 <fsm_automatic_run+0x43c>)
 8000430:	6812      	ldr	r2, [r2, #0]
 8000432:	1e51      	subs	r1, r2, #1
 8000434:	4854      	ldr	r0, [pc, #336]	; (8000588 <fsm_automatic_run+0x43c>)
 8000436:	6001      	str	r1, [r0, #0]
 8000438:	4611      	mov	r1, r2
 800043a:	4618      	mov	r0, r3
 800043c:	f000 fde2 	bl	8001004 <updateClockBuffer>
			setTimer2(1000);
 8000440:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000444:	f001 f8f6 	bl	8001634 <setTimer2>
		}
		if(is_button_pressed_short(0) == 1){
 8000448:	2000      	movs	r0, #0
 800044a:	f000 fd7f 	bl	8000f4c <is_button_pressed_short>
 800044e:	4603      	mov	r3, r0
 8000450:	2b01      	cmp	r3, #1
 8000452:	d10a      	bne.n	800046a <fsm_automatic_run+0x31e>
			setTimer1(250);
 8000454:	20fa      	movs	r0, #250	; 0xfa
 8000456:	f001 f8d1 	bl	80015fc <setTimer1>
			status = MAN_MODE2;
 800045a:	4b48      	ldr	r3, [pc, #288]	; (800057c <fsm_automatic_run+0x430>)
 800045c:	220b      	movs	r2, #11
 800045e:	601a      	str	r2, [r3, #0]
			setTimer4(5000);
 8000460:	f241 3088 	movw	r0, #5000	; 0x1388
 8000464:	f001 f91e 	bl	80016a4 <setTimer4>
 8000468:	e00b      	b.n	8000482 <fsm_automatic_run+0x336>
		}
		else if(is_button_pressed_1s(0) == 1){
 800046a:	2000      	movs	r0, #0
 800046c:	f000 fd8c 	bl	8000f88 <is_button_pressed_1s>
 8000470:	4603      	mov	r3, r0
 8000472:	2b01      	cmp	r3, #1
 8000474:	d105      	bne.n	8000482 <fsm_automatic_run+0x336>
			setTimer1(250);
 8000476:	20fa      	movs	r0, #250	; 0xfa
 8000478:	f001 f8c0 	bl	80015fc <setTimer1>
			status = MAN_MODE2;
 800047c:	4b3f      	ldr	r3, [pc, #252]	; (800057c <fsm_automatic_run+0x430>)
 800047e:	220b      	movs	r2, #11
 8000480:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed_short(1) == 1){
 8000482:	2001      	movs	r0, #1
 8000484:	f000 fd62 	bl	8000f4c <is_button_pressed_short>
 8000488:	4603      	mov	r3, r0
 800048a:	2b01      	cmp	r3, #1
 800048c:	d16e      	bne.n	800056c <fsm_automatic_run+0x420>
			setTimer1(1000);
 800048e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000492:	f001 f8b3 	bl	80015fc <setTimer1>
			status = SET_MODE1;
 8000496:	4b39      	ldr	r3, [pc, #228]	; (800057c <fsm_automatic_run+0x430>)
 8000498:	220e      	movs	r2, #14
 800049a:	601a      	str	r2, [r3, #0]
		}
		break;
 800049c:	e066      	b.n	800056c <fsm_automatic_run+0x420>
		//-----AUTO_AMBER_RED: Amber LEDs in Road 1 is ON while Red LEDs in Road 2 is ON-----//
		//if timer1_flag = 1, switch the amber light to red light; and red light to green light by status AUTO_RED_GREEN
		//and update the ClockBuffer for displaying the timer for Red and Green
		//if timer2_flag = 1, update and start counting timer for Amber and Red
		//if BUTTON1 is pressed, move to MAN_MODE2
		setTrafficAmber1();
 800049e:	f001 f98b 	bl	80017b8 <setTrafficAmber1>
		setTrafficRed2();
 80004a2:	f001 f9b9 	bl	8001818 <setTrafficRed2>
		if(timer1_flag == 1){
 80004a6:	4b34      	ldr	r3, [pc, #208]	; (8000578 <fsm_automatic_run+0x42c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d125      	bne.n	80004fa <fsm_automatic_run+0x3ae>
			status = AUTO_RED_GREEN;
 80004ae:	4b33      	ldr	r3, [pc, #204]	; (800057c <fsm_automatic_run+0x430>)
 80004b0:	2202      	movs	r2, #2
 80004b2:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeGreen*1000);
 80004b4:	4b37      	ldr	r3, [pc, #220]	; (8000594 <fsm_automatic_run+0x448>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004bc:	fb02 f303 	mul.w	r3, r2, r3
 80004c0:	4618      	mov	r0, r3
 80004c2:	f001 f89b 	bl	80015fc <setTimer1>
			timeRED = defaultTimeRed;
 80004c6:	4b34      	ldr	r3, [pc, #208]	; (8000598 <fsm_automatic_run+0x44c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a2f      	ldr	r2, [pc, #188]	; (8000588 <fsm_automatic_run+0x43c>)
 80004cc:	6013      	str	r3, [r2, #0]
			timeGREEN = defaultTimeGreen;
 80004ce:	4b31      	ldr	r3, [pc, #196]	; (8000594 <fsm_automatic_run+0x448>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a2f      	ldr	r2, [pc, #188]	; (8000590 <fsm_automatic_run+0x444>)
 80004d4:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeRED--,timeGREEN--);
 80004d6:	4b2c      	ldr	r3, [pc, #176]	; (8000588 <fsm_automatic_run+0x43c>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	1e5a      	subs	r2, r3, #1
 80004dc:	492a      	ldr	r1, [pc, #168]	; (8000588 <fsm_automatic_run+0x43c>)
 80004de:	600a      	str	r2, [r1, #0]
 80004e0:	4a2b      	ldr	r2, [pc, #172]	; (8000590 <fsm_automatic_run+0x444>)
 80004e2:	6812      	ldr	r2, [r2, #0]
 80004e4:	1e51      	subs	r1, r2, #1
 80004e6:	482a      	ldr	r0, [pc, #168]	; (8000590 <fsm_automatic_run+0x444>)
 80004e8:	6001      	str	r1, [r0, #0]
 80004ea:	4611      	mov	r1, r2
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 fd89 	bl	8001004 <updateClockBuffer>
			setTimer2(1000);
 80004f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f6:	f001 f89d 	bl	8001634 <setTimer2>
		}
		if(timer2_flag == 1){
 80004fa:	4b24      	ldr	r3, [pc, #144]	; (800058c <fsm_automatic_run+0x440>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d111      	bne.n	8000526 <fsm_automatic_run+0x3da>
			updateClockBuffer(timeAMBER--, timeRED--);
 8000502:	4b20      	ldr	r3, [pc, #128]	; (8000584 <fsm_automatic_run+0x438>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	1e5a      	subs	r2, r3, #1
 8000508:	491e      	ldr	r1, [pc, #120]	; (8000584 <fsm_automatic_run+0x438>)
 800050a:	600a      	str	r2, [r1, #0]
 800050c:	4a1e      	ldr	r2, [pc, #120]	; (8000588 <fsm_automatic_run+0x43c>)
 800050e:	6812      	ldr	r2, [r2, #0]
 8000510:	1e51      	subs	r1, r2, #1
 8000512:	481d      	ldr	r0, [pc, #116]	; (8000588 <fsm_automatic_run+0x43c>)
 8000514:	6001      	str	r1, [r0, #0]
 8000516:	4611      	mov	r1, r2
 8000518:	4618      	mov	r0, r3
 800051a:	f000 fd73 	bl	8001004 <updateClockBuffer>
			setTimer2(1000);
 800051e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000522:	f001 f887 	bl	8001634 <setTimer2>
		}
		if(is_button_pressed_short(0) == 1){
 8000526:	2000      	movs	r0, #0
 8000528:	f000 fd10 	bl	8000f4c <is_button_pressed_short>
 800052c:	4603      	mov	r3, r0
 800052e:	2b01      	cmp	r3, #1
 8000530:	d109      	bne.n	8000546 <fsm_automatic_run+0x3fa>
			setTimer1(250);
 8000532:	20fa      	movs	r0, #250	; 0xfa
 8000534:	f001 f862 	bl	80015fc <setTimer1>
			status = MAN_MODE2;
 8000538:	4b10      	ldr	r3, [pc, #64]	; (800057c <fsm_automatic_run+0x430>)
 800053a:	220b      	movs	r2, #11
 800053c:	601a      	str	r2, [r3, #0]
			setTimer4(5000);
 800053e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000542:	f001 f8af 	bl	80016a4 <setTimer4>
		}
		if(is_button_pressed_1s(0) == 1){
 8000546:	2000      	movs	r0, #0
 8000548:	f000 fd1e 	bl	8000f88 <is_button_pressed_1s>
 800054c:	4603      	mov	r3, r0
 800054e:	2b01      	cmp	r3, #1
 8000550:	d10e      	bne.n	8000570 <fsm_automatic_run+0x424>
			setTimer1(250);
 8000552:	20fa      	movs	r0, #250	; 0xfa
 8000554:	f001 f852 	bl	80015fc <setTimer1>
			status = MAN_MODE2;
 8000558:	4b08      	ldr	r3, [pc, #32]	; (800057c <fsm_automatic_run+0x430>)
 800055a:	220b      	movs	r2, #11
 800055c:	601a      	str	r2, [r3, #0]
		}
		break;
 800055e:	e007      	b.n	8000570 <fsm_automatic_run+0x424>
	default:
		break;
 8000560:	bf00      	nop
 8000562:	e006      	b.n	8000572 <fsm_automatic_run+0x426>
		break;
 8000564:	bf00      	nop
 8000566:	e004      	b.n	8000572 <fsm_automatic_run+0x426>
		break;
 8000568:	bf00      	nop
 800056a:	e002      	b.n	8000572 <fsm_automatic_run+0x426>
		break;
 800056c:	bf00      	nop
 800056e:	e000      	b.n	8000572 <fsm_automatic_run+0x426>
		break;
 8000570:	bf00      	nop
	}
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	200000b4 	.word	0x200000b4
 800057c:	20000070 	.word	0x20000070
 8000580:	20000014 	.word	0x20000014
 8000584:	20000008 	.word	0x20000008
 8000588:	20000000 	.word	0x20000000
 800058c:	200000bc 	.word	0x200000bc
 8000590:	20000004 	.word	0x20000004
 8000594:	20000010 	.word	0x20000010
 8000598:	2000000c 	.word	0x2000000c

0800059c <fsm_manual_run>:
 *      Author: phuct
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	switch(status){
 80005a0:	4ba2      	ldr	r3, [pc, #648]	; (800082c <fsm_manual_run+0x290>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3b0a      	subs	r3, #10
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	f200 828c 	bhi.w	8000ac4 <fsm_manual_run+0x528>
 80005ac:	a201      	add	r2, pc, #4	; (adr r2, 80005b4 <fsm_manual_run+0x18>)
 80005ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b2:	bf00      	nop
 80005b4:	080005c5 	.word	0x080005c5
 80005b8:	0800061b 	.word	0x0800061b
 80005bc:	08000761 	.word	0x08000761
 80005c0:	080008bb 	.word	0x080008bb
	case MAN_MODE1:
		//Return to status INIT / AUTO_RED_GREEN
		setTimer1(defaultTimeGreen*1000);
 80005c4:	4b9a      	ldr	r3, [pc, #616]	; (8000830 <fsm_manual_run+0x294>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005cc:	fb02 f303 	mul.w	r3, r2, r3
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 f813 	bl	80015fc <setTimer1>
		setTimer2(1000);
 80005d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005da:	f001 f82b 	bl	8001634 <setTimer2>
		timeRED = defaultTimeRed;
 80005de:	4b95      	ldr	r3, [pc, #596]	; (8000834 <fsm_manual_run+0x298>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a95      	ldr	r2, [pc, #596]	; (8000838 <fsm_manual_run+0x29c>)
 80005e4:	6013      	str	r3, [r2, #0]
		timeGREEN = defaultTimeGreen;
 80005e6:	4b92      	ldr	r3, [pc, #584]	; (8000830 <fsm_manual_run+0x294>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a94      	ldr	r2, [pc, #592]	; (800083c <fsm_manual_run+0x2a0>)
 80005ec:	6013      	str	r3, [r2, #0]
		tmpAMBER = defaultTimeAmber;
 80005ee:	4b94      	ldr	r3, [pc, #592]	; (8000840 <fsm_manual_run+0x2a4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a94      	ldr	r2, [pc, #592]	; (8000844 <fsm_manual_run+0x2a8>)
 80005f4:	6013      	str	r3, [r2, #0]
		updateClockBuffer(timeRED--, timeGREEN--);
 80005f6:	4b90      	ldr	r3, [pc, #576]	; (8000838 <fsm_manual_run+0x29c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	1e5a      	subs	r2, r3, #1
 80005fc:	498e      	ldr	r1, [pc, #568]	; (8000838 <fsm_manual_run+0x29c>)
 80005fe:	600a      	str	r2, [r1, #0]
 8000600:	4a8e      	ldr	r2, [pc, #568]	; (800083c <fsm_manual_run+0x2a0>)
 8000602:	6812      	ldr	r2, [r2, #0]
 8000604:	1e51      	subs	r1, r2, #1
 8000606:	488d      	ldr	r0, [pc, #564]	; (800083c <fsm_manual_run+0x2a0>)
 8000608:	6001      	str	r1, [r0, #0]
 800060a:	4611      	mov	r1, r2
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fcf9 	bl	8001004 <updateClockBuffer>
		status = AUTO_RED_GREEN;
 8000612:	4b86      	ldr	r3, [pc, #536]	; (800082c <fsm_manual_run+0x290>)
 8000614:	2202      	movs	r2, #2
 8000616:	601a      	str	r2, [r3, #0]
		break;
 8000618:	e255      	b.n	8000ac6 <fsm_manual_run+0x52a>
	case MAN_MODE2:
		//Counter for returning to automatic mode after 5 second
		if(timer4_flag == 1){
 800061a:	4b8b      	ldr	r3, [pc, #556]	; (8000848 <fsm_manual_run+0x2ac>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d10e      	bne.n	8000640 <fsm_manual_run+0xa4>
			if(is_button_pressed_short(1) == 0 && is_button_pressed_short(1) == 0){
 8000622:	2001      	movs	r0, #1
 8000624:	f000 fc92 	bl	8000f4c <is_button_pressed_short>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d108      	bne.n	8000640 <fsm_manual_run+0xa4>
 800062e:	2001      	movs	r0, #1
 8000630:	f000 fc8c 	bl	8000f4c <is_button_pressed_short>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d102      	bne.n	8000640 <fsm_manual_run+0xa4>
				status = MAN_MODE1;
 800063a:	4b7c      	ldr	r3, [pc, #496]	; (800082c <fsm_manual_run+0x290>)
 800063c:	220a      	movs	r2, #10
 800063e:	601a      	str	r2, [r3, #0]
			}
		}
		//Only Amber LEDs in both Road 1 and 2 are ON, other LEDs are OFF
		if(blink_status == 0){
 8000640:	4b82      	ldr	r3, [pc, #520]	; (800084c <fsm_manual_run+0x2b0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d104      	bne.n	8000652 <fsm_manual_run+0xb6>
			setTrafficRed1();
 8000648:	f001 f89e 	bl	8001788 <setTrafficRed1>
			setTrafficRed2();
 800064c:	f001 f8e4 	bl	8001818 <setTrafficRed2>
 8000650:	e001      	b.n	8000656 <fsm_manual_run+0xba>
		} else {
			setTrafficOff();
 8000652:	f001 f929 	bl	80018a8 <setTrafficOff>
		}
		//If BUTTON1 is pressed, switch to status MAN_MODE3
		if(is_button_pressed_short(0) == 1){
 8000656:	2000      	movs	r0, #0
 8000658:	f000 fc78 	bl	8000f4c <is_button_pressed_short>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	d10e      	bne.n	8000680 <fsm_manual_run+0xe4>
			status = MAN_MODE3;
 8000662:	4b72      	ldr	r3, [pc, #456]	; (800082c <fsm_manual_run+0x290>)
 8000664:	220c      	movs	r2, #12
 8000666:	601a      	str	r2, [r3, #0]
			setTimer1(500); //2Hz mean 2 LEDs turn ON for 1 sec, each LED ON for 500ms
 8000668:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800066c:	f000 ffc6 	bl	80015fc <setTimer1>
			setTimer4(5000);
 8000670:	f241 3088 	movw	r0, #5000	; 0x1388
 8000674:	f001 f816 	bl	80016a4 <setTimer4>
			blink_status = 0;
 8000678:	4b74      	ldr	r3, [pc, #464]	; (800084c <fsm_manual_run+0x2b0>)
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	e013      	b.n	80006a8 <fsm_manual_run+0x10c>
		}
		else if(is_button_pressed_1s(0) == 1){
 8000680:	2000      	movs	r0, #0
 8000682:	f000 fc81 	bl	8000f88 <is_button_pressed_1s>
 8000686:	4603      	mov	r3, r0
 8000688:	2b01      	cmp	r3, #1
 800068a:	d10d      	bne.n	80006a8 <fsm_manual_run+0x10c>
			status = MAN_MODE3;
 800068c:	4b67      	ldr	r3, [pc, #412]	; (800082c <fsm_manual_run+0x290>)
 800068e:	220c      	movs	r2, #12
 8000690:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 8000692:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000696:	f000 ffb1 	bl	80015fc <setTimer1>
			setTimer4(5000);
 800069a:	f241 3088 	movw	r0, #5000	; 0x1388
 800069e:	f001 f801 	bl	80016a4 <setTimer4>
			blink_status = 0;
 80006a2:	4b6a      	ldr	r3, [pc, #424]	; (800084c <fsm_manual_run+0x2b0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
		}
		//Blinking Red LEDs
		if(timer1_flag == 1){
 80006a8:	4b69      	ldr	r3, [pc, #420]	; (8000850 <fsm_manual_run+0x2b4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d109      	bne.n	80006c4 <fsm_manual_run+0x128>
			setTimer1(500);
 80006b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b4:	f000 ffa2 	bl	80015fc <setTimer1>
			blink_status = 1 - blink_status;
 80006b8:	4b64      	ldr	r3, [pc, #400]	; (800084c <fsm_manual_run+0x2b0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f1c3 0301 	rsb	r3, r3, #1
 80006c0:	4a62      	ldr	r2, [pc, #392]	; (800084c <fsm_manual_run+0x2b0>)
 80006c2:	6013      	str	r3, [r2, #0]
		}
		//If BUTTON2 is pressed, tempRED value increase 1 unit
		//If value overcome 99, it return to 1
		if(is_button_pressed_short(1) == 1){
 80006c4:	2001      	movs	r0, #1
 80006c6:	f000 fc41 	bl	8000f4c <is_button_pressed_short>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d116      	bne.n	80006fe <fsm_manual_run+0x162>
			setTimer4(5000);
 80006d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80006d4:	f000 ffe6 	bl	80016a4 <setTimer4>
			tmpRED++;
 80006d8:	4b5e      	ldr	r3, [pc, #376]	; (8000854 <fsm_manual_run+0x2b8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	4a5d      	ldr	r2, [pc, #372]	; (8000854 <fsm_manual_run+0x2b8>)
 80006e0:	6013      	str	r3, [r2, #0]
			if(tmpRED > 99) tmpRED = 1;
 80006e2:	4b5c      	ldr	r3, [pc, #368]	; (8000854 <fsm_manual_run+0x2b8>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b63      	cmp	r3, #99	; 0x63
 80006e8:	dd02      	ble.n	80006f0 <fsm_manual_run+0x154>
 80006ea:	4b5a      	ldr	r3, [pc, #360]	; (8000854 <fsm_manual_run+0x2b8>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	601a      	str	r2, [r3, #0]
			updateClockBuffer(2, tmpRED);
 80006f0:	4b58      	ldr	r3, [pc, #352]	; (8000854 <fsm_manual_run+0x2b8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	2002      	movs	r0, #2
 80006f8:	f000 fc84 	bl	8001004 <updateClockBuffer>
 80006fc:	e01b      	b.n	8000736 <fsm_manual_run+0x19a>
		}
		else if(is_button_pressed_1s(1) == 1){
 80006fe:	2001      	movs	r0, #1
 8000700:	f000 fc42 	bl	8000f88 <is_button_pressed_1s>
 8000704:	4603      	mov	r3, r0
 8000706:	2b01      	cmp	r3, #1
 8000708:	d115      	bne.n	8000736 <fsm_manual_run+0x19a>
			setTimer4(5000);
 800070a:	f241 3088 	movw	r0, #5000	; 0x1388
 800070e:	f000 ffc9 	bl	80016a4 <setTimer4>
			tmpRED++;
 8000712:	4b50      	ldr	r3, [pc, #320]	; (8000854 <fsm_manual_run+0x2b8>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	3301      	adds	r3, #1
 8000718:	4a4e      	ldr	r2, [pc, #312]	; (8000854 <fsm_manual_run+0x2b8>)
 800071a:	6013      	str	r3, [r2, #0]
			if(tmpRED > 99) tmpRED = 1;
 800071c:	4b4d      	ldr	r3, [pc, #308]	; (8000854 <fsm_manual_run+0x2b8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b63      	cmp	r3, #99	; 0x63
 8000722:	dd02      	ble.n	800072a <fsm_manual_run+0x18e>
 8000724:	4b4b      	ldr	r3, [pc, #300]	; (8000854 <fsm_manual_run+0x2b8>)
 8000726:	2201      	movs	r2, #1
 8000728:	601a      	str	r2, [r3, #0]
			updateClockBuffer(2, tmpRED);
 800072a:	4b4a      	ldr	r3, [pc, #296]	; (8000854 <fsm_manual_run+0x2b8>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4619      	mov	r1, r3
 8000730:	2002      	movs	r0, #2
 8000732:	f000 fc67 	bl	8001004 <updateClockBuffer>
		}
		//If BUTTON3 is pressed, tmpRED is assigned for defaultTimeRed
		if(is_button_pressed_short(2) == 1){
 8000736:	2002      	movs	r0, #2
 8000738:	f000 fc08 	bl	8000f4c <is_button_pressed_short>
 800073c:	4603      	mov	r3, r0
 800073e:	2b01      	cmp	r3, #1
 8000740:	d107      	bne.n	8000752 <fsm_manual_run+0x1b6>
			setTimer4(5000);
 8000742:	f241 3088 	movw	r0, #5000	; 0x1388
 8000746:	f000 ffad 	bl	80016a4 <setTimer4>
			defaultTimeRed = tmpRED;
 800074a:	4b42      	ldr	r3, [pc, #264]	; (8000854 <fsm_manual_run+0x2b8>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a39      	ldr	r2, [pc, #228]	; (8000834 <fsm_manual_run+0x298>)
 8000750:	6013      	str	r3, [r2, #0]
		}
		updateClockBuffer(2, defaultTimeRed); //Num 2 display the current Mode 2 to blink Red LEDs
 8000752:	4b38      	ldr	r3, [pc, #224]	; (8000834 <fsm_manual_run+0x298>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4619      	mov	r1, r3
 8000758:	2002      	movs	r0, #2
 800075a:	f000 fc53 	bl	8001004 <updateClockBuffer>
		break;
 800075e:	e1b2      	b.n	8000ac6 <fsm_manual_run+0x52a>
	case MAN_MODE3:
		//Counter for returning to automatic mode after 5 second
		if(timer4_flag == 1){
 8000760:	4b39      	ldr	r3, [pc, #228]	; (8000848 <fsm_manual_run+0x2ac>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d102      	bne.n	800076e <fsm_manual_run+0x1d2>
			status = MAN_MODE1;
 8000768:	4b30      	ldr	r3, [pc, #192]	; (800082c <fsm_manual_run+0x290>)
 800076a:	220a      	movs	r2, #10
 800076c:	601a      	str	r2, [r3, #0]
		}
		//Only Amber LEDs in both Road 1 and 2 are ON, other LEDs are OFF
		if(blink_status == 0){
 800076e:	4b37      	ldr	r3, [pc, #220]	; (800084c <fsm_manual_run+0x2b0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <fsm_manual_run+0x1e4>
			setTrafficAmber1();
 8000776:	f001 f81f 	bl	80017b8 <setTrafficAmber1>
			setTrafficAmber2();
 800077a:	f001 f865 	bl	8001848 <setTrafficAmber2>
 800077e:	e001      	b.n	8000784 <fsm_manual_run+0x1e8>
		} else {
			setTrafficOff();
 8000780:	f001 f892 	bl	80018a8 <setTrafficOff>
		}
		//If BUTTON1 is pressed, switch to status MAN_MODE4
		if(is_button_pressed_short(0) == 1){
 8000784:	2000      	movs	r0, #0
 8000786:	f000 fbe1 	bl	8000f4c <is_button_pressed_short>
 800078a:	4603      	mov	r3, r0
 800078c:	2b01      	cmp	r3, #1
 800078e:	d10e      	bne.n	80007ae <fsm_manual_run+0x212>
			setTimer4(5000);
 8000790:	f241 3088 	movw	r0, #5000	; 0x1388
 8000794:	f000 ff86 	bl	80016a4 <setTimer4>
			status = MAN_MODE4;
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <fsm_manual_run+0x290>)
 800079a:	220d      	movs	r2, #13
 800079c:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 800079e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a2:	f000 ff2b 	bl	80015fc <setTimer1>
			blink_status = 0;
 80007a6:	4b29      	ldr	r3, [pc, #164]	; (800084c <fsm_manual_run+0x2b0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	e013      	b.n	80007d6 <fsm_manual_run+0x23a>
		}
		else if(is_button_pressed_1s(0) == 1){
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 fbea 	bl	8000f88 <is_button_pressed_1s>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d10d      	bne.n	80007d6 <fsm_manual_run+0x23a>
			setTimer4(5000);
 80007ba:	f241 3088 	movw	r0, #5000	; 0x1388
 80007be:	f000 ff71 	bl	80016a4 <setTimer4>
			status = MAN_MODE4;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <fsm_manual_run+0x290>)
 80007c4:	220d      	movs	r2, #13
 80007c6:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 80007c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007cc:	f000 ff16 	bl	80015fc <setTimer1>
			blink_status = 0;
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <fsm_manual_run+0x2b0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
		}
		//Blinking Amber LEDs
		if(timer1_flag == 1){
 80007d6:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <fsm_manual_run+0x2b4>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d109      	bne.n	80007f2 <fsm_manual_run+0x256>
			setTimer1(500);
 80007de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007e2:	f000 ff0b 	bl	80015fc <setTimer1>
			blink_status = 1 - blink_status;
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <fsm_manual_run+0x2b0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f1c3 0301 	rsb	r3, r3, #1
 80007ee:	4a17      	ldr	r2, [pc, #92]	; (800084c <fsm_manual_run+0x2b0>)
 80007f0:	6013      	str	r3, [r2, #0]
		}
		//If BUTTON2 is pressed, tmpAMBER value increase 1 unit
		//If value overcome 99, it return to 1
		if(is_button_pressed_short(1) == 1){
 80007f2:	2001      	movs	r0, #1
 80007f4:	f000 fbaa 	bl	8000f4c <is_button_pressed_short>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d12c      	bne.n	8000858 <fsm_manual_run+0x2bc>
			setTimer4(5000);
 80007fe:	f241 3088 	movw	r0, #5000	; 0x1388
 8000802:	f000 ff4f 	bl	80016a4 <setTimer4>
			tmpAMBER++;
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <fsm_manual_run+0x2a8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	3301      	adds	r3, #1
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <fsm_manual_run+0x2a8>)
 800080e:	6013      	str	r3, [r2, #0]
			if(tmpAMBER > 99) tmpAMBER = 1;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <fsm_manual_run+0x2a8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b63      	cmp	r3, #99	; 0x63
 8000816:	dd02      	ble.n	800081e <fsm_manual_run+0x282>
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <fsm_manual_run+0x2a8>)
 800081a:	2201      	movs	r2, #1
 800081c:	601a      	str	r2, [r3, #0]
			updateClockBuffer(3, tmpAMBER);
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <fsm_manual_run+0x2a8>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4619      	mov	r1, r3
 8000824:	2003      	movs	r0, #3
 8000826:	f000 fbed 	bl	8001004 <updateClockBuffer>
 800082a:	e031      	b.n	8000890 <fsm_manual_run+0x2f4>
 800082c:	20000070 	.word	0x20000070
 8000830:	20000010 	.word	0x20000010
 8000834:	2000000c 	.word	0x2000000c
 8000838:	20000000 	.word	0x20000000
 800083c:	20000004 	.word	0x20000004
 8000840:	20000014 	.word	0x20000014
 8000844:	2000002c 	.word	0x2000002c
 8000848:	200000cc 	.word	0x200000cc
 800084c:	2000006c 	.word	0x2000006c
 8000850:	200000b4 	.word	0x200000b4
 8000854:	20000024 	.word	0x20000024
		}
		else if(is_button_pressed_1s(1) == 1){
 8000858:	2001      	movs	r0, #1
 800085a:	f000 fb95 	bl	8000f88 <is_button_pressed_1s>
 800085e:	4603      	mov	r3, r0
 8000860:	2b01      	cmp	r3, #1
 8000862:	d115      	bne.n	8000890 <fsm_manual_run+0x2f4>
			setTimer4(5000);
 8000864:	f241 3088 	movw	r0, #5000	; 0x1388
 8000868:	f000 ff1c 	bl	80016a4 <setTimer4>
			tmpAMBER++;
 800086c:	4b97      	ldr	r3, [pc, #604]	; (8000acc <fsm_manual_run+0x530>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	4a96      	ldr	r2, [pc, #600]	; (8000acc <fsm_manual_run+0x530>)
 8000874:	6013      	str	r3, [r2, #0]
			if(tmpAMBER > 99) tmpAMBER = 1;
 8000876:	4b95      	ldr	r3, [pc, #596]	; (8000acc <fsm_manual_run+0x530>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b63      	cmp	r3, #99	; 0x63
 800087c:	dd02      	ble.n	8000884 <fsm_manual_run+0x2e8>
 800087e:	4b93      	ldr	r3, [pc, #588]	; (8000acc <fsm_manual_run+0x530>)
 8000880:	2201      	movs	r2, #1
 8000882:	601a      	str	r2, [r3, #0]
			updateClockBuffer(3, tmpAMBER);
 8000884:	4b91      	ldr	r3, [pc, #580]	; (8000acc <fsm_manual_run+0x530>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	2003      	movs	r0, #3
 800088c:	f000 fbba 	bl	8001004 <updateClockBuffer>
		}
		//If BUTTON3 is pressed, tempAMBER is assigned for defaultTimeAmber
		if(is_button_pressed_short(2) == 1){
 8000890:	2002      	movs	r0, #2
 8000892:	f000 fb5b 	bl	8000f4c <is_button_pressed_short>
 8000896:	4603      	mov	r3, r0
 8000898:	2b01      	cmp	r3, #1
 800089a:	d107      	bne.n	80008ac <fsm_manual_run+0x310>
			setTimer4(5000);
 800089c:	f241 3088 	movw	r0, #5000	; 0x1388
 80008a0:	f000 ff00 	bl	80016a4 <setTimer4>
			defaultTimeAmber = tmpAMBER;
 80008a4:	4b89      	ldr	r3, [pc, #548]	; (8000acc <fsm_manual_run+0x530>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a89      	ldr	r2, [pc, #548]	; (8000ad0 <fsm_manual_run+0x534>)
 80008aa:	6013      	str	r3, [r2, #0]
		}
		updateClockBuffer(3, defaultTimeAmber);	//Num 3 display the current Mode 3 to blink Amber LEDs
 80008ac:	4b88      	ldr	r3, [pc, #544]	; (8000ad0 <fsm_manual_run+0x534>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	2003      	movs	r0, #3
 80008b4:	f000 fba6 	bl	8001004 <updateClockBuffer>
		break;
 80008b8:	e105      	b.n	8000ac6 <fsm_manual_run+0x52a>
	case MAN_MODE4:
		//Counter for returning to automatic mode after 5 second
		if(timer4_flag == 1){
 80008ba:	4b86      	ldr	r3, [pc, #536]	; (8000ad4 <fsm_manual_run+0x538>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d102      	bne.n	80008c8 <fsm_manual_run+0x32c>
			status = MAN_MODE1;
 80008c2:	4b85      	ldr	r3, [pc, #532]	; (8000ad8 <fsm_manual_run+0x53c>)
 80008c4:	220a      	movs	r2, #10
 80008c6:	601a      	str	r2, [r3, #0]
		}
		//If BUTTON1 is pressed, switch to status MAN_MODE1
		if(is_button_pressed_short(0) == 1){
 80008c8:	2000      	movs	r0, #0
 80008ca:	f000 fb3f 	bl	8000f4c <is_button_pressed_short>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d14c      	bne.n	800096e <fsm_manual_run+0x3d2>
			setTimer4(5000);
 80008d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80008d8:	f000 fee4 	bl	80016a4 <setTimer4>
			status = MAN_MODE1;
 80008dc:	4b7e      	ldr	r3, [pc, #504]	; (8000ad8 <fsm_manual_run+0x53c>)
 80008de:	220a      	movs	r2, #10
 80008e0:	601a      	str	r2, [r3, #0]
			if((defaultTimeRed - (defaultTimeGreen + defaultTimeAmber)) < 0){
 80008e2:	4b7e      	ldr	r3, [pc, #504]	; (8000adc <fsm_manual_run+0x540>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4b7e      	ldr	r3, [pc, #504]	; (8000ae0 <fsm_manual_run+0x544>)
 80008e8:	6819      	ldr	r1, [r3, #0]
 80008ea:	4b79      	ldr	r3, [pc, #484]	; (8000ad0 <fsm_manual_run+0x534>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	440b      	add	r3, r1
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	f280 808c 	bge.w	8000a10 <fsm_manual_run+0x474>
				if(defaultTimeRed < (defaultTimeGreen + defaultTimeAmber)){
 80008f8:	4b79      	ldr	r3, [pc, #484]	; (8000ae0 <fsm_manual_run+0x544>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b74      	ldr	r3, [pc, #464]	; (8000ad0 <fsm_manual_run+0x534>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	441a      	add	r2, r3
 8000902:	4b76      	ldr	r3, [pc, #472]	; (8000adc <fsm_manual_run+0x540>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	429a      	cmp	r2, r3
 8000908:	dd18      	ble.n	800093c <fsm_manual_run+0x3a0>
					defaultTimeAmber = preTimeAmber;
 800090a:	4b76      	ldr	r3, [pc, #472]	; (8000ae4 <fsm_manual_run+0x548>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a70      	ldr	r2, [pc, #448]	; (8000ad0 <fsm_manual_run+0x534>)
 8000910:	6013      	str	r3, [r2, #0]
					defaultTimeGreen = preTimeGreen;
 8000912:	4b75      	ldr	r3, [pc, #468]	; (8000ae8 <fsm_manual_run+0x54c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a72      	ldr	r2, [pc, #456]	; (8000ae0 <fsm_manual_run+0x544>)
 8000918:	6013      	str	r3, [r2, #0]
					defaultTimeRed = preTimeRed;
 800091a:	4b74      	ldr	r3, [pc, #464]	; (8000aec <fsm_manual_run+0x550>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a6f      	ldr	r2, [pc, #444]	; (8000adc <fsm_manual_run+0x540>)
 8000920:	6013      	str	r3, [r2, #0]
					tmpAMBER = preTimeAmber;
 8000922:	4b70      	ldr	r3, [pc, #448]	; (8000ae4 <fsm_manual_run+0x548>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a69      	ldr	r2, [pc, #420]	; (8000acc <fsm_manual_run+0x530>)
 8000928:	6013      	str	r3, [r2, #0]
					tmpGREEN = preTimeGreen;
 800092a:	4b6f      	ldr	r3, [pc, #444]	; (8000ae8 <fsm_manual_run+0x54c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a70      	ldr	r2, [pc, #448]	; (8000af0 <fsm_manual_run+0x554>)
 8000930:	6013      	str	r3, [r2, #0]
					tmpRED = preTimeRed;
 8000932:	4b6e      	ldr	r3, [pc, #440]	; (8000aec <fsm_manual_run+0x550>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a6f      	ldr	r2, [pc, #444]	; (8000af4 <fsm_manual_run+0x558>)
 8000938:	6013      	str	r3, [r2, #0]
 800093a:	e069      	b.n	8000a10 <fsm_manual_run+0x474>
				} else {
					preTimeAmber = defaultTimeAmber ;
 800093c:	4b64      	ldr	r3, [pc, #400]	; (8000ad0 <fsm_manual_run+0x534>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a68      	ldr	r2, [pc, #416]	; (8000ae4 <fsm_manual_run+0x548>)
 8000942:	6013      	str	r3, [r2, #0]
					preTimeGreen = defaultTimeGreen;
 8000944:	4b66      	ldr	r3, [pc, #408]	; (8000ae0 <fsm_manual_run+0x544>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a67      	ldr	r2, [pc, #412]	; (8000ae8 <fsm_manual_run+0x54c>)
 800094a:	6013      	str	r3, [r2, #0]
					preTimeRed = defaultTimeRed;
 800094c:	4b63      	ldr	r3, [pc, #396]	; (8000adc <fsm_manual_run+0x540>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a66      	ldr	r2, [pc, #408]	; (8000aec <fsm_manual_run+0x550>)
 8000952:	6013      	str	r3, [r2, #0]
					tmpAMBER = preTimeAmber;
 8000954:	4b63      	ldr	r3, [pc, #396]	; (8000ae4 <fsm_manual_run+0x548>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a5c      	ldr	r2, [pc, #368]	; (8000acc <fsm_manual_run+0x530>)
 800095a:	6013      	str	r3, [r2, #0]
					tmpGREEN = preTimeGreen;
 800095c:	4b62      	ldr	r3, [pc, #392]	; (8000ae8 <fsm_manual_run+0x54c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a63      	ldr	r2, [pc, #396]	; (8000af0 <fsm_manual_run+0x554>)
 8000962:	6013      	str	r3, [r2, #0]
					tmpRED = preTimeRed;
 8000964:	4b61      	ldr	r3, [pc, #388]	; (8000aec <fsm_manual_run+0x550>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a62      	ldr	r2, [pc, #392]	; (8000af4 <fsm_manual_run+0x558>)
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	e050      	b.n	8000a10 <fsm_manual_run+0x474>
				}
			}
		}
		else if(is_button_pressed_1s(0) == 1){
 800096e:	2000      	movs	r0, #0
 8000970:	f000 fb0a 	bl	8000f88 <is_button_pressed_1s>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	d14a      	bne.n	8000a10 <fsm_manual_run+0x474>
			setTimer4(5000);
 800097a:	f241 3088 	movw	r0, #5000	; 0x1388
 800097e:	f000 fe91 	bl	80016a4 <setTimer4>
			status = MAN_MODE1;
 8000982:	4b55      	ldr	r3, [pc, #340]	; (8000ad8 <fsm_manual_run+0x53c>)
 8000984:	220a      	movs	r2, #10
 8000986:	601a      	str	r2, [r3, #0]
			if((defaultTimeRed - (defaultTimeGreen + defaultTimeAmber)) < 0){
 8000988:	4b54      	ldr	r3, [pc, #336]	; (8000adc <fsm_manual_run+0x540>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4b54      	ldr	r3, [pc, #336]	; (8000ae0 <fsm_manual_run+0x544>)
 800098e:	6819      	ldr	r1, [r3, #0]
 8000990:	4b4f      	ldr	r3, [pc, #316]	; (8000ad0 <fsm_manual_run+0x534>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	440b      	add	r3, r1
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	da39      	bge.n	8000a10 <fsm_manual_run+0x474>
				if(defaultTimeRed < (defaultTimeGreen + defaultTimeAmber)){
 800099c:	4b50      	ldr	r3, [pc, #320]	; (8000ae0 <fsm_manual_run+0x544>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b4b      	ldr	r3, [pc, #300]	; (8000ad0 <fsm_manual_run+0x534>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	441a      	add	r2, r3
 80009a6:	4b4d      	ldr	r3, [pc, #308]	; (8000adc <fsm_manual_run+0x540>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	dd18      	ble.n	80009e0 <fsm_manual_run+0x444>
					defaultTimeAmber = preTimeAmber;
 80009ae:	4b4d      	ldr	r3, [pc, #308]	; (8000ae4 <fsm_manual_run+0x548>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a47      	ldr	r2, [pc, #284]	; (8000ad0 <fsm_manual_run+0x534>)
 80009b4:	6013      	str	r3, [r2, #0]
					defaultTimeGreen = preTimeGreen;
 80009b6:	4b4c      	ldr	r3, [pc, #304]	; (8000ae8 <fsm_manual_run+0x54c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a49      	ldr	r2, [pc, #292]	; (8000ae0 <fsm_manual_run+0x544>)
 80009bc:	6013      	str	r3, [r2, #0]
					defaultTimeRed = preTimeRed;
 80009be:	4b4b      	ldr	r3, [pc, #300]	; (8000aec <fsm_manual_run+0x550>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a46      	ldr	r2, [pc, #280]	; (8000adc <fsm_manual_run+0x540>)
 80009c4:	6013      	str	r3, [r2, #0]
					tmpAMBER = preTimeAmber;
 80009c6:	4b47      	ldr	r3, [pc, #284]	; (8000ae4 <fsm_manual_run+0x548>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a40      	ldr	r2, [pc, #256]	; (8000acc <fsm_manual_run+0x530>)
 80009cc:	6013      	str	r3, [r2, #0]
					tmpGREEN = preTimeGreen;
 80009ce:	4b46      	ldr	r3, [pc, #280]	; (8000ae8 <fsm_manual_run+0x54c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a47      	ldr	r2, [pc, #284]	; (8000af0 <fsm_manual_run+0x554>)
 80009d4:	6013      	str	r3, [r2, #0]
					tmpRED = preTimeRed;
 80009d6:	4b45      	ldr	r3, [pc, #276]	; (8000aec <fsm_manual_run+0x550>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a46      	ldr	r2, [pc, #280]	; (8000af4 <fsm_manual_run+0x558>)
 80009dc:	6013      	str	r3, [r2, #0]
 80009de:	e017      	b.n	8000a10 <fsm_manual_run+0x474>
				} else {
					preTimeAmber = defaultTimeAmber ;
 80009e0:	4b3b      	ldr	r3, [pc, #236]	; (8000ad0 <fsm_manual_run+0x534>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a3f      	ldr	r2, [pc, #252]	; (8000ae4 <fsm_manual_run+0x548>)
 80009e6:	6013      	str	r3, [r2, #0]
					preTimeGreen = defaultTimeGreen;
 80009e8:	4b3d      	ldr	r3, [pc, #244]	; (8000ae0 <fsm_manual_run+0x544>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a3e      	ldr	r2, [pc, #248]	; (8000ae8 <fsm_manual_run+0x54c>)
 80009ee:	6013      	str	r3, [r2, #0]
					preTimeRed = defaultTimeRed;
 80009f0:	4b3a      	ldr	r3, [pc, #232]	; (8000adc <fsm_manual_run+0x540>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a3d      	ldr	r2, [pc, #244]	; (8000aec <fsm_manual_run+0x550>)
 80009f6:	6013      	str	r3, [r2, #0]
					tmpAMBER = preTimeAmber;
 80009f8:	4b3a      	ldr	r3, [pc, #232]	; (8000ae4 <fsm_manual_run+0x548>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a33      	ldr	r2, [pc, #204]	; (8000acc <fsm_manual_run+0x530>)
 80009fe:	6013      	str	r3, [r2, #0]
					tmpGREEN = preTimeGreen;
 8000a00:	4b39      	ldr	r3, [pc, #228]	; (8000ae8 <fsm_manual_run+0x54c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a3a      	ldr	r2, [pc, #232]	; (8000af0 <fsm_manual_run+0x554>)
 8000a06:	6013      	str	r3, [r2, #0]
					tmpRED = preTimeRed;
 8000a08:	4b38      	ldr	r3, [pc, #224]	; (8000aec <fsm_manual_run+0x550>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a39      	ldr	r2, [pc, #228]	; (8000af4 <fsm_manual_run+0x558>)
 8000a0e:	6013      	str	r3, [r2, #0]
				}
			}
		}
		//Only Green LEDs in both Road 1 and 2 are ON, other LEDs are OFF
		if(blink_status == 0){
 8000a10:	4b39      	ldr	r3, [pc, #228]	; (8000af8 <fsm_manual_run+0x55c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d104      	bne.n	8000a22 <fsm_manual_run+0x486>
			setTrafficGreen1();
 8000a18:	f000 fee6 	bl	80017e8 <setTrafficGreen1>
			setTrafficGreen2();
 8000a1c:	f000 ff2c 	bl	8001878 <setTrafficGreen2>
 8000a20:	e001      	b.n	8000a26 <fsm_manual_run+0x48a>
		} else {
			setTrafficOff();
 8000a22:	f000 ff41 	bl	80018a8 <setTrafficOff>
		}
		//Blinking Green LEDs
		if(timer1_flag == 1){
 8000a26:	4b35      	ldr	r3, [pc, #212]	; (8000afc <fsm_manual_run+0x560>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d109      	bne.n	8000a42 <fsm_manual_run+0x4a6>
			blink_status = 1 - blink_status;
 8000a2e:	4b32      	ldr	r3, [pc, #200]	; (8000af8 <fsm_manual_run+0x55c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f1c3 0301 	rsb	r3, r3, #1
 8000a36:	4a30      	ldr	r2, [pc, #192]	; (8000af8 <fsm_manual_run+0x55c>)
 8000a38:	6013      	str	r3, [r2, #0]
			setTimer1(500);
 8000a3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a3e:	f000 fddd 	bl	80015fc <setTimer1>
		}
		//If BUTTON2 is pressed, tmpGREEN value increase 1 unit
		//If value overcome 99, it return to 1
			if(is_button_pressed_short(1) == 1){
 8000a42:	2001      	movs	r0, #1
 8000a44:	f000 fa82 	bl	8000f4c <is_button_pressed_short>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d10f      	bne.n	8000a6e <fsm_manual_run+0x4d2>
				setTimer4(5000);
 8000a4e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a52:	f000 fe27 	bl	80016a4 <setTimer4>
				tmpGREEN++;
 8000a56:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <fsm_manual_run+0x554>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	4a24      	ldr	r2, [pc, #144]	; (8000af0 <fsm_manual_run+0x554>)
 8000a5e:	6013      	str	r3, [r2, #0]
				if(tmpGREEN > 99) tmpGREEN = 1;
 8000a60:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <fsm_manual_run+0x554>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b63      	cmp	r3, #99	; 0x63
 8000a66:	dd02      	ble.n	8000a6e <fsm_manual_run+0x4d2>
 8000a68:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <fsm_manual_run+0x554>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	601a      	str	r2, [r3, #0]
			}
			if(is_button_pressed_1s(1) == 1){
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f000 fa8a 	bl	8000f88 <is_button_pressed_1s>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d10f      	bne.n	8000a9a <fsm_manual_run+0x4fe>
				setTimer4(5000);
 8000a7a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a7e:	f000 fe11 	bl	80016a4 <setTimer4>
				tmpGREEN++;
 8000a82:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <fsm_manual_run+0x554>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <fsm_manual_run+0x554>)
 8000a8a:	6013      	str	r3, [r2, #0]
				if(tmpGREEN > 99) tmpGREEN = 1;
 8000a8c:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <fsm_manual_run+0x554>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b63      	cmp	r3, #99	; 0x63
 8000a92:	dd02      	ble.n	8000a9a <fsm_manual_run+0x4fe>
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <fsm_manual_run+0x554>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	601a      	str	r2, [r3, #0]
			}
		//If BUTTON3 is pressed, tmpGREEN is assigned for defaultTimeGreen
			if(is_button_pressed_short(2) == 1){
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	f000 fa56 	bl	8000f4c <is_button_pressed_short>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d107      	bne.n	8000ab6 <fsm_manual_run+0x51a>
				setTimer4(5000);
 8000aa6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000aaa:	f000 fdfb 	bl	80016a4 <setTimer4>
				defaultTimeGreen = tmpGREEN;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <fsm_manual_run+0x554>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <fsm_manual_run+0x544>)
 8000ab4:	6013      	str	r3, [r2, #0]
			}
		updateClockBuffer(4, defaultTimeGreen);	//Num 4 display the current Mode 4 to blink Green LEDs
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <fsm_manual_run+0x544>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4619      	mov	r1, r3
 8000abc:	2004      	movs	r0, #4
 8000abe:	f000 faa1 	bl	8001004 <updateClockBuffer>
		break;
 8000ac2:	e000      	b.n	8000ac6 <fsm_manual_run+0x52a>
	default:
		break;
 8000ac4:	bf00      	nop
	}
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000002c 	.word	0x2000002c
 8000ad0:	20000014 	.word	0x20000014
 8000ad4:	200000cc 	.word	0x200000cc
 8000ad8:	20000070 	.word	0x20000070
 8000adc:	2000000c 	.word	0x2000000c
 8000ae0:	20000010 	.word	0x20000010
 8000ae4:	20000020 	.word	0x20000020
 8000ae8:	2000001c 	.word	0x2000001c
 8000aec:	20000018 	.word	0x20000018
 8000af0:	20000028 	.word	0x20000028
 8000af4:	20000024 	.word	0x20000024
 8000af8:	2000006c 	.word	0x2000006c
 8000afc:	200000b4 	.word	0x200000b4

08000b00 <fsm_setting_run>:
 *      Author: phuct
 */

#include "fsm_setting.h"

void fsm_setting_run(){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	switch(status){
 8000b04:	4b93      	ldr	r3, [pc, #588]	; (8000d54 <fsm_setting_run+0x254>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b10      	cmp	r3, #16
 8000b0a:	f000 80c3 	beq.w	8000c94 <fsm_setting_run+0x194>
 8000b0e:	2b10      	cmp	r3, #16
 8000b10:	f300 8117 	bgt.w	8000d42 <fsm_setting_run+0x242>
 8000b14:	2b0e      	cmp	r3, #14
 8000b16:	d002      	beq.n	8000b1e <fsm_setting_run+0x1e>
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d05e      	beq.n	8000bda <fsm_setting_run+0xda>
			setTimer1(250);
			status = AUTO_GREEN_RED;
		}
		break;
	default:
		break;
 8000b1c:	e111      	b.n	8000d42 <fsm_setting_run+0x242>
		updateClockBuffer(1, defaultTimeRed);
 8000b1e:	4b8e      	ldr	r3, [pc, #568]	; (8000d58 <fsm_setting_run+0x258>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4619      	mov	r1, r3
 8000b24:	2001      	movs	r0, #1
 8000b26:	f000 fa6d 	bl	8001004 <updateClockBuffer>
		setTrafficRed1();
 8000b2a:	f000 fe2d 	bl	8001788 <setTrafficRed1>
		setTrafficRed2();
 8000b2e:	f000 fe73 	bl	8001818 <setTrafficRed2>
		if(is_button_pressed_short(0) == 1){
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 fa0a 	bl	8000f4c <is_button_pressed_short>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d104      	bne.n	8000b48 <fsm_setting_run+0x48>
			defaultTimeRed--;
 8000b3e:	4b86      	ldr	r3, [pc, #536]	; (8000d58 <fsm_setting_run+0x258>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	4a84      	ldr	r2, [pc, #528]	; (8000d58 <fsm_setting_run+0x258>)
 8000b46:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_1s(0) == 1){
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f000 fa1d 	bl	8000f88 <is_button_pressed_1s>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d104      	bne.n	8000b5e <fsm_setting_run+0x5e>
			defaultTimeRed--;
 8000b54:	4b80      	ldr	r3, [pc, #512]	; (8000d58 <fsm_setting_run+0x258>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	4a7f      	ldr	r2, [pc, #508]	; (8000d58 <fsm_setting_run+0x258>)
 8000b5c:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_short(2) == 1){
 8000b5e:	2002      	movs	r0, #2
 8000b60:	f000 f9f4 	bl	8000f4c <is_button_pressed_short>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d104      	bne.n	8000b74 <fsm_setting_run+0x74>
			defaultTimeRed++;
 8000b6a:	4b7b      	ldr	r3, [pc, #492]	; (8000d58 <fsm_setting_run+0x258>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	4a79      	ldr	r2, [pc, #484]	; (8000d58 <fsm_setting_run+0x258>)
 8000b72:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_1s(2) == 1){
 8000b74:	2002      	movs	r0, #2
 8000b76:	f000 fa07 	bl	8000f88 <is_button_pressed_1s>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d104      	bne.n	8000b8a <fsm_setting_run+0x8a>
			defaultTimeRed++;
 8000b80:	4b75      	ldr	r3, [pc, #468]	; (8000d58 <fsm_setting_run+0x258>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	4a74      	ldr	r2, [pc, #464]	; (8000d58 <fsm_setting_run+0x258>)
 8000b88:	6013      	str	r3, [r2, #0]
		if(defaultTimeRed < 0){
 8000b8a:	4b73      	ldr	r3, [pc, #460]	; (8000d58 <fsm_setting_run+0x258>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	da02      	bge.n	8000b98 <fsm_setting_run+0x98>
			defaultTimeRed = 99;
 8000b92:	4b71      	ldr	r3, [pc, #452]	; (8000d58 <fsm_setting_run+0x258>)
 8000b94:	2263      	movs	r2, #99	; 0x63
 8000b96:	601a      	str	r2, [r3, #0]
		if(defaultTimeRed > 99){
 8000b98:	4b6f      	ldr	r3, [pc, #444]	; (8000d58 <fsm_setting_run+0x258>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b63      	cmp	r3, #99	; 0x63
 8000b9e:	dd02      	ble.n	8000ba6 <fsm_setting_run+0xa6>
			defaultTimeRed = 0;
 8000ba0:	4b6d      	ldr	r3, [pc, #436]	; (8000d58 <fsm_setting_run+0x258>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
		if(is_button_pressed_short(1) == 1){
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f000 f9d0 	bl	8000f4c <is_button_pressed_short>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d105      	bne.n	8000bbe <fsm_setting_run+0xbe>
			setTimer1(250);
 8000bb2:	20fa      	movs	r0, #250	; 0xfa
 8000bb4:	f000 fd22 	bl	80015fc <setTimer1>
			status = SET_MODE2;
 8000bb8:	4b66      	ldr	r3, [pc, #408]	; (8000d54 <fsm_setting_run+0x254>)
 8000bba:	220f      	movs	r2, #15
 8000bbc:	601a      	str	r2, [r3, #0]
		if(is_button_pressed_1s(1) == 1){
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f000 f9e2 	bl	8000f88 <is_button_pressed_1s>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	f040 80bd 	bne.w	8000d46 <fsm_setting_run+0x246>
			setTimer1(250);
 8000bcc:	20fa      	movs	r0, #250	; 0xfa
 8000bce:	f000 fd15 	bl	80015fc <setTimer1>
			status = AUTO_RED_GREEN;
 8000bd2:	4b60      	ldr	r3, [pc, #384]	; (8000d54 <fsm_setting_run+0x254>)
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	601a      	str	r2, [r3, #0]
		break;
 8000bd8:	e0b5      	b.n	8000d46 <fsm_setting_run+0x246>
		updateClockBuffer(2, defaultTimeAmber);
 8000bda:	4b60      	ldr	r3, [pc, #384]	; (8000d5c <fsm_setting_run+0x25c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4619      	mov	r1, r3
 8000be0:	2002      	movs	r0, #2
 8000be2:	f000 fa0f 	bl	8001004 <updateClockBuffer>
		setTrafficAmber1();
 8000be6:	f000 fde7 	bl	80017b8 <setTrafficAmber1>
		setTrafficAmber2();
 8000bea:	f000 fe2d 	bl	8001848 <setTrafficAmber2>
		if(is_button_pressed_short(0) == 1){
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 f9ac 	bl	8000f4c <is_button_pressed_short>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d104      	bne.n	8000c04 <fsm_setting_run+0x104>
			defaultTimeAmber--;
 8000bfa:	4b58      	ldr	r3, [pc, #352]	; (8000d5c <fsm_setting_run+0x25c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	4a56      	ldr	r2, [pc, #344]	; (8000d5c <fsm_setting_run+0x25c>)
 8000c02:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_1s(0) == 1){
 8000c04:	2000      	movs	r0, #0
 8000c06:	f000 f9bf 	bl	8000f88 <is_button_pressed_1s>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d104      	bne.n	8000c1a <fsm_setting_run+0x11a>
			defaultTimeAmber--;
 8000c10:	4b52      	ldr	r3, [pc, #328]	; (8000d5c <fsm_setting_run+0x25c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	4a51      	ldr	r2, [pc, #324]	; (8000d5c <fsm_setting_run+0x25c>)
 8000c18:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_short(2) == 1){
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	f000 f996 	bl	8000f4c <is_button_pressed_short>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d104      	bne.n	8000c30 <fsm_setting_run+0x130>
			defaultTimeAmber++;
 8000c26:	4b4d      	ldr	r3, [pc, #308]	; (8000d5c <fsm_setting_run+0x25c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	4a4b      	ldr	r2, [pc, #300]	; (8000d5c <fsm_setting_run+0x25c>)
 8000c2e:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_1s(2) == 1){
 8000c30:	2002      	movs	r0, #2
 8000c32:	f000 f9a9 	bl	8000f88 <is_button_pressed_1s>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d104      	bne.n	8000c46 <fsm_setting_run+0x146>
			defaultTimeAmber++;
 8000c3c:	4b47      	ldr	r3, [pc, #284]	; (8000d5c <fsm_setting_run+0x25c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	3301      	adds	r3, #1
 8000c42:	4a46      	ldr	r2, [pc, #280]	; (8000d5c <fsm_setting_run+0x25c>)
 8000c44:	6013      	str	r3, [r2, #0]
		if(defaultTimeAmber < 0){
 8000c46:	4b45      	ldr	r3, [pc, #276]	; (8000d5c <fsm_setting_run+0x25c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	da02      	bge.n	8000c54 <fsm_setting_run+0x154>
			defaultTimeAmber = 99;
 8000c4e:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <fsm_setting_run+0x25c>)
 8000c50:	2263      	movs	r2, #99	; 0x63
 8000c52:	601a      	str	r2, [r3, #0]
		if(defaultTimeAmber > 99){
 8000c54:	4b41      	ldr	r3, [pc, #260]	; (8000d5c <fsm_setting_run+0x25c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b63      	cmp	r3, #99	; 0x63
 8000c5a:	dd02      	ble.n	8000c62 <fsm_setting_run+0x162>
			defaultTimeAmber = 0;
 8000c5c:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <fsm_setting_run+0x25c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
		if(is_button_pressed_short(1) == 1){
 8000c62:	2001      	movs	r0, #1
 8000c64:	f000 f972 	bl	8000f4c <is_button_pressed_short>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d105      	bne.n	8000c7a <fsm_setting_run+0x17a>
			setTimer1(250);
 8000c6e:	20fa      	movs	r0, #250	; 0xfa
 8000c70:	f000 fcc4 	bl	80015fc <setTimer1>
			status = SET_MODE3;
 8000c74:	4b37      	ldr	r3, [pc, #220]	; (8000d54 <fsm_setting_run+0x254>)
 8000c76:	2210      	movs	r2, #16
 8000c78:	601a      	str	r2, [r3, #0]
		if(is_button_pressed_1s(1) == 1){
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f000 f984 	bl	8000f88 <is_button_pressed_1s>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d161      	bne.n	8000d4a <fsm_setting_run+0x24a>
			setTimer1(250);
 8000c86:	20fa      	movs	r0, #250	; 0xfa
 8000c88:	f000 fcb8 	bl	80015fc <setTimer1>
			status = AUTO_GREEN_RED;
 8000c8c:	4b31      	ldr	r3, [pc, #196]	; (8000d54 <fsm_setting_run+0x254>)
 8000c8e:	2204      	movs	r2, #4
 8000c90:	601a      	str	r2, [r3, #0]
		break;
 8000c92:	e05a      	b.n	8000d4a <fsm_setting_run+0x24a>
		updateClockBuffer(3, defaultTimeGreen);
 8000c94:	4b32      	ldr	r3, [pc, #200]	; (8000d60 <fsm_setting_run+0x260>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	2003      	movs	r0, #3
 8000c9c:	f000 f9b2 	bl	8001004 <updateClockBuffer>
		setTrafficGreen1();
 8000ca0:	f000 fda2 	bl	80017e8 <setTrafficGreen1>
		setTrafficGreen2();
 8000ca4:	f000 fde8 	bl	8001878 <setTrafficGreen2>
		if(is_button_pressed_short(0) == 1){
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f000 f94f 	bl	8000f4c <is_button_pressed_short>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d104      	bne.n	8000cbe <fsm_setting_run+0x1be>
			defaultTimeGreen--;
 8000cb4:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <fsm_setting_run+0x260>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	4a29      	ldr	r2, [pc, #164]	; (8000d60 <fsm_setting_run+0x260>)
 8000cbc:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_1s(0) == 1){
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f000 f962 	bl	8000f88 <is_button_pressed_1s>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d104      	bne.n	8000cd4 <fsm_setting_run+0x1d4>
			defaultTimeGreen--;
 8000cca:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <fsm_setting_run+0x260>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <fsm_setting_run+0x260>)
 8000cd2:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_short(2) == 1){
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f000 f939 	bl	8000f4c <is_button_pressed_short>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d104      	bne.n	8000cea <fsm_setting_run+0x1ea>
			defaultTimeGreen++;
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <fsm_setting_run+0x260>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	4a1e      	ldr	r2, [pc, #120]	; (8000d60 <fsm_setting_run+0x260>)
 8000ce8:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_1s(0) == 1){
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 f94c 	bl	8000f88 <is_button_pressed_1s>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d104      	bne.n	8000d00 <fsm_setting_run+0x200>
			defaultTimeGreen++;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <fsm_setting_run+0x260>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	4a18      	ldr	r2, [pc, #96]	; (8000d60 <fsm_setting_run+0x260>)
 8000cfe:	6013      	str	r3, [r2, #0]
		if(defaultTimeGreen < 0){
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <fsm_setting_run+0x260>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	da02      	bge.n	8000d0e <fsm_setting_run+0x20e>
			defaultTimeGreen = 99;
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <fsm_setting_run+0x260>)
 8000d0a:	2263      	movs	r2, #99	; 0x63
 8000d0c:	601a      	str	r2, [r3, #0]
		if(defaultTimeGreen > 99){
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <fsm_setting_run+0x260>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b63      	cmp	r3, #99	; 0x63
 8000d14:	dd02      	ble.n	8000d1c <fsm_setting_run+0x21c>
			defaultTimeGreen = 0;
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <fsm_setting_run+0x260>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
		if(is_button_pressed_1s(1) == 1 || is_button_pressed_short(1) == 1){
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f000 f933 	bl	8000f88 <is_button_pressed_1s>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d005      	beq.n	8000d34 <fsm_setting_run+0x234>
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f000 f90f 	bl	8000f4c <is_button_pressed_short>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d10c      	bne.n	8000d4e <fsm_setting_run+0x24e>
			setTimer1(250);
 8000d34:	20fa      	movs	r0, #250	; 0xfa
 8000d36:	f000 fc61 	bl	80015fc <setTimer1>
			status = AUTO_GREEN_RED;
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <fsm_setting_run+0x254>)
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	601a      	str	r2, [r3, #0]
		break;
 8000d40:	e005      	b.n	8000d4e <fsm_setting_run+0x24e>
		break;
 8000d42:	bf00      	nop
 8000d44:	e004      	b.n	8000d50 <fsm_setting_run+0x250>
		break;
 8000d46:	bf00      	nop
 8000d48:	e002      	b.n	8000d50 <fsm_setting_run+0x250>
		break;
 8000d4a:	bf00      	nop
 8000d4c:	e000      	b.n	8000d50 <fsm_setting_run+0x250>
		break;
 8000d4e:	bf00      	nop
	}
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000070 	.word	0x20000070
 8000d58:	2000000c 	.word	0x2000000c
 8000d5c:	20000014 	.word	0x20000014
 8000d60:	20000010 	.word	0x20000010

08000d64 <button_reading>:

// Counter for automatically detecting when a button is pressed more than 1 second
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];
static uint16_t counterForLongPressInterval[NO_OF_BUTTONS];

void button_reading(void) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
    for (int i = 0; i < NO_OF_BUTTONS; i++) {
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	e0d1      	b.n	8000f14 <button_reading+0x1b0>
        debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000d70:	4a6d      	ldr	r2, [pc, #436]	; (8000f28 <button_reading+0x1c4>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	7819      	ldrb	r1, [r3, #0]
 8000d78:	4a6c      	ldr	r2, [pc, #432]	; (8000f2c <button_reading+0x1c8>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	460a      	mov	r2, r1
 8000d80:	701a      	strb	r2, [r3, #0]

        // Update to handle multiple buttons
        switch(i) {
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d021      	beq.n	8000dcc <button_reading+0x68>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	dc2a      	bgt.n	8000de4 <button_reading+0x80>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <button_reading+0x38>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d00c      	beq.n	8000db4 <button_reading+0x50>
                break;
            case 2:
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
                break;
            default:
                break;
 8000d9a:	e023      	b.n	8000de4 <button_reading+0x80>
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	4864      	ldr	r0, [pc, #400]	; (8000f30 <button_reading+0x1cc>)
 8000da0:	f001 f8bc 	bl	8001f1c <HAL_GPIO_ReadPin>
 8000da4:	4603      	mov	r3, r0
 8000da6:	4619      	mov	r1, r3
 8000da8:	4a5f      	ldr	r2, [pc, #380]	; (8000f28 <button_reading+0x1c4>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	460a      	mov	r2, r1
 8000db0:	701a      	strb	r2, [r3, #0]
                break;
 8000db2:	e018      	b.n	8000de6 <button_reading+0x82>
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000db4:	2104      	movs	r1, #4
 8000db6:	485e      	ldr	r0, [pc, #376]	; (8000f30 <button_reading+0x1cc>)
 8000db8:	f001 f8b0 	bl	8001f1c <HAL_GPIO_ReadPin>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4a59      	ldr	r2, [pc, #356]	; (8000f28 <button_reading+0x1c4>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	460a      	mov	r2, r1
 8000dc8:	701a      	strb	r2, [r3, #0]
                break;
 8000dca:	e00c      	b.n	8000de6 <button_reading+0x82>
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000dcc:	2108      	movs	r1, #8
 8000dce:	4858      	ldr	r0, [pc, #352]	; (8000f30 <button_reading+0x1cc>)
 8000dd0:	f001 f8a4 	bl	8001f1c <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4a53      	ldr	r2, [pc, #332]	; (8000f28 <button_reading+0x1c4>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	460a      	mov	r2, r1
 8000de0:	701a      	strb	r2, [r3, #0]
                break;
 8000de2:	e000      	b.n	8000de6 <button_reading+0x82>
                break;
 8000de4:	bf00      	nop
        }

        if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 8000de6:	4a50      	ldr	r2, [pc, #320]	; (8000f28 <button_reading+0x1c4>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4413      	add	r3, r2
 8000dec:	781a      	ldrb	r2, [r3, #0]
 8000dee:	494f      	ldr	r1, [pc, #316]	; (8000f2c <button_reading+0x1c8>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	440b      	add	r3, r1
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	f040 8089 	bne.w	8000f0e <button_reading+0x1aa>
            buttonBuffer[i] = debounceButtonBuffer1[i]; // Debouncing logic
 8000dfc:	4a4a      	ldr	r2, [pc, #296]	; (8000f28 <button_reading+0x1c4>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	7819      	ldrb	r1, [r3, #0]
 8000e04:	4a4b      	ldr	r2, [pc, #300]	; (8000f34 <button_reading+0x1d0>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	460a      	mov	r2, r1
 8000e0c:	701a      	strb	r2, [r3, #0]

            if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000e0e:	4a49      	ldr	r2, [pc, #292]	; (8000f34 <button_reading+0x1d0>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4413      	add	r3, r2
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d144      	bne.n	8000ea4 <button_reading+0x140>
                // Button is pressed; we start counting
                if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000e1a:	4a47      	ldr	r2, [pc, #284]	; (8000f38 <button_reading+0x1d4>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e22:	2b63      	cmp	r3, #99	; 0x63
 8000e24:	d81f      	bhi.n	8000e66 <button_reading+0x102>
                    counterForButtonPress1s[i]++;
 8000e26:	4a44      	ldr	r2, [pc, #272]	; (8000f38 <button_reading+0x1d4>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	b299      	uxth	r1, r3
 8000e32:	4a41      	ldr	r2, [pc, #260]	; (8000f38 <button_reading+0x1d4>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    if (counterForButtonPress1s[i] == DURATION_FOR_AUTO_INCREASING) {
 8000e3a:	4a3f      	ldr	r2, [pc, #252]	; (8000f38 <button_reading+0x1d4>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e42:	2b64      	cmp	r3, #100	; 0x64
 8000e44:	d12e      	bne.n	8000ea4 <button_reading+0x140>
                        // Flag is turned on when 1 second has passed since the button was pressed
                        flagForButtonPress1s[i] = 1;
 8000e46:	4a3d      	ldr	r2, [pc, #244]	; (8000f3c <button_reading+0x1d8>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
                        flagForButtonPressShort[i] = 0; // Reset short press flag
 8000e50:	4a3b      	ldr	r2, [pc, #236]	; (8000f40 <button_reading+0x1dc>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
                        counterForLongPressInterval[i] = 0;
 8000e5a:	4a3a      	ldr	r2, [pc, #232]	; (8000f44 <button_reading+0x1e0>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2100      	movs	r1, #0
 8000e60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000e64:	e01e      	b.n	8000ea4 <button_reading+0x140>
                    }
                } else {
                    // The button is pressed for less than 1 second
                	counterForLongPressInterval[i]++;
 8000e66:	4a37      	ldr	r2, [pc, #220]	; (8000f44 <button_reading+0x1e0>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	b299      	uxth	r1, r3
 8000e72:	4a34      	ldr	r2, [pc, #208]	; (8000f44 <button_reading+0x1e0>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                	if (counterForLongPressInterval[i] >= 25) {
 8000e7a:	4a32      	ldr	r2, [pc, #200]	; (8000f44 <button_reading+0x1e0>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e82:	2b18      	cmp	r3, #24
 8000e84:	d90e      	bls.n	8000ea4 <button_reading+0x140>
						flagForButtonPressShort[i] = 0;
 8000e86:	4a2e      	ldr	r2, [pc, #184]	; (8000f40 <button_reading+0x1dc>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
						flagForButtonPress1s[i] = 1; // Reset long press flag
 8000e90:	4a2a      	ldr	r2, [pc, #168]	; (8000f3c <button_reading+0x1d8>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]
						counterForLongPressInterval[i] = 0;
 8000e9a:	4a2a      	ldr	r2, [pc, #168]	; (8000f44 <button_reading+0x1e0>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                	}
                }
            }

            if (buttonBuffer[i] == BUTTON_IS_RELEASED && previousButtonBuffer[i] == BUTTON_IS_PRESSED) {
 8000ea4:	4a23      	ldr	r2, [pc, #140]	; (8000f34 <button_reading+0x1d0>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d125      	bne.n	8000efc <button_reading+0x198>
 8000eb0:	4a25      	ldr	r2, [pc, #148]	; (8000f48 <button_reading+0x1e4>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d11f      	bne.n	8000efc <button_reading+0x198>
				// Button has just been released
				if (counterForButtonPress1s[i] > 0 && counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000ebc:	4a1e      	ldr	r2, [pc, #120]	; (8000f38 <button_reading+0x1d4>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00a      	beq.n	8000ede <button_reading+0x17a>
 8000ec8:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <button_reading+0x1d4>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ed0:	2b63      	cmp	r3, #99	; 0x63
 8000ed2:	d804      	bhi.n	8000ede <button_reading+0x17a>
					// It was a short press
					flagForButtonPressShort[i] = 1;
 8000ed4:	4a1a      	ldr	r2, [pc, #104]	; (8000f40 <button_reading+0x1dc>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	2201      	movs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
				}
				// Reset counters and flags on release
				counterForButtonPress1s[i] = 0;
 8000ede:	4a16      	ldr	r2, [pc, #88]	; (8000f38 <button_reading+0x1d4>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				counterForLongPressInterval[i] = 0;
 8000ee8:	4a16      	ldr	r2, [pc, #88]	; (8000f44 <button_reading+0x1e0>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2100      	movs	r1, #0
 8000eee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <button_reading+0x1d8>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
			}

			// Store the current button state for the next iteration
			previousButtonBuffer[i] = buttonBuffer[i];
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <button_reading+0x1d0>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	7819      	ldrb	r1, [r3, #0]
 8000f04:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <button_reading+0x1e4>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	460a      	mov	r2, r1
 8000f0c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NO_OF_BUTTONS; i++) {
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3301      	adds	r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	f77f af2a 	ble.w	8000d70 <button_reading+0xc>
        }
    }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000007c 	.word	0x2000007c
 8000f2c:	20000080 	.word	0x20000080
 8000f30:	40010800 	.word	0x40010800
 8000f34:	20000074 	.word	0x20000074
 8000f38:	2000008c 	.word	0x2000008c
 8000f3c:	20000084 	.word	0x20000084
 8000f40:	20000088 	.word	0x20000088
 8000f44:	20000094 	.word	0x20000094
 8000f48:	20000078 	.word	0x20000078

08000f4c <is_button_pressed_short>:

// Function to check if button is pressed shorter than 1s
unsigned char is_button_pressed_short(uint8_t index) {
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
    if (index >= NO_OF_BUTTONS) return 0;
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d901      	bls.n	8000f60 <is_button_pressed_short+0x14>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e00b      	b.n	8000f78 <is_button_pressed_short+0x2c>
    if (flagForButtonPressShort[index] == 1) {
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <is_button_pressed_short+0x38>)
 8000f64:	5cd3      	ldrb	r3, [r2, r3]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d105      	bne.n	8000f76 <is_button_pressed_short+0x2a>
        flagForButtonPressShort[index] = 0; // Reset the flag
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <is_button_pressed_short+0x38>)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	54d1      	strb	r1, [r2, r3]
        return 1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <is_button_pressed_short+0x2c>
    }
    return 0;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000088 	.word	0x20000088

08000f88 <is_button_pressed_1s>:

// Function to check if button is pressed longer than 1s
unsigned char is_button_pressed_1s(uint8_t index) {
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
    if (index >= NO_OF_BUTTONS) return 0;
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d901      	bls.n	8000f9c <is_button_pressed_1s+0x14>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	e00b      	b.n	8000fb4 <is_button_pressed_1s+0x2c>
    if (flagForButtonPress1s[index] == 1) {
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <is_button_pressed_1s+0x38>)
 8000fa0:	5cd3      	ldrb	r3, [r2, r3]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d105      	bne.n	8000fb2 <is_button_pressed_1s+0x2a>
        flagForButtonPress1s[index] = 0; // Reset the flag
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <is_button_pressed_1s+0x38>)
 8000faa:	2100      	movs	r1, #0
 8000fac:	54d1      	strb	r1, [r2, r3]
        return 1;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <is_button_pressed_1s+0x2c>
    }
    return 0;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000084 	.word	0x20000084

08000fc4 <display7SEG>:
//	| 0x66 = 01100110 = Num 4 | 0x6D = 01101101 = Num 5 | 0x7D = 01111101 = Num 6 |
//	| 0x07 = 00000111 = Num 7 | 0x7F = 01111111 = Num 8 | 0x6F = 01101111 = Num 9 |
int led_buffer[MAX_BUFF] = {0,0,0,0};

//------Display LED 7SEG--------//
void display7SEG(int number){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	uint16_t bit_var = led_matrix[number];
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <display7SEG+0x38>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd4:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, bit_var, RESET);
 8000fd6:	89fb      	ldrh	r3, [r7, #14]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4808      	ldr	r0, [pc, #32]	; (8001000 <display7SEG+0x3c>)
 8000fde:	f000 ffb4 	bl	8001f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ~bit_var, SET);	// "~" mean NOT operator, inverts the bit from 1 to 0 and vice versa
 8000fe2:	89fb      	ldrh	r3, [r7, #14]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4619      	mov	r1, r3
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <display7SEG+0x3c>)
 8000fee:	f000 ffac 	bl	8001f4a <HAL_GPIO_WritePin>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000030 	.word	0x20000030
 8001000:	40010c00 	.word	0x40010c00

08001004 <updateClockBuffer>:

//------Update Clock Buffer--------//
//If counter1 < 10, e.g. value = 2, 7SEG1 display 0 and 7SEG2 display 2
//If counter1 > 10, e.g. value = 12, 7SEG1 display 1 and 7SEG2 display 2
void updateClockBuffer(int counter1, int counter2){
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
	    led_buffer[0] = counter1 / 10;	// The divider / is to take the digit at tens
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a18      	ldr	r2, [pc, #96]	; (8001074 <updateClockBuffer+0x70>)
 8001012:	fb82 1203 	smull	r1, r2, r2, r3
 8001016:	1092      	asrs	r2, r2, #2
 8001018:	17db      	asrs	r3, r3, #31
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	4a16      	ldr	r2, [pc, #88]	; (8001078 <updateClockBuffer+0x74>)
 800101e:	6013      	str	r3, [r2, #0]
		led_buffer[1] = counter1 % 10;	// The divider % is to take the digit at units
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <updateClockBuffer+0x70>)
 8001024:	fb83 2301 	smull	r2, r3, r3, r1
 8001028:	109a      	asrs	r2, r3, #2
 800102a:	17cb      	asrs	r3, r1, #31
 800102c:	1ad2      	subs	r2, r2, r3
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	1aca      	subs	r2, r1, r3
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <updateClockBuffer+0x74>)
 800103a:	605a      	str	r2, [r3, #4]
		led_buffer[2] = counter2 / 10;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <updateClockBuffer+0x70>)
 8001040:	fb82 1203 	smull	r1, r2, r2, r3
 8001044:	1092      	asrs	r2, r2, #2
 8001046:	17db      	asrs	r3, r3, #31
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <updateClockBuffer+0x74>)
 800104c:	6093      	str	r3, [r2, #8]
		led_buffer[3] = counter2 % 10;
 800104e:	6839      	ldr	r1, [r7, #0]
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <updateClockBuffer+0x70>)
 8001052:	fb83 2301 	smull	r2, r3, r3, r1
 8001056:	109a      	asrs	r2, r3, #2
 8001058:	17cb      	asrs	r3, r1, #31
 800105a:	1ad2      	subs	r2, r2, r3
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	1aca      	subs	r2, r1, r3
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <updateClockBuffer+0x74>)
 8001068:	60da      	str	r2, [r3, #12]
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	66666667 	.word	0x66666667
 8001078:	2000009c 	.word	0x2000009c

0800107c <update7SEG>:

//------Update Clock Buffer to LED 7SEG--------//
// show which led 7 segment is ON and the value it display
void update7SEG(int index){
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b03      	cmp	r3, #3
 8001088:	d850      	bhi.n	800112c <update7SEG+0xb0>
 800108a:	a201      	add	r2, pc, #4	; (adr r2, 8001090 <update7SEG+0x14>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	080010a1 	.word	0x080010a1
 8001094:	080010c3 	.word	0x080010c3
 8001098:	080010e5 	.word	0x080010e5
 800109c:	08001109 	.word	0x08001109
	switch(index){
	case 0:
		// Display the first 7 SEG with led_buffer[0]
		HAL_GPIO_WritePin(GPIOA, EN0_Pin, RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2140      	movs	r1, #64	; 0x40
 80010a4:	4824      	ldr	r0, [pc, #144]	; (8001138 <update7SEG+0xbc>)
 80010a6:	f000 ff50 	bl	8001f4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 80010aa:	2201      	movs	r2, #1
 80010ac:	f44f 7160 	mov.w	r1, #896	; 0x380
 80010b0:	4821      	ldr	r0, [pc, #132]	; (8001138 <update7SEG+0xbc>)
 80010b2:	f000 ff4a 	bl	8001f4a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <update7SEG+0xc0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff82 	bl	8000fc4 <display7SEG>
		break;
 80010c0:	e035      	b.n	800112e <update7SEG+0xb2>
	case 1:
		// Display the second 7 SEG with led_buffer[1]
		HAL_GPIO_WritePin(GPIOA, EN1_Pin, RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2180      	movs	r1, #128	; 0x80
 80010c6:	481c      	ldr	r0, [pc, #112]	; (8001138 <update7SEG+0xbc>)
 80010c8:	f000 ff3f 	bl	8001f4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	f44f 7150 	mov.w	r1, #832	; 0x340
 80010d2:	4819      	ldr	r0, [pc, #100]	; (8001138 <update7SEG+0xbc>)
 80010d4:	f000 ff39 	bl	8001f4a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <update7SEG+0xc0>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff71 	bl	8000fc4 <display7SEG>
		break;
 80010e2:	e024      	b.n	800112e <update7SEG+0xb2>
	case 2:
		// Display the third 7 SEG with led_buffer[2]
		HAL_GPIO_WritePin(GPIOA, EN2_Pin, RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ea:	4813      	ldr	r0, [pc, #76]	; (8001138 <update7SEG+0xbc>)
 80010ec:	f000 ff2d 	bl	8001f4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 80010f6:	4810      	ldr	r0, [pc, #64]	; (8001138 <update7SEG+0xbc>)
 80010f8:	f000 ff27 	bl	8001f4a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <update7SEG+0xc0>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff5f 	bl	8000fc4 <display7SEG>
		break;
 8001106:	e012      	b.n	800112e <update7SEG+0xb2>
	case 3:
		// Display the forth 7 SEG with led_buffer[3]
		HAL_GPIO_WritePin(GPIOA, EN3_Pin, RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110e:	480a      	ldr	r0, [pc, #40]	; (8001138 <update7SEG+0xbc>)
 8001110:	f000 ff1b 	bl	8001f4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin| EN1_Pin | EN2_Pin , SET);
 8001114:	2201      	movs	r2, #1
 8001116:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <update7SEG+0xbc>)
 800111c:	f000 ff15 	bl	8001f4a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <update7SEG+0xc0>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff4d 	bl	8000fc4 <display7SEG>
		break;
 800112a:	e000      	b.n	800112e <update7SEG+0xb2>
	default:
		break;
 800112c:	bf00      	nop
	}
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40010800 	.word	0x40010800
 800113c:	2000009c 	.word	0x2000009c

08001140 <scanLed>:
//-----Display Clock in LED 7SEG with 250ms for each LED-----//
int index_led = 0;
void scanLed(){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 8001144:	4b4d      	ldr	r3, [pc, #308]	; (800127c <scanLed+0x13c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	f040 8095 	bne.w	8001278 <scanLed+0x138>
		if(status == 2 || 3 || 4 || 5){
			if(is_button_pressed_short(2) == 1){
 800114e:	2002      	movs	r0, #2
 8001150:	f7ff fefc 	bl	8000f4c <is_button_pressed_short>
 8001154:	4603      	mov	r3, r0
 8001156:	2b01      	cmp	r3, #1
 8001158:	d11d      	bne.n	8001196 <scanLed+0x56>
				if(tmpRED != defaultTimeRed) tmpRED = defaultTimeRed;
 800115a:	4b49      	ldr	r3, [pc, #292]	; (8001280 <scanLed+0x140>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b49      	ldr	r3, [pc, #292]	; (8001284 <scanLed+0x144>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d003      	beq.n	800116e <scanLed+0x2e>
 8001166:	4b47      	ldr	r3, [pc, #284]	; (8001284 <scanLed+0x144>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a45      	ldr	r2, [pc, #276]	; (8001280 <scanLed+0x140>)
 800116c:	6013      	str	r3, [r2, #0]
				if(tmpAMBER != defaultTimeAmber) tmpAMBER = defaultTimeAmber;
 800116e:	4b46      	ldr	r3, [pc, #280]	; (8001288 <scanLed+0x148>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4b46      	ldr	r3, [pc, #280]	; (800128c <scanLed+0x14c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d003      	beq.n	8001182 <scanLed+0x42>
 800117a:	4b44      	ldr	r3, [pc, #272]	; (800128c <scanLed+0x14c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a42      	ldr	r2, [pc, #264]	; (8001288 <scanLed+0x148>)
 8001180:	6013      	str	r3, [r2, #0]
				if(tmpGREEN != defaultTimeGreen) tmpRED = defaultTimeGreen;
 8001182:	4b43      	ldr	r3, [pc, #268]	; (8001290 <scanLed+0x150>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4b43      	ldr	r3, [pc, #268]	; (8001294 <scanLed+0x154>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d003      	beq.n	8001196 <scanLed+0x56>
 800118e:	4b41      	ldr	r3, [pc, #260]	; (8001294 <scanLed+0x154>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a3b      	ldr	r2, [pc, #236]	; (8001280 <scanLed+0x140>)
 8001194:	6013      	str	r3, [r2, #0]
			}
			if(is_button_pressed_1s(2) == 1){
 8001196:	2002      	movs	r0, #2
 8001198:	f7ff fef6 	bl	8000f88 <is_button_pressed_1s>
 800119c:	4603      	mov	r3, r0
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d13a      	bne.n	8001218 <scanLed+0xd8>
				if((defaultTimeRed - (defaultTimeGreen + defaultTimeAmber)) != 0){
 80011a2:	4b3c      	ldr	r3, [pc, #240]	; (8001294 <scanLed+0x154>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4b39      	ldr	r3, [pc, #228]	; (800128c <scanLed+0x14c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	441a      	add	r2, r3
 80011ac:	4b35      	ldr	r3, [pc, #212]	; (8001284 <scanLed+0x144>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d031      	beq.n	8001218 <scanLed+0xd8>
					if((defaultTimeRed - (defaultTimeGreen + defaultTimeAmber)) > 0){
 80011b4:	4b33      	ldr	r3, [pc, #204]	; (8001284 <scanLed+0x144>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b36      	ldr	r3, [pc, #216]	; (8001294 <scanLed+0x154>)
 80011ba:	6819      	ldr	r1, [r3, #0]
 80011bc:	4b33      	ldr	r3, [pc, #204]	; (800128c <scanLed+0x14c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	440b      	add	r3, r1
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	dd0b      	ble.n	80011e0 <scanLed+0xa0>
						defaultTimeAmber++;
 80011c8:	4b30      	ldr	r3, [pc, #192]	; (800128c <scanLed+0x14c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	4a2f      	ldr	r2, [pc, #188]	; (800128c <scanLed+0x14c>)
 80011d0:	6013      	str	r3, [r2, #0]
						defaultTimeGreen = defaultTimeRed - defaultTimeAmber;
 80011d2:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <scanLed+0x144>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4b2d      	ldr	r3, [pc, #180]	; (800128c <scanLed+0x14c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	4a2d      	ldr	r2, [pc, #180]	; (8001294 <scanLed+0x154>)
 80011de:	6013      	str	r3, [r2, #0]
					}
					if((defaultTimeRed - (defaultTimeGreen + defaultTimeAmber)) < 0){
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <scanLed+0x144>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <scanLed+0x154>)
 80011e6:	6819      	ldr	r1, [r3, #0]
 80011e8:	4b28      	ldr	r3, [pc, #160]	; (800128c <scanLed+0x14c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	440b      	add	r3, r1
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	da11      	bge.n	8001218 <scanLed+0xd8>
						if(defaultTimeRed < (defaultTimeGreen + defaultTimeAmber)){
 80011f4:	4b27      	ldr	r3, [pc, #156]	; (8001294 <scanLed+0x154>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b24      	ldr	r3, [pc, #144]	; (800128c <scanLed+0x14c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	441a      	add	r2, r3
 80011fe:	4b21      	ldr	r3, [pc, #132]	; (8001284 <scanLed+0x144>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	dd08      	ble.n	8001218 <scanLed+0xd8>
							defaultTimeAmber = 2;
 8001206:	4b21      	ldr	r3, [pc, #132]	; (800128c <scanLed+0x14c>)
 8001208:	2202      	movs	r2, #2
 800120a:	601a      	str	r2, [r3, #0]
							defaultTimeGreen = 3;
 800120c:	4b21      	ldr	r3, [pc, #132]	; (8001294 <scanLed+0x154>)
 800120e:	2203      	movs	r2, #3
 8001210:	601a      	str	r2, [r3, #0]
							defaultTimeRed = 5;
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <scanLed+0x144>)
 8001214:	2205      	movs	r2, #5
 8001216:	601a      	str	r2, [r3, #0]
						}
					}
				}
			}
		}
		if(status == MAN_MODE2)
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <scanLed+0x158>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b0b      	cmp	r3, #11
 800121e:	d105      	bne.n	800122c <scanLed+0xec>
			updateClockBuffer(2, tmpRED);
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <scanLed+0x140>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	2002      	movs	r0, #2
 8001228:	f7ff feec 	bl	8001004 <updateClockBuffer>
		if(status == MAN_MODE3)
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <scanLed+0x158>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b0c      	cmp	r3, #12
 8001232:	d105      	bne.n	8001240 <scanLed+0x100>
			updateClockBuffer(3, tmpAMBER);
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <scanLed+0x148>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	2003      	movs	r0, #3
 800123c:	f7ff fee2 	bl	8001004 <updateClockBuffer>
		if(status == MAN_MODE4)
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <scanLed+0x158>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b0d      	cmp	r3, #13
 8001246:	d105      	bne.n	8001254 <scanLed+0x114>
			updateClockBuffer(4, tmpGREEN);
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <scanLed+0x150>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	2004      	movs	r0, #4
 8001250:	f7ff fed8 	bl	8001004 <updateClockBuffer>
		update7SEG(index_led++);
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <scanLed+0x15c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	4910      	ldr	r1, [pc, #64]	; (800129c <scanLed+0x15c>)
 800125c:	600a      	str	r2, [r1, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff0c 	bl	800107c <update7SEG>
		if(index_led > 3) index_led = 0;
 8001264:	4b0d      	ldr	r3, [pc, #52]	; (800129c <scanLed+0x15c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b03      	cmp	r3, #3
 800126a:	dd02      	ble.n	8001272 <scanLed+0x132>
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <scanLed+0x15c>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
		setTimer3(250);
 8001272:	20fa      	movs	r0, #250	; 0xfa
 8001274:	f000 f9fa 	bl	800166c <setTimer3>
	}
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200000c4 	.word	0x200000c4
 8001280:	20000024 	.word	0x20000024
 8001284:	2000000c 	.word	0x2000000c
 8001288:	2000002c 	.word	0x2000002c
 800128c:	20000014 	.word	0x20000014
 8001290:	20000028 	.word	0x20000028
 8001294:	20000010 	.word	0x20000010
 8001298:	20000070 	.word	0x20000070
 800129c:	200000ac 	.word	0x200000ac

080012a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a4:	f000 fb50 	bl	8001948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a8:	f000 f81a 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ac:	f000 f8a0 	bl	80013f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012b0:	f000 f852 	bl	8001358 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80012b4:	4808      	ldr	r0, [pc, #32]	; (80012d8 <main+0x38>)
 80012b6:	f001 fa8d 	bl	80027d4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <main+0x3c>)
 80012bc:	2201      	movs	r2, #1
 80012be:	601a      	str	r2, [r3, #0]
  setTimer3(100);
 80012c0:	2064      	movs	r0, #100	; 0x64
 80012c2:	f000 f9d3 	bl	800166c <setTimer3>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_automatic_run();
 80012c6:	f7fe ff41 	bl	800014c <fsm_automatic_run>
	  fsm_manual_run();
 80012ca:	f7ff f967 	bl	800059c <fsm_manual_run>
	  fsm_setting_run();
 80012ce:	f7ff fc17 	bl	8000b00 <fsm_setting_run>
	  scanLed();
 80012d2:	f7ff ff35 	bl	8001140 <scanLed>
	  fsm_automatic_run();
 80012d6:	e7f6      	b.n	80012c6 <main+0x26>
 80012d8:	200000d0 	.word	0x200000d0
 80012dc:	20000070 	.word	0x20000070

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b090      	sub	sp, #64	; 0x40
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0318 	add.w	r3, r7, #24
 80012ea:	2228      	movs	r2, #40	; 0x28
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 fe20 	bl	8002f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001302:	2302      	movs	r3, #2
 8001304:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001306:	2301      	movs	r3, #1
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130a:	2310      	movs	r3, #16
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800130e:	2300      	movs	r3, #0
 8001310:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001312:	f107 0318 	add.w	r3, r7, #24
 8001316:	4618      	mov	r0, r3
 8001318:	f000 fe30 	bl	8001f7c <HAL_RCC_OscConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001322:	f000 f8d8 	bl	80014d6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001326:	230f      	movs	r3, #15
 8001328:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f001 f89c 	bl	800247c <HAL_RCC_ClockConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800134a:	f000 f8c4 	bl	80014d6 <Error_Handler>
  }
}
 800134e:	bf00      	nop
 8001350:	3740      	adds	r7, #64	; 0x40
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_TIM2_Init+0x94>)
 8001376:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800137a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <MX_TIM2_Init+0x94>)
 800137e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001382:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_TIM2_Init+0x94>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MX_TIM2_Init+0x94>)
 800138c:	2209      	movs	r2, #9
 800138e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_TIM2_Init+0x94>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <MX_TIM2_Init+0x94>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800139c:	4813      	ldr	r0, [pc, #76]	; (80013ec <MX_TIM2_Init+0x94>)
 800139e:	f001 f9c9 	bl	8002734 <HAL_TIM_Base_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013a8:	f000 f895 	bl	80014d6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	4619      	mov	r1, r3
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <MX_TIM2_Init+0x94>)
 80013ba:	f001 fb47 	bl	8002a4c <HAL_TIM_ConfigClockSource>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013c4:	f000 f887 	bl	80014d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013d0:	463b      	mov	r3, r7
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_TIM2_Init+0x94>)
 80013d6:	f001 fd1f 	bl	8002e18 <HAL_TIMEx_MasterConfigSynchronization>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013e0:	f000 f879 	bl	80014d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200000d0 	.word	0x200000d0

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <MX_GPIO_Init+0xb8>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a27      	ldr	r2, [pc, #156]	; (80014a8 <MX_GPIO_Init+0xb8>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <MX_GPIO_Init+0xb8>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <MX_GPIO_Init+0xb8>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a21      	ldr	r2, [pc, #132]	; (80014a8 <MX_GPIO_Init+0xb8>)
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <MX_GPIO_Init+0xb8>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800143a:	481c      	ldr	r0, [pc, #112]	; (80014ac <MX_GPIO_Init+0xbc>)
 800143c:	f000 fd85 	bl	8001f4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|GREEN1_Pin
 8001440:	2200      	movs	r2, #0
 8001442:	f643 717f 	movw	r1, #16255	; 0x3f7f
 8001446:	481a      	ldr	r0, [pc, #104]	; (80014b0 <MX_GPIO_Init+0xc0>)
 8001448:	f000 fd7f 	bl	8001f4a <HAL_GPIO_WritePin>
                          |RED2_Pin|AMBER2_Pin|GREEN2_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|RED1_Pin
                          |AMBER1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 800144c:	230e      	movs	r3, #14
 800144e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	4619      	mov	r1, r3
 800145e:	4813      	ldr	r0, [pc, #76]	; (80014ac <MX_GPIO_Init+0xbc>)
 8001460:	f000 fbe2 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8001464:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001468:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2302      	movs	r3, #2
 8001474:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	4619      	mov	r1, r3
 800147c:	480b      	ldr	r0, [pc, #44]	; (80014ac <MX_GPIO_Init+0xbc>)
 800147e:	f000 fbd3 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin GREEN1_Pin
                           RED2_Pin AMBER2_Pin GREEN2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin RED1_Pin
                           AMBER1_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|GREEN1_Pin
 8001482:	f643 737f 	movw	r3, #16255	; 0x3f7f
 8001486:	60bb      	str	r3, [r7, #8]
                          |RED2_Pin|AMBER2_Pin|GREEN2_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|RED1_Pin
                          |AMBER1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2302      	movs	r3, #2
 8001492:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4619      	mov	r1, r3
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_GPIO_Init+0xc0>)
 800149c:	f000 fbc4 	bl	8001c28 <HAL_GPIO_Init>

}
 80014a0:	bf00      	nop
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40010800 	.word	0x40010800
 80014b0:	40010c00 	.word	0x40010c00

080014b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c4:	d103      	bne.n	80014ce <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 80014c6:	f7ff fc4d 	bl	8000d64 <button_reading>
		timerRun();
 80014ca:	f000 f907 	bl	80016dc <timerRun>
	}
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014da:	b672      	cpsid	i
}
 80014dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014de:	e7fe      	b.n	80014de <Error_Handler+0x8>

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_MspInit+0x5c>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	4a14      	ldr	r2, [pc, #80]	; (800153c <HAL_MspInit+0x5c>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6193      	str	r3, [r2, #24]
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_MspInit+0x5c>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <HAL_MspInit+0x5c>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a0e      	ldr	r2, [pc, #56]	; (800153c <HAL_MspInit+0x5c>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	61d3      	str	r3, [r2, #28]
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <HAL_MspInit+0x5c>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_MspInit+0x60>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <HAL_MspInit+0x60>)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	40021000 	.word	0x40021000
 8001540:	40010000 	.word	0x40010000

08001544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001554:	d113      	bne.n	800157e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_TIM_Base_MspInit+0x44>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <HAL_TIM_Base_MspInit+0x44>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	61d3      	str	r3, [r2, #28]
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_TIM_Base_MspInit+0x44>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	201c      	movs	r0, #28
 8001574:	f000 fb21 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001578:	201c      	movs	r0, #28
 800157a:	f000 fb3a 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <NMI_Handler+0x4>

08001592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <MemManage_Handler+0x4>

0800159e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <BusFault_Handler+0x4>

080015a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <UsageFault_Handler+0x4>

080015aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr

080015c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d2:	f000 f9ff 	bl	80019d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <TIM2_IRQHandler+0x10>)
 80015e2:	f001 f943 	bl	800286c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200000d0 	.word	0x200000d0

080015f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <setTimer1>:
int timer3_counter = 0;
int timer3_flag = 0;
int timer4_counter = 0;
int timer4_flag = 0;

void setTimer1(int duration){
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <setTimer1+0x2c>)
 8001608:	fb82 1203 	smull	r1, r2, r2, r3
 800160c:	1092      	asrs	r2, r2, #2
 800160e:	17db      	asrs	r3, r3, #31
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	4a06      	ldr	r2, [pc, #24]	; (800162c <setTimer1+0x30>)
 8001614:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <setTimer1+0x34>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	66666667 	.word	0x66666667
 800162c:	200000b0 	.word	0x200000b0
 8001630:	200000b4 	.word	0x200000b4

08001634 <setTimer2>:

void setTimer2(int duration){
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a08      	ldr	r2, [pc, #32]	; (8001660 <setTimer2+0x2c>)
 8001640:	fb82 1203 	smull	r1, r2, r2, r3
 8001644:	1092      	asrs	r2, r2, #2
 8001646:	17db      	asrs	r3, r3, #31
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	4a06      	ldr	r2, [pc, #24]	; (8001664 <setTimer2+0x30>)
 800164c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <setTimer2+0x34>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	66666667 	.word	0x66666667
 8001664:	200000b8 	.word	0x200000b8
 8001668:	200000bc 	.word	0x200000bc

0800166c <setTimer3>:

void setTimer3(int duration){
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a08      	ldr	r2, [pc, #32]	; (8001698 <setTimer3+0x2c>)
 8001678:	fb82 1203 	smull	r1, r2, r2, r3
 800167c:	1092      	asrs	r2, r2, #2
 800167e:	17db      	asrs	r3, r3, #31
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	4a06      	ldr	r2, [pc, #24]	; (800169c <setTimer3+0x30>)
 8001684:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <setTimer3+0x34>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	66666667 	.word	0x66666667
 800169c:	200000c0 	.word	0x200000c0
 80016a0:	200000c4 	.word	0x200000c4

080016a4 <setTimer4>:

void setTimer4(int duration){
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <setTimer4+0x2c>)
 80016b0:	fb82 1203 	smull	r1, r2, r2, r3
 80016b4:	1092      	asrs	r2, r2, #2
 80016b6:	17db      	asrs	r3, r3, #31
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <setTimer4+0x30>)
 80016bc:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <setTimer4+0x34>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	66666667 	.word	0x66666667
 80016d4:	200000c8 	.word	0x200000c8
 80016d8:	200000cc 	.word	0x200000cc

080016dc <timerRun>:

void timerRun(){
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <timerRun+0x8c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	dd0b      	ble.n	8001700 <timerRun+0x24>
		timer1_counter--;
 80016e8:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <timerRun+0x8c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	4a1e      	ldr	r2, [pc, #120]	; (8001768 <timerRun+0x8c>)
 80016f0:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <timerRun+0x8c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	dc02      	bgt.n	8001700 <timerRun+0x24>
			timer1_flag = 1;
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <timerRun+0x90>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <timerRun+0x94>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	dd0b      	ble.n	8001720 <timerRun+0x44>
		timer2_counter--;
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <timerRun+0x94>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3b01      	subs	r3, #1
 800170e:	4a18      	ldr	r2, [pc, #96]	; (8001770 <timerRun+0x94>)
 8001710:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <timerRun+0x94>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	dc02      	bgt.n	8001720 <timerRun+0x44>
			timer2_flag = 1;
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <timerRun+0x98>)
 800171c:	2201      	movs	r2, #1
 800171e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <timerRun+0x9c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	dd0b      	ble.n	8001740 <timerRun+0x64>
		timer3_counter--;
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <timerRun+0x9c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3b01      	subs	r3, #1
 800172e:	4a12      	ldr	r2, [pc, #72]	; (8001778 <timerRun+0x9c>)
 8001730:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <timerRun+0x9c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	dc02      	bgt.n	8001740 <timerRun+0x64>
			timer3_flag = 1;
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <timerRun+0xa0>)
 800173c:	2201      	movs	r2, #1
 800173e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <timerRun+0xa4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	dd0b      	ble.n	8001760 <timerRun+0x84>
		timer4_counter--;
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <timerRun+0xa4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3b01      	subs	r3, #1
 800174e:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <timerRun+0xa4>)
 8001750:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <timerRun+0xa4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	dc02      	bgt.n	8001760 <timerRun+0x84>
			timer4_flag = 1;
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <timerRun+0xa8>)
 800175c:	2201      	movs	r2, #1
 800175e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	200000b0 	.word	0x200000b0
 800176c:	200000b4 	.word	0x200000b4
 8001770:	200000b8 	.word	0x200000b8
 8001774:	200000bc 	.word	0x200000bc
 8001778:	200000c0 	.word	0x200000c0
 800177c:	200000c4 	.word	0x200000c4
 8001780:	200000c8 	.word	0x200000c8
 8001784:	200000cc 	.word	0x200000cc

08001788 <setTrafficRed1>:
 *      Author: phuct
 */

#include "traffic.h"

void setTrafficRed1(){
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 800178c:	2201      	movs	r2, #1
 800178e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001792:	4808      	ldr	r0, [pc, #32]	; (80017b4 <setTrafficRed1+0x2c>)
 8001794:	f000 fbd9 	bl	8001f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER1_GPIO_Port, AMBER1_Pin, GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <setTrafficRed1+0x2c>)
 80017a0:	f000 fbd3 	bl	8001f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017aa:	4802      	ldr	r0, [pc, #8]	; (80017b4 <setTrafficRed1+0x2c>)
 80017ac:	f000 fbcd 	bl	8001f4a <HAL_GPIO_WritePin>
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40010c00 	.word	0x40010c00

080017b8 <setTrafficAmber1>:

void setTrafficAmber1(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c2:	4808      	ldr	r0, [pc, #32]	; (80017e4 <setTrafficAmber1+0x2c>)
 80017c4:	f000 fbc1 	bl	8001f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER1_GPIO_Port, AMBER1_Pin, GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <setTrafficAmber1+0x2c>)
 80017d0:	f000 fbbb 	bl	8001f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017da:	4802      	ldr	r0, [pc, #8]	; (80017e4 <setTrafficAmber1+0x2c>)
 80017dc:	f000 fbb5 	bl	8001f4a <HAL_GPIO_WritePin>
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40010c00 	.word	0x40010c00

080017e8 <setTrafficGreen1>:

void setTrafficGreen1(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f2:	4808      	ldr	r0, [pc, #32]	; (8001814 <setTrafficGreen1+0x2c>)
 80017f4:	f000 fba9 	bl	8001f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER1_GPIO_Port, AMBER1_Pin, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <setTrafficGreen1+0x2c>)
 8001800:	f000 fba3 	bl	8001f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800180a:	4802      	ldr	r0, [pc, #8]	; (8001814 <setTrafficGreen1+0x2c>)
 800180c:	f000 fb9d 	bl	8001f4a <HAL_GPIO_WritePin>
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40010c00 	.word	0x40010c00

08001818 <setTrafficRed2>:

void setTrafficRed2(){
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001822:	4808      	ldr	r0, [pc, #32]	; (8001844 <setTrafficRed2+0x2c>)
 8001824:	f000 fb91 	bl	8001f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, GPIO_PIN_RESET);
 8001828:	2200      	movs	r2, #0
 800182a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <setTrafficRed2+0x2c>)
 8001830:	f000 fb8b 	bl	8001f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800183a:	4802      	ldr	r0, [pc, #8]	; (8001844 <setTrafficRed2+0x2c>)
 800183c:	f000 fb85 	bl	8001f4a <HAL_GPIO_WritePin>
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40010c00 	.word	0x40010c00

08001848 <setTrafficAmber2>:

void setTrafficAmber2(){
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001852:	4808      	ldr	r0, [pc, #32]	; (8001874 <setTrafficAmber2+0x2c>)
 8001854:	f000 fb79 	bl	8001f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <setTrafficAmber2+0x2c>)
 8001860:	f000 fb73 	bl	8001f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800186a:	4802      	ldr	r0, [pc, #8]	; (8001874 <setTrafficAmber2+0x2c>)
 800186c:	f000 fb6d 	bl	8001f4a <HAL_GPIO_WritePin>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40010c00 	.word	0x40010c00

08001878 <setTrafficGreen2>:

void setTrafficGreen2(){
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 800187c:	2200      	movs	r2, #0
 800187e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001882:	4808      	ldr	r0, [pc, #32]	; (80018a4 <setTrafficGreen2+0x2c>)
 8001884:	f000 fb61 	bl	8001f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, GPIO_PIN_RESET);
 8001888:	2200      	movs	r2, #0
 800188a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <setTrafficGreen2+0x2c>)
 8001890:	f000 fb5b 	bl	8001f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 8001894:	2201      	movs	r2, #1
 8001896:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800189a:	4802      	ldr	r0, [pc, #8]	; (80018a4 <setTrafficGreen2+0x2c>)
 800189c:	f000 fb55 	bl	8001f4a <HAL_GPIO_WritePin>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40010c00 	.word	0x40010c00

080018a8 <setTrafficOff>:

void setTrafficOff(){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018b2:	4811      	ldr	r0, [pc, #68]	; (80018f8 <setTrafficOff+0x50>)
 80018b4:	f000 fb49 	bl	8001f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018be:	480e      	ldr	r0, [pc, #56]	; (80018f8 <setTrafficOff+0x50>)
 80018c0:	f000 fb43 	bl	8001f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER1_GPIO_Port, AMBER1_Pin, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ca:	480b      	ldr	r0, [pc, #44]	; (80018f8 <setTrafficOff+0x50>)
 80018cc:	f000 fb3d 	bl	8001f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d6:	4808      	ldr	r0, [pc, #32]	; (80018f8 <setTrafficOff+0x50>)
 80018d8:	f000 fb37 	bl	8001f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, GPIO_PIN_RESET);
 80018dc:	2200      	movs	r2, #0
 80018de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <setTrafficOff+0x50>)
 80018e4:	f000 fb31 	bl	8001f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 80018e8:	2200      	movs	r2, #0
 80018ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ee:	4802      	ldr	r0, [pc, #8]	; (80018f8 <setTrafficOff+0x50>)
 80018f0:	f000 fb2b 	bl	8001f4a <HAL_GPIO_WritePin>
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40010c00 	.word	0x40010c00

080018fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018fc:	f7ff fe78 	bl	80015f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001900:	480b      	ldr	r0, [pc, #44]	; (8001930 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001902:	490c      	ldr	r1, [pc, #48]	; (8001934 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001904:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001908:	e002      	b.n	8001910 <LoopCopyDataInit>

0800190a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800190c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190e:	3304      	adds	r3, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001914:	d3f9      	bcc.n	800190a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001916:	4a09      	ldr	r2, [pc, #36]	; (800193c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001918:	4c09      	ldr	r4, [pc, #36]	; (8001940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800191c:	e001      	b.n	8001922 <LoopFillZerobss>

0800191e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001920:	3204      	adds	r2, #4

08001922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001924:	d3fb      	bcc.n	800191e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001926:	f001 fae1 	bl	8002eec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800192a:	f7ff fcb9 	bl	80012a0 <main>
  bx lr
 800192e:	4770      	bx	lr
  ldr r0, =_sdata
 8001930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001934:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001938:	08002f88 	.word	0x08002f88
  ldr r2, =_sbss
 800193c:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001940:	2000011c 	.word	0x2000011c

08001944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001944:	e7fe      	b.n	8001944 <ADC1_2_IRQHandler>
	...

08001948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_Init+0x28>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a07      	ldr	r2, [pc, #28]	; (8001970 <HAL_Init+0x28>)
 8001952:	f043 0310 	orr.w	r3, r3, #16
 8001956:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001958:	2003      	movs	r0, #3
 800195a:	f000 f923 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195e:	200f      	movs	r0, #15
 8001960:	f000 f808 	bl	8001974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001964:	f7ff fdbc 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40022000 	.word	0x40022000

08001974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_InitTick+0x54>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_InitTick+0x58>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198a:	fbb3 f3f1 	udiv	r3, r3, r1
 800198e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f93b 	bl	8001c0e <HAL_SYSTICK_Config>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e00e      	b.n	80019c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b0f      	cmp	r3, #15
 80019a6:	d80a      	bhi.n	80019be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a8:	2200      	movs	r2, #0
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	f000 f903 	bl	8001bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b4:	4a06      	ldr	r2, [pc, #24]	; (80019d0 <HAL_InitTick+0x5c>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e000      	b.n	80019c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000044 	.word	0x20000044
 80019cc:	2000004c 	.word	0x2000004c
 80019d0:	20000048 	.word	0x20000048

080019d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_IncTick+0x1c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <HAL_IncTick+0x20>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	4a03      	ldr	r2, [pc, #12]	; (80019f4 <HAL_IncTick+0x20>)
 80019e6:	6013      	str	r3, [r2, #0]
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	2000004c 	.word	0x2000004c
 80019f4:	20000118 	.word	0x20000118

080019f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return uwTick;
 80019fc:	4b02      	ldr	r3, [pc, #8]	; (8001a08 <HAL_GetTick+0x10>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	20000118 	.word	0x20000118

08001a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3e:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	60d3      	str	r3, [r2, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <__NVIC_GetPriorityGrouping+0x18>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	f003 0307 	and.w	r3, r3, #7
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	db0b      	blt.n	8001a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	f003 021f 	and.w	r2, r3, #31
 8001a88:	4906      	ldr	r1, [pc, #24]	; (8001aa4 <__NVIC_EnableIRQ+0x34>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	2001      	movs	r0, #1
 8001a92:	fa00 f202 	lsl.w	r2, r0, r2
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	e000e100 	.word	0xe000e100

08001aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0a      	blt.n	8001ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	490c      	ldr	r1, [pc, #48]	; (8001af4 <__NVIC_SetPriority+0x4c>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad0:	e00a      	b.n	8001ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4908      	ldr	r1, [pc, #32]	; (8001af8 <__NVIC_SetPriority+0x50>)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	761a      	strb	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f1c3 0307 	rsb	r3, r3, #7
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	bf28      	it	cs
 8001b1a:	2304      	movcs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3304      	adds	r3, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d902      	bls.n	8001b2c <NVIC_EncodePriority+0x30>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	e000      	b.n	8001b2e <NVIC_EncodePriority+0x32>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43d9      	mvns	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	4313      	orrs	r3, r2
         );
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f7ff ff90 	bl	8001aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff2d 	bl	8001a0c <__NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff42 	bl	8001a54 <__NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff90 	bl	8001afc <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5f 	bl	8001aa8 <__NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff35 	bl	8001a70 <__NVIC_EnableIRQ>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffa2 	bl	8001b60 <SysTick_Config>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b08b      	sub	sp, #44	; 0x2c
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c36:	2300      	movs	r3, #0
 8001c38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c3a:	e148      	b.n	8001ece <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	f040 8137 	bne.w	8001ec8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4aa3      	ldr	r2, [pc, #652]	; (8001eec <HAL_GPIO_Init+0x2c4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d05e      	beq.n	8001d22 <HAL_GPIO_Init+0xfa>
 8001c64:	4aa1      	ldr	r2, [pc, #644]	; (8001eec <HAL_GPIO_Init+0x2c4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d875      	bhi.n	8001d56 <HAL_GPIO_Init+0x12e>
 8001c6a:	4aa1      	ldr	r2, [pc, #644]	; (8001ef0 <HAL_GPIO_Init+0x2c8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d058      	beq.n	8001d22 <HAL_GPIO_Init+0xfa>
 8001c70:	4a9f      	ldr	r2, [pc, #636]	; (8001ef0 <HAL_GPIO_Init+0x2c8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d86f      	bhi.n	8001d56 <HAL_GPIO_Init+0x12e>
 8001c76:	4a9f      	ldr	r2, [pc, #636]	; (8001ef4 <HAL_GPIO_Init+0x2cc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d052      	beq.n	8001d22 <HAL_GPIO_Init+0xfa>
 8001c7c:	4a9d      	ldr	r2, [pc, #628]	; (8001ef4 <HAL_GPIO_Init+0x2cc>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d869      	bhi.n	8001d56 <HAL_GPIO_Init+0x12e>
 8001c82:	4a9d      	ldr	r2, [pc, #628]	; (8001ef8 <HAL_GPIO_Init+0x2d0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d04c      	beq.n	8001d22 <HAL_GPIO_Init+0xfa>
 8001c88:	4a9b      	ldr	r2, [pc, #620]	; (8001ef8 <HAL_GPIO_Init+0x2d0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d863      	bhi.n	8001d56 <HAL_GPIO_Init+0x12e>
 8001c8e:	4a9b      	ldr	r2, [pc, #620]	; (8001efc <HAL_GPIO_Init+0x2d4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d046      	beq.n	8001d22 <HAL_GPIO_Init+0xfa>
 8001c94:	4a99      	ldr	r2, [pc, #612]	; (8001efc <HAL_GPIO_Init+0x2d4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d85d      	bhi.n	8001d56 <HAL_GPIO_Init+0x12e>
 8001c9a:	2b12      	cmp	r3, #18
 8001c9c:	d82a      	bhi.n	8001cf4 <HAL_GPIO_Init+0xcc>
 8001c9e:	2b12      	cmp	r3, #18
 8001ca0:	d859      	bhi.n	8001d56 <HAL_GPIO_Init+0x12e>
 8001ca2:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <HAL_GPIO_Init+0x80>)
 8001ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca8:	08001d23 	.word	0x08001d23
 8001cac:	08001cfd 	.word	0x08001cfd
 8001cb0:	08001d0f 	.word	0x08001d0f
 8001cb4:	08001d51 	.word	0x08001d51
 8001cb8:	08001d57 	.word	0x08001d57
 8001cbc:	08001d57 	.word	0x08001d57
 8001cc0:	08001d57 	.word	0x08001d57
 8001cc4:	08001d57 	.word	0x08001d57
 8001cc8:	08001d57 	.word	0x08001d57
 8001ccc:	08001d57 	.word	0x08001d57
 8001cd0:	08001d57 	.word	0x08001d57
 8001cd4:	08001d57 	.word	0x08001d57
 8001cd8:	08001d57 	.word	0x08001d57
 8001cdc:	08001d57 	.word	0x08001d57
 8001ce0:	08001d57 	.word	0x08001d57
 8001ce4:	08001d57 	.word	0x08001d57
 8001ce8:	08001d57 	.word	0x08001d57
 8001cec:	08001d05 	.word	0x08001d05
 8001cf0:	08001d19 	.word	0x08001d19
 8001cf4:	4a82      	ldr	r2, [pc, #520]	; (8001f00 <HAL_GPIO_Init+0x2d8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cfa:	e02c      	b.n	8001d56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	623b      	str	r3, [r7, #32]
          break;
 8001d02:	e029      	b.n	8001d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	623b      	str	r3, [r7, #32]
          break;
 8001d0c:	e024      	b.n	8001d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	3308      	adds	r3, #8
 8001d14:	623b      	str	r3, [r7, #32]
          break;
 8001d16:	e01f      	b.n	8001d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	330c      	adds	r3, #12
 8001d1e:	623b      	str	r3, [r7, #32]
          break;
 8001d20:	e01a      	b.n	8001d58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d102      	bne.n	8001d30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	623b      	str	r3, [r7, #32]
          break;
 8001d2e:	e013      	b.n	8001d58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d105      	bne.n	8001d44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d38:	2308      	movs	r3, #8
 8001d3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	611a      	str	r2, [r3, #16]
          break;
 8001d42:	e009      	b.n	8001d58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d44:	2308      	movs	r3, #8
 8001d46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	615a      	str	r2, [r3, #20]
          break;
 8001d4e:	e003      	b.n	8001d58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
          break;
 8001d54:	e000      	b.n	8001d58 <HAL_GPIO_Init+0x130>
          break;
 8001d56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2bff      	cmp	r3, #255	; 0xff
 8001d5c:	d801      	bhi.n	8001d62 <HAL_GPIO_Init+0x13a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	e001      	b.n	8001d66 <HAL_GPIO_Init+0x13e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3304      	adds	r3, #4
 8001d66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2bff      	cmp	r3, #255	; 0xff
 8001d6c:	d802      	bhi.n	8001d74 <HAL_GPIO_Init+0x14c>
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	e002      	b.n	8001d7a <HAL_GPIO_Init+0x152>
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	3b08      	subs	r3, #8
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	210f      	movs	r1, #15
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	6a39      	ldr	r1, [r7, #32]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	fa01 f303 	lsl.w	r3, r1, r3
 8001d94:	431a      	orrs	r2, r3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8090 	beq.w	8001ec8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001da8:	4b56      	ldr	r3, [pc, #344]	; (8001f04 <HAL_GPIO_Init+0x2dc>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	4a55      	ldr	r2, [pc, #340]	; (8001f04 <HAL_GPIO_Init+0x2dc>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6193      	str	r3, [r2, #24]
 8001db4:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_GPIO_Init+0x2dc>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dc0:	4a51      	ldr	r2, [pc, #324]	; (8001f08 <HAL_GPIO_Init+0x2e0>)
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	089b      	lsrs	r3, r3, #2
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	220f      	movs	r2, #15
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	4013      	ands	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a49      	ldr	r2, [pc, #292]	; (8001f0c <HAL_GPIO_Init+0x2e4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d00d      	beq.n	8001e08 <HAL_GPIO_Init+0x1e0>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a48      	ldr	r2, [pc, #288]	; (8001f10 <HAL_GPIO_Init+0x2e8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d007      	beq.n	8001e04 <HAL_GPIO_Init+0x1dc>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a47      	ldr	r2, [pc, #284]	; (8001f14 <HAL_GPIO_Init+0x2ec>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d101      	bne.n	8001e00 <HAL_GPIO_Init+0x1d8>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e004      	b.n	8001e0a <HAL_GPIO_Init+0x1e2>
 8001e00:	2303      	movs	r3, #3
 8001e02:	e002      	b.n	8001e0a <HAL_GPIO_Init+0x1e2>
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <HAL_GPIO_Init+0x1e2>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0c:	f002 0203 	and.w	r2, r2, #3
 8001e10:	0092      	lsls	r2, r2, #2
 8001e12:	4093      	lsls	r3, r2
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e1a:	493b      	ldr	r1, [pc, #236]	; (8001f08 <HAL_GPIO_Init+0x2e0>)
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	3302      	adds	r3, #2
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d006      	beq.n	8001e42 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e34:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	4937      	ldr	r1, [pc, #220]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]
 8001e40:	e006      	b.n	8001e50 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e42:	4b35      	ldr	r3, [pc, #212]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	4933      	ldr	r1, [pc, #204]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e5c:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	492d      	ldr	r1, [pc, #180]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	60cb      	str	r3, [r1, #12]
 8001e68:	e006      	b.n	8001e78 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e6a:	4b2b      	ldr	r3, [pc, #172]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	4929      	ldr	r1, [pc, #164]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d006      	beq.n	8001e92 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e84:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	4923      	ldr	r1, [pc, #140]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e92:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	491f      	ldr	r1, [pc, #124]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d006      	beq.n	8001eba <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4919      	ldr	r1, [pc, #100]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	4915      	ldr	r1, [pc, #84]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	3301      	adds	r3, #1
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f47f aeaf 	bne.w	8001c3c <HAL_GPIO_Init+0x14>
  }
}
 8001ede:	bf00      	nop
 8001ee0:	bf00      	nop
 8001ee2:	372c      	adds	r7, #44	; 0x2c
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	10320000 	.word	0x10320000
 8001ef0:	10310000 	.word	0x10310000
 8001ef4:	10220000 	.word	0x10220000
 8001ef8:	10210000 	.word	0x10210000
 8001efc:	10120000 	.word	0x10120000
 8001f00:	10110000 	.word	0x10110000
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40010000 	.word	0x40010000
 8001f0c:	40010800 	.word	0x40010800
 8001f10:	40010c00 	.word	0x40010c00
 8001f14:	40011000 	.word	0x40011000
 8001f18:	40010400 	.word	0x40010400

08001f1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f34:	2301      	movs	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
 8001f38:	e001      	b.n	8001f3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr

08001f4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	807b      	strh	r3, [r7, #2]
 8001f56:	4613      	mov	r3, r2
 8001f58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f5a:	787b      	ldrb	r3, [r7, #1]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f60:	887a      	ldrh	r2, [r7, #2]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f66:	e003      	b.n	8001f70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f68:	887b      	ldrh	r3, [r7, #2]
 8001f6a:	041a      	lsls	r2, r3, #16
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	611a      	str	r2, [r3, #16]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e26c      	b.n	8002468 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8087 	beq.w	80020aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f9c:	4b92      	ldr	r3, [pc, #584]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d00c      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fa8:	4b8f      	ldr	r3, [pc, #572]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 030c 	and.w	r3, r3, #12
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d112      	bne.n	8001fda <HAL_RCC_OscConfig+0x5e>
 8001fb4:	4b8c      	ldr	r3, [pc, #560]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc0:	d10b      	bne.n	8001fda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc2:	4b89      	ldr	r3, [pc, #548]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d06c      	beq.n	80020a8 <HAL_RCC_OscConfig+0x12c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d168      	bne.n	80020a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e246      	b.n	8002468 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x76>
 8001fe4:	4b80      	ldr	r3, [pc, #512]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a7f      	ldr	r2, [pc, #508]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	e02e      	b.n	8002050 <HAL_RCC_OscConfig+0xd4>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x98>
 8001ffa:	4b7b      	ldr	r3, [pc, #492]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a7a      	ldr	r2, [pc, #488]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	4b78      	ldr	r3, [pc, #480]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a77      	ldr	r2, [pc, #476]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 800200c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	e01d      	b.n	8002050 <HAL_RCC_OscConfig+0xd4>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0xbc>
 800201e:	4b72      	ldr	r3, [pc, #456]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a71      	ldr	r2, [pc, #452]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	4b6f      	ldr	r3, [pc, #444]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a6e      	ldr	r2, [pc, #440]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e00b      	b.n	8002050 <HAL_RCC_OscConfig+0xd4>
 8002038:	4b6b      	ldr	r3, [pc, #428]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a6a      	ldr	r2, [pc, #424]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 800203e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	4b68      	ldr	r3, [pc, #416]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a67      	ldr	r2, [pc, #412]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 800204a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d013      	beq.n	8002080 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff fcce 	bl	80019f8 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002060:	f7ff fcca 	bl	80019f8 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	; 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e1fa      	b.n	8002468 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	4b5d      	ldr	r3, [pc, #372]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0xe4>
 800207e:	e014      	b.n	80020aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7ff fcba 	bl	80019f8 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002088:	f7ff fcb6 	bl	80019f8 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b64      	cmp	r3, #100	; 0x64
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e1e6      	b.n	8002468 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209a:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x10c>
 80020a6:	e000      	b.n	80020aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d063      	beq.n	800217e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020b6:	4b4c      	ldr	r3, [pc, #304]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00b      	beq.n	80020da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020c2:	4b49      	ldr	r3, [pc, #292]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d11c      	bne.n	8002108 <HAL_RCC_OscConfig+0x18c>
 80020ce:	4b46      	ldr	r3, [pc, #280]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d116      	bne.n	8002108 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020da:	4b43      	ldr	r3, [pc, #268]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <HAL_RCC_OscConfig+0x176>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e1ba      	b.n	8002468 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f2:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4939      	ldr	r1, [pc, #228]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002106:	e03a      	b.n	800217e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d020      	beq.n	8002152 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002110:	4b36      	ldr	r3, [pc, #216]	; (80021ec <HAL_RCC_OscConfig+0x270>)
 8002112:	2201      	movs	r2, #1
 8002114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002116:	f7ff fc6f 	bl	80019f8 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800211e:	f7ff fc6b 	bl	80019f8 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e19b      	b.n	8002468 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002130:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213c:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4927      	ldr	r1, [pc, #156]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 800214c:	4313      	orrs	r3, r2
 800214e:	600b      	str	r3, [r1, #0]
 8002150:	e015      	b.n	800217e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002152:	4b26      	ldr	r3, [pc, #152]	; (80021ec <HAL_RCC_OscConfig+0x270>)
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7ff fc4e 	bl	80019f8 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002160:	f7ff fc4a 	bl	80019f8 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e17a      	b.n	8002468 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002172:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d03a      	beq.n	8002200 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d019      	beq.n	80021c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002192:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002194:	2201      	movs	r2, #1
 8002196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002198:	f7ff fc2e 	bl	80019f8 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a0:	f7ff fc2a 	bl	80019f8 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e15a      	b.n	8002468 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021be:	2001      	movs	r0, #1
 80021c0:	f000 fa9a 	bl	80026f8 <RCC_Delay>
 80021c4:	e01c      	b.n	8002200 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021cc:	f7ff fc14 	bl	80019f8 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d2:	e00f      	b.n	80021f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d4:	f7ff fc10 	bl	80019f8 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d908      	bls.n	80021f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e140      	b.n	8002468 <HAL_RCC_OscConfig+0x4ec>
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	42420000 	.word	0x42420000
 80021f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f4:	4b9e      	ldr	r3, [pc, #632]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1e9      	bne.n	80021d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80a6 	beq.w	800235a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220e:	2300      	movs	r3, #0
 8002210:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002212:	4b97      	ldr	r3, [pc, #604]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10d      	bne.n	800223a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	4b94      	ldr	r3, [pc, #592]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4a93      	ldr	r2, [pc, #588]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 8002224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002228:	61d3      	str	r3, [r2, #28]
 800222a:	4b91      	ldr	r3, [pc, #580]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002236:	2301      	movs	r3, #1
 8002238:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223a:	4b8e      	ldr	r3, [pc, #568]	; (8002474 <HAL_RCC_OscConfig+0x4f8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d118      	bne.n	8002278 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002246:	4b8b      	ldr	r3, [pc, #556]	; (8002474 <HAL_RCC_OscConfig+0x4f8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a8a      	ldr	r2, [pc, #552]	; (8002474 <HAL_RCC_OscConfig+0x4f8>)
 800224c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002252:	f7ff fbd1 	bl	80019f8 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225a:	f7ff fbcd 	bl	80019f8 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b64      	cmp	r3, #100	; 0x64
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e0fd      	b.n	8002468 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	4b81      	ldr	r3, [pc, #516]	; (8002474 <HAL_RCC_OscConfig+0x4f8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x312>
 8002280:	4b7b      	ldr	r3, [pc, #492]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	4a7a      	ldr	r2, [pc, #488]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6213      	str	r3, [r2, #32]
 800228c:	e02d      	b.n	80022ea <HAL_RCC_OscConfig+0x36e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10c      	bne.n	80022b0 <HAL_RCC_OscConfig+0x334>
 8002296:	4b76      	ldr	r3, [pc, #472]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	4a75      	ldr	r2, [pc, #468]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	6213      	str	r3, [r2, #32]
 80022a2:	4b73      	ldr	r3, [pc, #460]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4a72      	ldr	r2, [pc, #456]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	f023 0304 	bic.w	r3, r3, #4
 80022ac:	6213      	str	r3, [r2, #32]
 80022ae:	e01c      	b.n	80022ea <HAL_RCC_OscConfig+0x36e>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	2b05      	cmp	r3, #5
 80022b6:	d10c      	bne.n	80022d2 <HAL_RCC_OscConfig+0x356>
 80022b8:	4b6d      	ldr	r3, [pc, #436]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	4a6c      	ldr	r2, [pc, #432]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 80022be:	f043 0304 	orr.w	r3, r3, #4
 80022c2:	6213      	str	r3, [r2, #32]
 80022c4:	4b6a      	ldr	r3, [pc, #424]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4a69      	ldr	r2, [pc, #420]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6213      	str	r3, [r2, #32]
 80022d0:	e00b      	b.n	80022ea <HAL_RCC_OscConfig+0x36e>
 80022d2:	4b67      	ldr	r3, [pc, #412]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	4a66      	ldr	r2, [pc, #408]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 80022d8:	f023 0301 	bic.w	r3, r3, #1
 80022dc:	6213      	str	r3, [r2, #32]
 80022de:	4b64      	ldr	r3, [pc, #400]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4a63      	ldr	r2, [pc, #396]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 80022e4:	f023 0304 	bic.w	r3, r3, #4
 80022e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d015      	beq.n	800231e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f2:	f7ff fb81 	bl	80019f8 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7ff fb7d 	bl	80019f8 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	; 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e0ab      	b.n	8002468 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002310:	4b57      	ldr	r3, [pc, #348]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0ee      	beq.n	80022fa <HAL_RCC_OscConfig+0x37e>
 800231c:	e014      	b.n	8002348 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231e:	f7ff fb6b 	bl	80019f8 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002324:	e00a      	b.n	800233c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002326:	f7ff fb67 	bl	80019f8 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	f241 3288 	movw	r2, #5000	; 0x1388
 8002334:	4293      	cmp	r3, r2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e095      	b.n	8002468 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233c:	4b4c      	ldr	r3, [pc, #304]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1ee      	bne.n	8002326 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002348:	7dfb      	ldrb	r3, [r7, #23]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d105      	bne.n	800235a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234e:	4b48      	ldr	r3, [pc, #288]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	4a47      	ldr	r2, [pc, #284]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 8002354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002358:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 8081 	beq.w	8002466 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002364:	4b42      	ldr	r3, [pc, #264]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 030c 	and.w	r3, r3, #12
 800236c:	2b08      	cmp	r3, #8
 800236e:	d061      	beq.n	8002434 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d146      	bne.n	8002406 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002378:	4b3f      	ldr	r3, [pc, #252]	; (8002478 <HAL_RCC_OscConfig+0x4fc>)
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237e:	f7ff fb3b 	bl	80019f8 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002386:	f7ff fb37 	bl	80019f8 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e067      	b.n	8002468 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002398:	4b35      	ldr	r3, [pc, #212]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1f0      	bne.n	8002386 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ac:	d108      	bne.n	80023c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023ae:	4b30      	ldr	r3, [pc, #192]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	492d      	ldr	r1, [pc, #180]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c0:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a19      	ldr	r1, [r3, #32]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	430b      	orrs	r3, r1
 80023d2:	4927      	ldr	r1, [pc, #156]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d8:	4b27      	ldr	r3, [pc, #156]	; (8002478 <HAL_RCC_OscConfig+0x4fc>)
 80023da:	2201      	movs	r2, #1
 80023dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023de:	f7ff fb0b 	bl	80019f8 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e6:	f7ff fb07 	bl	80019f8 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e037      	b.n	8002468 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f8:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x46a>
 8002404:	e02f      	b.n	8002466 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002406:	4b1c      	ldr	r3, [pc, #112]	; (8002478 <HAL_RCC_OscConfig+0x4fc>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7ff faf4 	bl	80019f8 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002414:	f7ff faf0 	bl	80019f8 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e020      	b.n	8002468 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x498>
 8002432:	e018      	b.n	8002466 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e013      	b.n	8002468 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCC_OscConfig+0x4f4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	429a      	cmp	r2, r3
 8002452:	d106      	bne.n	8002462 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	429a      	cmp	r2, r3
 8002460:	d001      	beq.n	8002466 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40021000 	.word	0x40021000
 8002474:	40007000 	.word	0x40007000
 8002478:	42420060 	.word	0x42420060

0800247c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0d0      	b.n	8002632 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002490:	4b6a      	ldr	r3, [pc, #424]	; (800263c <HAL_RCC_ClockConfig+0x1c0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d910      	bls.n	80024c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b67      	ldr	r3, [pc, #412]	; (800263c <HAL_RCC_ClockConfig+0x1c0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 0207 	bic.w	r2, r3, #7
 80024a6:	4965      	ldr	r1, [pc, #404]	; (800263c <HAL_RCC_ClockConfig+0x1c0>)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b63      	ldr	r3, [pc, #396]	; (800263c <HAL_RCC_ClockConfig+0x1c0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0b8      	b.n	8002632 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d020      	beq.n	800250e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d8:	4b59      	ldr	r3, [pc, #356]	; (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4a58      	ldr	r2, [pc, #352]	; (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f0:	4b53      	ldr	r3, [pc, #332]	; (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4a52      	ldr	r2, [pc, #328]	; (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024fc:	4b50      	ldr	r3, [pc, #320]	; (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	494d      	ldr	r1, [pc, #308]	; (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	4313      	orrs	r3, r2
 800250c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d040      	beq.n	800259c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	4b47      	ldr	r3, [pc, #284]	; (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d115      	bne.n	800255a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e07f      	b.n	8002632 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253a:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e073      	b.n	8002632 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254a:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e06b      	b.n	8002632 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800255a:	4b39      	ldr	r3, [pc, #228]	; (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f023 0203 	bic.w	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4936      	ldr	r1, [pc, #216]	; (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	4313      	orrs	r3, r2
 800256a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800256c:	f7ff fa44 	bl	80019f8 <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002572:	e00a      	b.n	800258a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002574:	f7ff fa40 	bl	80019f8 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e053      	b.n	8002632 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 020c 	and.w	r2, r3, #12
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	429a      	cmp	r2, r3
 800259a:	d1eb      	bne.n	8002574 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800259c:	4b27      	ldr	r3, [pc, #156]	; (800263c <HAL_RCC_ClockConfig+0x1c0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d210      	bcs.n	80025cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_RCC_ClockConfig+0x1c0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 0207 	bic.w	r2, r3, #7
 80025b2:	4922      	ldr	r1, [pc, #136]	; (800263c <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_RCC_ClockConfig+0x1c0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e032      	b.n	8002632 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d8:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4916      	ldr	r1, [pc, #88]	; (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	490e      	ldr	r1, [pc, #56]	; (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	4313      	orrs	r3, r2
 8002608:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800260a:	f000 f821 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 800260e:	4602      	mov	r2, r0
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	490a      	ldr	r1, [pc, #40]	; (8002644 <HAL_RCC_ClockConfig+0x1c8>)
 800261c:	5ccb      	ldrb	r3, [r1, r3]
 800261e:	fa22 f303 	lsr.w	r3, r2, r3
 8002622:	4a09      	ldr	r2, [pc, #36]	; (8002648 <HAL_RCC_ClockConfig+0x1cc>)
 8002624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_RCC_ClockConfig+0x1d0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff f9a2 	bl	8001974 <HAL_InitTick>

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40022000 	.word	0x40022000
 8002640:	40021000 	.word	0x40021000
 8002644:	08002f5c 	.word	0x08002f5c
 8002648:	20000044 	.word	0x20000044
 800264c:	20000048 	.word	0x20000048

08002650 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800266a:	4b1e      	ldr	r3, [pc, #120]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b04      	cmp	r3, #4
 8002678:	d002      	beq.n	8002680 <HAL_RCC_GetSysClockFreq+0x30>
 800267a:	2b08      	cmp	r3, #8
 800267c:	d003      	beq.n	8002686 <HAL_RCC_GetSysClockFreq+0x36>
 800267e:	e027      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002680:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002682:	613b      	str	r3, [r7, #16]
      break;
 8002684:	e027      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	0c9b      	lsrs	r3, r3, #18
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	4a17      	ldr	r2, [pc, #92]	; (80026ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002690:	5cd3      	ldrb	r3, [r2, r3]
 8002692:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d010      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800269e:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	0c5b      	lsrs	r3, r3, #17
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	4a11      	ldr	r2, [pc, #68]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026aa:	5cd3      	ldrb	r3, [r2, r3]
 80026ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80026b2:	fb02 f203 	mul.w	r2, r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	e004      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a0c      	ldr	r2, [pc, #48]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026c4:	fb02 f303 	mul.w	r3, r2, r3
 80026c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	613b      	str	r3, [r7, #16]
      break;
 80026ce:	e002      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80026d2:	613b      	str	r3, [r7, #16]
      break;
 80026d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026d6:	693b      	ldr	r3, [r7, #16]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	371c      	adds	r7, #28
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000
 80026e8:	007a1200 	.word	0x007a1200
 80026ec:	08002f6c 	.word	0x08002f6c
 80026f0:	08002f7c 	.word	0x08002f7c
 80026f4:	003d0900 	.word	0x003d0900

080026f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <RCC_Delay+0x34>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <RCC_Delay+0x38>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0a5b      	lsrs	r3, r3, #9
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002714:	bf00      	nop
  }
  while (Delay --);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	60fa      	str	r2, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f9      	bne.n	8002714 <RCC_Delay+0x1c>
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	20000044 	.word	0x20000044
 8002730:	10624dd3 	.word	0x10624dd3

08002734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e041      	b.n	80027ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fe fef2 	bl	8001544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3304      	adds	r3, #4
 8002770:	4619      	mov	r1, r3
 8002772:	4610      	mov	r0, r2
 8002774:	f000 fa56 	bl	8002c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d001      	beq.n	80027ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e035      	b.n	8002858 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a16      	ldr	r2, [pc, #88]	; (8002864 <HAL_TIM_Base_Start_IT+0x90>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d009      	beq.n	8002822 <HAL_TIM_Base_Start_IT+0x4e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002816:	d004      	beq.n	8002822 <HAL_TIM_Base_Start_IT+0x4e>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a12      	ldr	r2, [pc, #72]	; (8002868 <HAL_TIM_Base_Start_IT+0x94>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d111      	bne.n	8002846 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b06      	cmp	r3, #6
 8002832:	d010      	beq.n	8002856 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002844:	e007      	b.n	8002856 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0201 	orr.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40012c00 	.word	0x40012c00
 8002868:	40000400 	.word	0x40000400

0800286c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d020      	beq.n	80028d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d01b      	beq.n	80028d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f06f 0202 	mvn.w	r2, #2
 80028a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f998 	bl	8002bec <HAL_TIM_IC_CaptureCallback>
 80028bc:	e005      	b.n	80028ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f98b 	bl	8002bda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f99a 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d020      	beq.n	800291c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01b      	beq.n	800291c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0204 	mvn.w	r2, #4
 80028ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2202      	movs	r2, #2
 80028f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f972 	bl	8002bec <HAL_TIM_IC_CaptureCallback>
 8002908:	e005      	b.n	8002916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f965 	bl	8002bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f974 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d020      	beq.n	8002968 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01b      	beq.n	8002968 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0208 	mvn.w	r2, #8
 8002938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2204      	movs	r2, #4
 800293e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f94c 	bl	8002bec <HAL_TIM_IC_CaptureCallback>
 8002954:	e005      	b.n	8002962 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f93f 	bl	8002bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f94e 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	2b00      	cmp	r3, #0
 8002970:	d020      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01b      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0210 	mvn.w	r2, #16
 8002984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2208      	movs	r2, #8
 800298a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f926 	bl	8002bec <HAL_TIM_IC_CaptureCallback>
 80029a0:	e005      	b.n	80029ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f919 	bl	8002bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f928 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00c      	beq.n	80029d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d007      	beq.n	80029d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0201 	mvn.w	r2, #1
 80029d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fe fd6e 	bl	80014b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00c      	beq.n	80029fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d007      	beq.n	80029fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fa6f 	bl	8002eda <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00c      	beq.n	8002a20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f8f8 	bl	8002c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00c      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0220 	mvn.w	r2, #32
 8002a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fa42 	bl	8002ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a44:	bf00      	nop
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_TIM_ConfigClockSource+0x1c>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e0b4      	b.n	8002bd2 <HAL_TIM_ConfigClockSource+0x186>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa0:	d03e      	beq.n	8002b20 <HAL_TIM_ConfigClockSource+0xd4>
 8002aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa6:	f200 8087 	bhi.w	8002bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aae:	f000 8086 	beq.w	8002bbe <HAL_TIM_ConfigClockSource+0x172>
 8002ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab6:	d87f      	bhi.n	8002bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab8:	2b70      	cmp	r3, #112	; 0x70
 8002aba:	d01a      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0xa6>
 8002abc:	2b70      	cmp	r3, #112	; 0x70
 8002abe:	d87b      	bhi.n	8002bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac0:	2b60      	cmp	r3, #96	; 0x60
 8002ac2:	d050      	beq.n	8002b66 <HAL_TIM_ConfigClockSource+0x11a>
 8002ac4:	2b60      	cmp	r3, #96	; 0x60
 8002ac6:	d877      	bhi.n	8002bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac8:	2b50      	cmp	r3, #80	; 0x50
 8002aca:	d03c      	beq.n	8002b46 <HAL_TIM_ConfigClockSource+0xfa>
 8002acc:	2b50      	cmp	r3, #80	; 0x50
 8002ace:	d873      	bhi.n	8002bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad0:	2b40      	cmp	r3, #64	; 0x40
 8002ad2:	d058      	beq.n	8002b86 <HAL_TIM_ConfigClockSource+0x13a>
 8002ad4:	2b40      	cmp	r3, #64	; 0x40
 8002ad6:	d86f      	bhi.n	8002bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad8:	2b30      	cmp	r3, #48	; 0x30
 8002ada:	d064      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8002adc:	2b30      	cmp	r3, #48	; 0x30
 8002ade:	d86b      	bhi.n	8002bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	d060      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d867      	bhi.n	8002bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d05c      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8002aec:	2b10      	cmp	r3, #16
 8002aee:	d05a      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8002af0:	e062      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6899      	ldr	r1, [r3, #8]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f000 f96a 	bl	8002dda <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	609a      	str	r2, [r3, #8]
      break;
 8002b1e:	e04f      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	6899      	ldr	r1, [r3, #8]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f000 f953 	bl	8002dda <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b42:	609a      	str	r2, [r3, #8]
      break;
 8002b44:	e03c      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	6859      	ldr	r1, [r3, #4]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	461a      	mov	r2, r3
 8002b54:	f000 f8ca 	bl	8002cec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2150      	movs	r1, #80	; 0x50
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 f921 	bl	8002da6 <TIM_ITRx_SetConfig>
      break;
 8002b64:	e02c      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	6859      	ldr	r1, [r3, #4]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	461a      	mov	r2, r3
 8002b74:	f000 f8e8 	bl	8002d48 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2160      	movs	r1, #96	; 0x60
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 f911 	bl	8002da6 <TIM_ITRx_SetConfig>
      break;
 8002b84:	e01c      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6859      	ldr	r1, [r3, #4]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	461a      	mov	r2, r3
 8002b94:	f000 f8aa 	bl	8002cec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2140      	movs	r1, #64	; 0x40
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f901 	bl	8002da6 <TIM_ITRx_SetConfig>
      break;
 8002ba4:	e00c      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	f000 f8f8 	bl	8002da6 <TIM_ITRx_SetConfig>
      break;
 8002bb6:	e003      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
      break;
 8002bbc:	e000      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
	...

08002c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a2b      	ldr	r2, [pc, #172]	; (8002ce4 <TIM_Base_SetConfig+0xc0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d007      	beq.n	8002c4c <TIM_Base_SetConfig+0x28>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c42:	d003      	beq.n	8002c4c <TIM_Base_SetConfig+0x28>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a28      	ldr	r2, [pc, #160]	; (8002ce8 <TIM_Base_SetConfig+0xc4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d108      	bne.n	8002c5e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a20      	ldr	r2, [pc, #128]	; (8002ce4 <TIM_Base_SetConfig+0xc0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d007      	beq.n	8002c76 <TIM_Base_SetConfig+0x52>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6c:	d003      	beq.n	8002c76 <TIM_Base_SetConfig+0x52>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <TIM_Base_SetConfig+0xc4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d108      	bne.n	8002c88 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a0d      	ldr	r2, [pc, #52]	; (8002ce4 <TIM_Base_SetConfig+0xc0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d103      	bne.n	8002cbc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f023 0201 	bic.w	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	611a      	str	r2, [r3, #16]
  }
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr
 8002ce4:	40012c00 	.word	0x40012c00
 8002ce8:	40000400 	.word	0x40000400

08002cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	f023 0201 	bic.w	r2, r3, #1
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f023 030a 	bic.w	r3, r3, #10
 8002d28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	621a      	str	r2, [r3, #32]
}
 8002d3e:	bf00      	nop
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f023 0210 	bic.w	r2, r3, #16
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	031b      	lsls	r3, r3, #12
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d84:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	621a      	str	r2, [r3, #32]
}
 8002d9c:	bf00      	nop
 8002d9e:	371c      	adds	r7, #28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f043 0307 	orr.w	r3, r3, #7
 8002dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	609a      	str	r2, [r3, #8]
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b087      	sub	sp, #28
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002df4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	021a      	lsls	r2, r3, #8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	609a      	str	r2, [r3, #8]
}
 8002e0e:	bf00      	nop
 8002e10:	371c      	adds	r7, #28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e041      	b.n	8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a14      	ldr	r2, [pc, #80]	; (8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d009      	beq.n	8002e88 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7c:	d004      	beq.n	8002e88 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a10      	ldr	r2, [pc, #64]	; (8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d10c      	bne.n	8002ea2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40012c00 	.word	0x40012c00
 8002ec4:	40000400 	.word	0x40000400

08002ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <__libc_init_array>:
 8002eec:	b570      	push	{r4, r5, r6, lr}
 8002eee:	2600      	movs	r6, #0
 8002ef0:	4d0c      	ldr	r5, [pc, #48]	; (8002f24 <__libc_init_array+0x38>)
 8002ef2:	4c0d      	ldr	r4, [pc, #52]	; (8002f28 <__libc_init_array+0x3c>)
 8002ef4:	1b64      	subs	r4, r4, r5
 8002ef6:	10a4      	asrs	r4, r4, #2
 8002ef8:	42a6      	cmp	r6, r4
 8002efa:	d109      	bne.n	8002f10 <__libc_init_array+0x24>
 8002efc:	f000 f822 	bl	8002f44 <_init>
 8002f00:	2600      	movs	r6, #0
 8002f02:	4d0a      	ldr	r5, [pc, #40]	; (8002f2c <__libc_init_array+0x40>)
 8002f04:	4c0a      	ldr	r4, [pc, #40]	; (8002f30 <__libc_init_array+0x44>)
 8002f06:	1b64      	subs	r4, r4, r5
 8002f08:	10a4      	asrs	r4, r4, #2
 8002f0a:	42a6      	cmp	r6, r4
 8002f0c:	d105      	bne.n	8002f1a <__libc_init_array+0x2e>
 8002f0e:	bd70      	pop	{r4, r5, r6, pc}
 8002f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f14:	4798      	blx	r3
 8002f16:	3601      	adds	r6, #1
 8002f18:	e7ee      	b.n	8002ef8 <__libc_init_array+0xc>
 8002f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f1e:	4798      	blx	r3
 8002f20:	3601      	adds	r6, #1
 8002f22:	e7f2      	b.n	8002f0a <__libc_init_array+0x1e>
 8002f24:	08002f80 	.word	0x08002f80
 8002f28:	08002f80 	.word	0x08002f80
 8002f2c:	08002f80 	.word	0x08002f80
 8002f30:	08002f84 	.word	0x08002f84

08002f34 <memset>:
 8002f34:	4603      	mov	r3, r0
 8002f36:	4402      	add	r2, r0
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d100      	bne.n	8002f3e <memset+0xa>
 8002f3c:	4770      	bx	lr
 8002f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f42:	e7f9      	b.n	8002f38 <memset+0x4>

08002f44 <_init>:
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	bf00      	nop
 8002f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4a:	bc08      	pop	{r3}
 8002f4c:	469e      	mov	lr, r3
 8002f4e:	4770      	bx	lr

08002f50 <_fini>:
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	bf00      	nop
 8002f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f56:	bc08      	pop	{r3}
 8002f58:	469e      	mov	lr, r3
 8002f5a:	4770      	bx	lr
